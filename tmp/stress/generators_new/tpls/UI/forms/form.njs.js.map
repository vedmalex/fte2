{"version":3,"sources":["generators_new/tpls/UI/forms/form.njs.js"],"names":["code","text","expression"],"mappings":"AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAECA;AAFD,IAECA,AAAyFC,IACzFD;AAHD,IAGCA,AAAoFC,IACpFA,IACAA,gDACAA,6CACAA,IASSA,IACTA,IACAA,4CACAA,2CACAA,gBACAA,kCACAA,6BACAA,2BACAA,kDACAA,8BACAA,mCACAA,8BACAA,cACAA,wBACAA,UACAA,OACAA,IACAA,kBAAgBC,aAAcD,uCAC9BA,yCACAA,gBACAA,wBACAA,IAAED;AArCH,IAqCGA,AAAsCC,IACxCA,aAAWC,aAAcD,GAACC,iBAAkBD,oBAC5CA,IAAED;AAvCH,IAuCGA,AAAMC,IACRA,8DACAA,yBACAA,QACAA,KACAA,IACAA,kBAAgBC,aAAcD,uCAC9BA,yCACAA,cACAA,wBACAA,IAAED;AAjDH,IAiDGA,AAAsCC,IACxCA,aAAWC,aAAcD,GAACC,iBAAkBD,qBAC5CA,IAAED;AAnDH,IAmDGA,AAAMC,IACRA,8DACAA,yBACAA,QACAA,KACAA,IACAA,kBAAgBC,aAAcD,uCAC9BA,yCACAA,cACAA,wBACAA,IAAED;AA7DH,IA6DGA,AAAsCC,IACxCA,aAAWC,aAAcD,GAACC,iBAAkBD,oBAC5CA,IAAED;AA/DH,IA+DGA,AAAMC,IACRA,8DACAA,yBACAA,QACAA,KACAA,IACAA,kBAAgBC,aAAcD,uCAC9BA,yCACAA,cACAA,sBACAD;AAzED,IAyECA,AAAsCC,IACtCA,WAASC,aAAcD,GAACC,iBAAkBD,oBAC1CD;AA3ED,IA2ECA,AAAMC,IACNA,4DACAA,uBACAA,OACAA,IACAA,wCACAA,yCACAA,cACAA,mCACAA,0CAAuCC,aAAcD,iBACrDA,QAAMC,UACNA,iBACAA,oBACAA,kCACAA,UACAA,kBACAA,2BACAA,oBACAA,gCAAgCD,IAChCA,yBACAA,OACAA,KACAA,IACAA,gDACAA,yCACAA,IAAEC,+BAAgCD,IAClCA,cACAA,8BACAA,WAASC,aAAcD,+CACvBA,MAAID;AAxGL,IAwGKA,AAAyBC,uBAAqBD;AAxGnD,IAwGmDA,AAAKC,IACvDA,UACAA,oBACAA,QACAA,MACAA,IACAA,8CACAA,yCACAA,cACAA,0BAAwBC,aAAcD,4CAA0CC,aAAcD,iBAC9FA,WAASC,aAAcD,iBACvBA,kBACAA,QACAA,MACAA,IACAA,yCACAA,yCACAA,cACAA,mCACAA,uCAAoCC,aAAcD,eAClDA,QAAMC,UACNA,iBACAA,oBACAA,sCACAA,UACAA,kBACAA,4BACAA,oBACAA,AACAA,gCAAgCD,IAChCA,wBACAA,IACAD;AAxID,IAwICA,AACAA;AAzID,IAyICA,AACAA;AA1ID,IA0ICA,AACAA;AA3ID,IA2ICA,AACAA;AA5ID,IA4ICA,AACAA;AA7ID,IA6ICA,AACAA;AA9ID,IA8ICA,AACAA;AA/ID,IA+ICA,AAAEC,IACFA,uCAAoCC,gCAAiCD,UAAQC,QAASD,YAAQC,QAASD,OACvGA,UAAQC,UACRA,eACAA,kBACAA,0DACAA,QACAA,iBACAA,0BACAA,kBACAA,AACAA,8BAA8BD,IAC9BA,wBACAD;AA5JD,IA4JCA,AAAOC,IACPA,yBACAA,OACAA,KACAA,IACAA,mBACAA,gDACAA,yCACAA,GAACC,+BAAgCD,IACjCA,cACAA,8BACAA,WAASC,aAAcD,+CACvBA,OAAKD;AAxKN,IAwKMA,AAAyBC,uBAAqBD;AAxKpD,IAwKoDA,AAAKC,MACxDA,oBACAA,QACAA,MACAA,IACAA,8CACAA,yCACAA,cACAA,0BAAwBC,aAAcD,4CAA0CC,aAAcD,gBAC9FA,WAASC,aAAcD,kBACvBA,kBACAA,QACAA,MACAA,IACAA,8CACAA,yCACAA,cACAA,4BAA0BC,aAAcD,4CAA0CC,aAAcD,gBAChGA,gCACAA,0CAAuCC,aAAcD,iBACrDA,QAAMC,UACNA,iBACAA,oBACAA,kCACAA,UACAA,kBACAA,2BACAA,oBACAA,AACAA,gCAAgCD,IAChCA,iCACAA,mBACAA,QACAA,MACAA,IACAA,8CACAA,yCACAA,IACAA,cACAA,4BAA0BC,aAAcD,4CAA0CC,aAAcD,gBAChGA,gCACAA,qCAAkCC,aAAcD,eAChDA,YAAUC,UACVA,qBACAA,sBACAA,wCACAA,YACAA,oBACAA,8BACAA,sBACAA,AACAA,oCAAoCD,IACpCA,sBACAD;AA7ND,IA6NCA,AACAA;AA9ND,IA8NCA,AACAA;AA/ND,IA+NCA,AACAA;AAhOD,IAgOCA,AACAA;AAjOD,IAiOCA,AACAA;AAlOD,IAkOCA,AACAA;AAnOD,IAmOCA,AACAA;AApOD,IAoOCA,AAAEC,IACFA,qCAAkCC,gCAAiCD,UAAQC,QAASD,YAAQC,QAASD,OACrGA,YAAUC,UACVA,eACAA,kBACAA,0DACAA,QACAA,iBACAA,qBACAA,0BACAA,kBACAA,AACAA,8BAA8BD,IAC9BA,sBACAA,QAAMD;AAlPP,IAkPOA,AAAOC,IACbA,iCACAA,mBACAA,QACAA;AAtfile":"generators_new/tpls/UI/forms/form.njs.js","sourceRoot":"/Users/vedmalex/work/fte2/demo","sourcesContent":["<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"],"template":{"version":"1.0.0","segments":[{"generatedLine":1,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":2,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":3,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":4,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":5,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":6,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":7,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":8,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":9,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":10,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":11,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":12,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":13,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":14,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":15,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":16,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":17,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":18,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":19,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":20,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":21,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":22,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":23,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":24,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":25,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":26,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":27,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":28,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":29,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":30,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":31,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":32,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":33,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":34,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":35,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":36,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":37,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":38,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":39,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":40,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":41,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":42,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":43,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":44,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":45,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":46,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":47,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":48,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":49,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":50,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":51,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":52,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":53,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":54,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":55,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":56,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":57,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":58,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":59,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":60,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":61,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":62,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":63,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":64,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":65,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":66,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":67,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":68,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":69,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":70,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":71,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":72,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":73,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":74,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":75,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":76,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":77,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":78,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":79,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":80,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":81,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":82,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":83,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":84,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":85,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":86,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":87,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":88,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":89,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":90,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":91,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":92,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":93,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":94,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":95,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":96,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":97,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":98,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":99,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":100,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":101,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":102,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":103,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":104,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":105,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":106,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":107,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":108,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":109,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":110,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":111,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":112,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":113,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":114,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":115,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":116,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":117,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":118,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":119,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":120,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":121,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":122,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":123,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":124,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":125,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":126,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":127,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":128,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":129,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":130,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":131,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":132,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":133,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":134,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":135,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":136,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":137,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":138,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":139,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":140,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":141,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":142,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":143,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":144,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":145,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":146,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":147,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":148,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":149,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":150,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":151,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":152,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":153,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":154,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":155,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":156,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":157,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":158,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":159,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":160,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":161,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":162,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":163,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":164,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":165,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":166,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":167,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":168,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":169,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":170,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":171,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":172,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":173,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":174,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":175,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":176,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":177,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":178,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":179,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":180,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":181,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":182,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":183,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":184,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":185,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":186,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":187,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":188,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":189,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":190,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":191,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":192,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":193,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":194,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":195,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":196,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":197,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":198,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":199,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":200,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":201,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":202,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":203,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":204,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":205,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":206,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":207,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":208,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":209,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":210,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":211,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":212,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":213,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":214,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":215,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":216,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":217,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":218,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":219,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":220,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":221,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":222,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":223,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":224,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":225,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":226,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":227,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":228,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":229,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":230,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":231,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":232,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":233,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":234,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":235,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":236,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":237,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":238,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":239,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":240,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":241,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":242,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":243,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":244,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":245,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":246,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":247,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":248,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":249,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":250,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":251,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":252,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":253,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":254,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":255,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":256,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":257,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":258,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":259,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":260,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":261,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":262,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":263,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":264,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":265,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":266,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":267,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":268,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":269,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":270,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":271,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":272,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":273,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":274,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":275,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":276,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":277,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":278,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":279,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":280,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":281,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":282,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":283,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":284,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":285,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":286,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":287,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":288,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":289,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":290,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":291,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":292,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":293,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":294,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":295,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":296,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":297,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":298,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":299,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":300,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":301,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":302,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":303,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":304,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":305,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":306,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form.njs.js"},{"generatedLine":12,"generatedColumn":4,"originalLine":3,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":13,"generatedColumn":4,"originalLine":3,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":13,"generatedColumn":4,"originalLine":3,"originalColumn":90,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":13,"generatedColumn":8,"originalLine":4,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":14,"generatedColumn":4,"originalLine":4,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":14,"generatedColumn":4,"originalLine":4,"originalColumn":85,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":14,"generatedColumn":8,"originalLine":5,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":14,"generatedColumn":12,"originalLine":6,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":14,"generatedColumn":60,"originalLine":7,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":14,"generatedColumn":105,"originalLine":8,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":14,"generatedColumn":109,"originalLine":17,"originalColumn":10,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":14,"generatedColumn":113,"originalLine":18,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":14,"generatedColumn":117,"originalLine":19,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":14,"generatedColumn":161,"originalLine":20,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":14,"generatedColumn":204,"originalLine":21,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":14,"generatedColumn":220,"originalLine":22,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":14,"generatedColumn":254,"originalLine":23,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":14,"generatedColumn":283,"originalLine":24,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":14,"generatedColumn":310,"originalLine":25,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":14,"generatedColumn":360,"originalLine":26,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":14,"generatedColumn":390,"originalLine":27,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":14,"generatedColumn":425,"originalLine":28,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":14,"generatedColumn":455,"originalLine":29,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":14,"generatedColumn":469,"originalLine":30,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":14,"generatedColumn":493,"originalLine":31,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":14,"generatedColumn":503,"originalLine":32,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":14,"generatedColumn":510,"originalLine":33,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":14,"generatedColumn":514,"originalLine":34,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":14,"generatedColumn":532,"originalLine":34,"originalColumn":17,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":14,"generatedColumn":545,"originalLine":34,"originalColumn":31,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":14,"generatedColumn":584,"originalLine":35,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":14,"generatedColumn":625,"originalLine":36,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":14,"generatedColumn":641,"originalLine":37,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":14,"generatedColumn":665,"originalLine":38,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":14,"generatedColumn":669,"originalLine":38,"originalColumn":3,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":15,"generatedColumn":4,"originalLine":38,"originalColumn":3,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":15,"generatedColumn":4,"originalLine":38,"originalColumn":41,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":15,"generatedColumn":8,"originalLine":39,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":15,"generatedColumn":21,"originalLine":39,"originalColumn":12,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":15,"generatedColumn":34,"originalLine":39,"originalColumn":26,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":15,"generatedColumn":37,"originalLine":39,"originalColumn":27,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":15,"generatedColumn":54,"originalLine":39,"originalColumn":45,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":15,"generatedColumn":74,"originalLine":40,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":15,"generatedColumn":78,"originalLine":40,"originalColumn":3,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":16,"generatedColumn":4,"originalLine":40,"originalColumn":3,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":16,"generatedColumn":4,"originalLine":40,"originalColumn":9,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":16,"generatedColumn":8,"originalLine":41,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":16,"generatedColumn":70,"originalLine":42,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":16,"generatedColumn":95,"originalLine":43,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":16,"generatedColumn":103,"originalLine":44,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":16,"generatedColumn":108,"originalLine":45,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":16,"generatedColumn":112,"originalLine":46,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":16,"generatedColumn":130,"originalLine":46,"originalColumn":17,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":16,"generatedColumn":143,"originalLine":46,"originalColumn":31,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":16,"generatedColumn":182,"originalLine":47,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":16,"generatedColumn":223,"originalLine":48,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":16,"generatedColumn":237,"originalLine":49,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":16,"generatedColumn":261,"originalLine":50,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":16,"generatedColumn":265,"originalLine":50,"originalColumn":3,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":17,"generatedColumn":4,"originalLine":50,"originalColumn":3,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":17,"generatedColumn":4,"originalLine":50,"originalColumn":41,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":17,"generatedColumn":8,"originalLine":51,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":17,"generatedColumn":21,"originalLine":51,"originalColumn":12,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":17,"generatedColumn":34,"originalLine":51,"originalColumn":26,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":17,"generatedColumn":37,"originalLine":51,"originalColumn":27,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":17,"generatedColumn":54,"originalLine":51,"originalColumn":45,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":17,"generatedColumn":75,"originalLine":52,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":17,"generatedColumn":79,"originalLine":52,"originalColumn":3,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":18,"generatedColumn":4,"originalLine":52,"originalColumn":3,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":18,"generatedColumn":4,"originalLine":52,"originalColumn":9,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":18,"generatedColumn":8,"originalLine":53,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":18,"generatedColumn":70,"originalLine":54,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":18,"generatedColumn":95,"originalLine":55,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":18,"generatedColumn":103,"originalLine":56,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":18,"generatedColumn":108,"originalLine":57,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":18,"generatedColumn":112,"originalLine":58,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":18,"generatedColumn":130,"originalLine":58,"originalColumn":17,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":18,"generatedColumn":143,"originalLine":58,"originalColumn":31,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":18,"generatedColumn":182,"originalLine":59,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":18,"generatedColumn":223,"originalLine":60,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":18,"generatedColumn":237,"originalLine":61,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":18,"generatedColumn":261,"originalLine":62,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":18,"generatedColumn":265,"originalLine":62,"originalColumn":3,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":19,"generatedColumn":4,"originalLine":62,"originalColumn":3,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":19,"generatedColumn":4,"originalLine":62,"originalColumn":41,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":19,"generatedColumn":8,"originalLine":63,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":19,"generatedColumn":21,"originalLine":63,"originalColumn":12,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":19,"generatedColumn":34,"originalLine":63,"originalColumn":26,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":19,"generatedColumn":37,"originalLine":63,"originalColumn":27,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":19,"generatedColumn":54,"originalLine":63,"originalColumn":45,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":19,"generatedColumn":74,"originalLine":64,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":19,"generatedColumn":78,"originalLine":64,"originalColumn":3,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":20,"generatedColumn":4,"originalLine":64,"originalColumn":3,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":20,"generatedColumn":4,"originalLine":64,"originalColumn":9,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":20,"generatedColumn":8,"originalLine":65,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":20,"generatedColumn":70,"originalLine":66,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":20,"generatedColumn":95,"originalLine":67,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":20,"generatedColumn":103,"originalLine":68,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":20,"generatedColumn":108,"originalLine":69,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":20,"generatedColumn":112,"originalLine":70,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":20,"generatedColumn":130,"originalLine":70,"originalColumn":17,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":20,"generatedColumn":143,"originalLine":70,"originalColumn":31,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":20,"generatedColumn":182,"originalLine":71,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":20,"generatedColumn":223,"originalLine":72,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":20,"generatedColumn":237,"originalLine":73,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":20,"generatedColumn":259,"originalLine":74,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":21,"generatedColumn":4,"originalLine":74,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":21,"generatedColumn":4,"originalLine":74,"originalColumn":39,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":21,"generatedColumn":8,"originalLine":75,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":21,"generatedColumn":19,"originalLine":75,"originalColumn":10,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":21,"generatedColumn":32,"originalLine":75,"originalColumn":24,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":21,"generatedColumn":35,"originalLine":75,"originalColumn":25,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":21,"generatedColumn":52,"originalLine":75,"originalColumn":43,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":21,"generatedColumn":72,"originalLine":76,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":22,"generatedColumn":4,"originalLine":76,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":22,"generatedColumn":4,"originalLine":76,"originalColumn":7,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":22,"generatedColumn":8,"originalLine":77,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":22,"generatedColumn":68,"originalLine":78,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":22,"generatedColumn":91,"originalLine":79,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":22,"generatedColumn":98,"originalLine":80,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":22,"generatedColumn":102,"originalLine":81,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":22,"generatedColumn":142,"originalLine":82,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":22,"generatedColumn":183,"originalLine":83,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":22,"generatedColumn":197,"originalLine":84,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":22,"generatedColumn":232,"originalLine":85,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":22,"generatedColumn":274,"originalLine":85,"originalColumn":40,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":22,"generatedColumn":287,"originalLine":85,"originalColumn":54,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":22,"generatedColumn":304,"originalLine":86,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":22,"generatedColumn":312,"originalLine":86,"originalColumn":7,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":22,"generatedColumn":322,"originalLine":87,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":22,"generatedColumn":339,"originalLine":88,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":22,"generatedColumn":359,"originalLine":89,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":22,"generatedColumn":393,"originalLine":90,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":22,"generatedColumn":403,"originalLine":91,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":22,"generatedColumn":421,"originalLine":92,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":22,"generatedColumn":448,"originalLine":93,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":22,"generatedColumn":468,"originalLine":94,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":22,"generatedColumn":500,"originalLine":94,"originalColumn":33,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":22,"generatedColumn":504,"originalLine":95,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":22,"generatedColumn":529,"originalLine":96,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":22,"generatedColumn":536,"originalLine":97,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":22,"generatedColumn":541,"originalLine":98,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":22,"generatedColumn":545,"originalLine":99,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":22,"generatedColumn":593,"originalLine":100,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":22,"generatedColumn":634,"originalLine":101,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":22,"generatedColumn":638,"originalLine":101,"originalColumn":3,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":22,"generatedColumn":669,"originalLine":101,"originalColumn":35,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":22,"generatedColumn":673,"originalLine":102,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":22,"generatedColumn":687,"originalLine":103,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":22,"generatedColumn":717,"originalLine":104,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":22,"generatedColumn":728,"originalLine":104,"originalColumn":10,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":22,"generatedColumn":741,"originalLine":104,"originalColumn":24,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":22,"generatedColumn":788,"originalLine":105,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":22,"generatedColumn":794,"originalLine":105,"originalColumn":5,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":23,"generatedColumn":4,"originalLine":105,"originalColumn":5,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":23,"generatedColumn":4,"originalLine":105,"originalColumn":30,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":23,"generatedColumn":27,"originalLine":105,"originalColumn":51,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":24,"generatedColumn":4,"originalLine":105,"originalColumn":51,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":24,"generatedColumn":4,"originalLine":105,"originalColumn":56,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":24,"generatedColumn":8,"originalLine":106,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":24,"generatedColumn":18,"originalLine":107,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":24,"generatedColumn":38,"originalLine":108,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":24,"generatedColumn":46,"originalLine":109,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":24,"generatedColumn":52,"originalLine":110,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":24,"generatedColumn":56,"originalLine":111,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":24,"generatedColumn":102,"originalLine":112,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":24,"generatedColumn":143,"originalLine":113,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":24,"generatedColumn":157,"originalLine":114,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":24,"generatedColumn":183,"originalLine":114,"originalColumn":25,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":24,"generatedColumn":196,"originalLine":114,"originalColumn":39,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":24,"generatedColumn":240,"originalLine":114,"originalColumn":81,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":24,"generatedColumn":253,"originalLine":114,"originalColumn":95,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":24,"generatedColumn":270,"originalLine":115,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":24,"generatedColumn":281,"originalLine":115,"originalColumn":10,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":24,"generatedColumn":294,"originalLine":115,"originalColumn":24,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":24,"generatedColumn":311,"originalLine":116,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":24,"generatedColumn":329,"originalLine":117,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":24,"generatedColumn":337,"originalLine":118,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":24,"generatedColumn":343,"originalLine":119,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":24,"generatedColumn":347,"originalLine":120,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":24,"generatedColumn":388,"originalLine":121,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":24,"generatedColumn":429,"originalLine":122,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":24,"generatedColumn":443,"originalLine":123,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":24,"generatedColumn":478,"originalLine":124,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":24,"generatedColumn":517,"originalLine":124,"originalColumn":37,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":24,"generatedColumn":530,"originalLine":124,"originalColumn":51,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":24,"generatedColumn":545,"originalLine":125,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":24,"generatedColumn":553,"originalLine":125,"originalColumn":7,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":24,"generatedColumn":563,"originalLine":126,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":24,"generatedColumn":580,"originalLine":127,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":24,"generatedColumn":600,"originalLine":128,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":24,"generatedColumn":638,"originalLine":129,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":24,"generatedColumn":648,"originalLine":130,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":24,"generatedColumn":666,"originalLine":131,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":24,"generatedColumn":694,"originalLine":132,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":24,"generatedColumn":714,"originalLine":133,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":24,"generatedColumn":714,"originalLine":134,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":24,"generatedColumn":746,"originalLine":134,"originalColumn":33,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":24,"generatedColumn":750,"originalLine":135,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":24,"generatedColumn":774,"originalLine":136,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":24,"generatedColumn":778,"originalLine":137,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":25,"generatedColumn":4,"originalLine":137,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":25,"generatedColumn":4,"originalLine":138,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":26,"generatedColumn":4,"originalLine":138,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":26,"generatedColumn":4,"originalLine":139,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":27,"generatedColumn":4,"originalLine":139,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":27,"generatedColumn":4,"originalLine":140,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":28,"generatedColumn":4,"originalLine":140,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":28,"generatedColumn":4,"originalLine":141,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":29,"generatedColumn":4,"originalLine":141,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":29,"generatedColumn":4,"originalLine":142,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":30,"generatedColumn":4,"originalLine":142,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":30,"generatedColumn":4,"originalLine":143,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":31,"generatedColumn":4,"originalLine":143,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":31,"generatedColumn":4,"originalLine":144,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":32,"generatedColumn":4,"originalLine":144,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":32,"generatedColumn":4,"originalLine":144,"originalColumn":3,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":32,"generatedColumn":8,"originalLine":145,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":32,"generatedColumn":47,"originalLine":145,"originalColumn":37,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":32,"generatedColumn":79,"originalLine":145,"originalColumn":70,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":32,"generatedColumn":89,"originalLine":145,"originalColumn":78,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":32,"generatedColumn":97,"originalLine":145,"originalColumn":87,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":32,"generatedColumn":109,"originalLine":145,"originalColumn":95,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":32,"generatedColumn":117,"originalLine":145,"originalColumn":104,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":32,"generatedColumn":124,"originalLine":146,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":32,"generatedColumn":134,"originalLine":146,"originalColumn":9,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":32,"generatedColumn":144,"originalLine":147,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":32,"generatedColumn":159,"originalLine":148,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":32,"generatedColumn":177,"originalLine":149,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":32,"generatedColumn":235,"originalLine":150,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":32,"generatedColumn":243,"originalLine":151,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":32,"generatedColumn":260,"originalLine":152,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":32,"generatedColumn":286,"originalLine":153,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":32,"generatedColumn":304,"originalLine":154,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":32,"generatedColumn":304,"originalLine":155,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":32,"generatedColumn":334,"originalLine":155,"originalColumn":31,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":32,"generatedColumn":338,"originalLine":156,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":32,"generatedColumn":362,"originalLine":157,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":33,"generatedColumn":4,"originalLine":157,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":33,"generatedColumn":4,"originalLine":157,"originalColumn":8,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":33,"generatedColumn":8,"originalLine":158,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":33,"generatedColumn":33,"originalLine":159,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":33,"generatedColumn":40,"originalLine":160,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":33,"generatedColumn":45,"originalLine":161,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":33,"generatedColumn":49,"originalLine":162,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":33,"generatedColumn":68,"originalLine":163,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":33,"generatedColumn":116,"originalLine":164,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":33,"generatedColumn":157,"originalLine":165,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":33,"generatedColumn":160,"originalLine":165,"originalColumn":2,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":33,"generatedColumn":191,"originalLine":165,"originalColumn":34,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":33,"generatedColumn":195,"originalLine":166,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":33,"generatedColumn":209,"originalLine":167,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":33,"generatedColumn":239,"originalLine":168,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":33,"generatedColumn":250,"originalLine":168,"originalColumn":10,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":33,"generatedColumn":263,"originalLine":168,"originalColumn":24,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":33,"generatedColumn":310,"originalLine":169,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":33,"generatedColumn":317,"originalLine":169,"originalColumn":6,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":34,"generatedColumn":4,"originalLine":169,"originalColumn":6,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":34,"generatedColumn":4,"originalLine":169,"originalColumn":31,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":34,"generatedColumn":27,"originalLine":169,"originalColumn":52,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":35,"generatedColumn":4,"originalLine":169,"originalColumn":52,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":35,"generatedColumn":4,"originalLine":169,"originalColumn":57,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":35,"generatedColumn":10,"originalLine":170,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":35,"generatedColumn":30,"originalLine":171,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":35,"generatedColumn":38,"originalLine":172,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":35,"generatedColumn":44,"originalLine":173,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":35,"generatedColumn":48,"originalLine":174,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":35,"generatedColumn":94,"originalLine":175,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":35,"generatedColumn":135,"originalLine":176,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":35,"generatedColumn":149,"originalLine":177,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":35,"generatedColumn":175,"originalLine":177,"originalColumn":25,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":35,"generatedColumn":188,"originalLine":177,"originalColumn":39,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":35,"generatedColumn":232,"originalLine":177,"originalColumn":81,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":35,"generatedColumn":245,"originalLine":177,"originalColumn":95,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":35,"generatedColumn":261,"originalLine":178,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":35,"generatedColumn":272,"originalLine":178,"originalColumn":10,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":35,"generatedColumn":285,"originalLine":178,"originalColumn":24,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":35,"generatedColumn":303,"originalLine":179,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":35,"generatedColumn":321,"originalLine":180,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":35,"generatedColumn":329,"originalLine":181,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":35,"generatedColumn":335,"originalLine":182,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":35,"generatedColumn":339,"originalLine":183,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":35,"generatedColumn":385,"originalLine":184,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":35,"generatedColumn":426,"originalLine":185,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":35,"generatedColumn":440,"originalLine":186,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":35,"generatedColumn":468,"originalLine":186,"originalColumn":27,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":35,"generatedColumn":481,"originalLine":186,"originalColumn":41,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":35,"generatedColumn":525,"originalLine":186,"originalColumn":83,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":35,"generatedColumn":538,"originalLine":186,"originalColumn":97,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":35,"generatedColumn":554,"originalLine":187,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":35,"generatedColumn":586,"originalLine":188,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":35,"generatedColumn":628,"originalLine":188,"originalColumn":40,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":35,"generatedColumn":641,"originalLine":188,"originalColumn":54,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":35,"generatedColumn":658,"originalLine":189,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":35,"generatedColumn":666,"originalLine":189,"originalColumn":7,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":35,"generatedColumn":676,"originalLine":190,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":35,"generatedColumn":693,"originalLine":191,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":35,"generatedColumn":713,"originalLine":192,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":35,"generatedColumn":747,"originalLine":193,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":35,"generatedColumn":757,"originalLine":194,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":35,"generatedColumn":775,"originalLine":195,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":35,"generatedColumn":802,"originalLine":196,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":35,"generatedColumn":822,"originalLine":197,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":35,"generatedColumn":822,"originalLine":198,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":35,"generatedColumn":854,"originalLine":198,"originalColumn":33,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":35,"generatedColumn":858,"originalLine":199,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":35,"generatedColumn":891,"originalLine":200,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":35,"generatedColumn":910,"originalLine":201,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":35,"generatedColumn":918,"originalLine":202,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":35,"generatedColumn":924,"originalLine":203,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":35,"generatedColumn":928,"originalLine":204,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":35,"generatedColumn":974,"originalLine":205,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":35,"generatedColumn":1015,"originalLine":206,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":35,"generatedColumn":1019,"originalLine":207,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":35,"generatedColumn":1033,"originalLine":208,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":35,"generatedColumn":1061,"originalLine":208,"originalColumn":27,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":35,"generatedColumn":1074,"originalLine":208,"originalColumn":41,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":35,"generatedColumn":1118,"originalLine":208,"originalColumn":83,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":35,"generatedColumn":1131,"originalLine":208,"originalColumn":97,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":35,"generatedColumn":1147,"originalLine":209,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":35,"generatedColumn":1179,"originalLine":210,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":35,"generatedColumn":1216,"originalLine":210,"originalColumn":35,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":35,"generatedColumn":1229,"originalLine":210,"originalColumn":49,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":35,"generatedColumn":1244,"originalLine":211,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":35,"generatedColumn":1256,"originalLine":211,"originalColumn":11,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":35,"generatedColumn":1266,"originalLine":212,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":35,"generatedColumn":1287,"originalLine":213,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":35,"generatedColumn":1309,"originalLine":214,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":35,"generatedColumn":1349,"originalLine":215,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":35,"generatedColumn":1361,"originalLine":216,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":35,"generatedColumn":1381,"originalLine":217,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":35,"generatedColumn":1411,"originalLine":218,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":35,"generatedColumn":1433,"originalLine":219,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":35,"generatedColumn":1433,"originalLine":220,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":35,"generatedColumn":1469,"originalLine":220,"originalColumn":37,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":35,"generatedColumn":1473,"originalLine":221,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":35,"generatedColumn":1495,"originalLine":222,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":36,"generatedColumn":4,"originalLine":222,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":36,"generatedColumn":4,"originalLine":223,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":37,"generatedColumn":4,"originalLine":223,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":37,"generatedColumn":4,"originalLine":224,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":38,"generatedColumn":4,"originalLine":224,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":38,"generatedColumn":4,"originalLine":225,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":39,"generatedColumn":4,"originalLine":225,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":39,"generatedColumn":4,"originalLine":226,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":40,"generatedColumn":4,"originalLine":226,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":40,"generatedColumn":4,"originalLine":227,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":41,"generatedColumn":4,"originalLine":227,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":41,"generatedColumn":4,"originalLine":228,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":42,"generatedColumn":4,"originalLine":228,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":42,"generatedColumn":4,"originalLine":229,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":43,"generatedColumn":4,"originalLine":229,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":43,"generatedColumn":4,"originalLine":229,"originalColumn":3,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":43,"generatedColumn":8,"originalLine":230,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":43,"generatedColumn":45,"originalLine":230,"originalColumn":35,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":43,"generatedColumn":77,"originalLine":230,"originalColumn":68,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":43,"generatedColumn":87,"originalLine":230,"originalColumn":76,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":43,"generatedColumn":95,"originalLine":230,"originalColumn":85,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":43,"generatedColumn":107,"originalLine":230,"originalColumn":93,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":43,"generatedColumn":115,"originalLine":230,"originalColumn":102,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":43,"generatedColumn":122,"originalLine":231,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":43,"generatedColumn":134,"originalLine":231,"originalColumn":11,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":43,"generatedColumn":144,"originalLine":232,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":43,"generatedColumn":159,"originalLine":233,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":43,"generatedColumn":177,"originalLine":234,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":43,"generatedColumn":235,"originalLine":235,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":43,"generatedColumn":243,"originalLine":236,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":43,"generatedColumn":260,"originalLine":237,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":43,"generatedColumn":281,"originalLine":238,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":43,"generatedColumn":307,"originalLine":239,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":43,"generatedColumn":325,"originalLine":240,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":43,"generatedColumn":325,"originalLine":241,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":43,"generatedColumn":355,"originalLine":241,"originalColumn":31,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":43,"generatedColumn":359,"originalLine":242,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":43,"generatedColumn":381,"originalLine":243,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":43,"generatedColumn":389,"originalLine":243,"originalColumn":7,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":44,"generatedColumn":4,"originalLine":243,"originalColumn":7,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":44,"generatedColumn":4,"originalLine":243,"originalColumn":14,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":44,"generatedColumn":8,"originalLine":244,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":44,"generatedColumn":41,"originalLine":245,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":44,"generatedColumn":60,"originalLine":246,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"},{"generatedLine":44,"generatedColumn":68,"originalLine":247,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias \"forms-form\" -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n<# const btRels = entity.props.filter(f=>f.ref).filter(r=>r.verb === 'BelongsTo');#>\n\nimport React, { useContext } from \"react\";\nimport { UIXContext } from '../contexts';\n\n<# block 'init-record' : -#>\n<#@ context 'btRels'#>\n<#if (btRels.length > 0) {#>\n  let redirect = 'edit';\n  if(props.location && props.location.state && props.location.state.pathname){\n    redirect =  props.location.state.pathname;\n  }\n<#}#>\n<# end #>\n\n  const CreateFormToolbar = (props) => {\n    const uix = useContext(UIXContext);\n    return (\n      <uix.Toolbar {...props}>\n        <uix.SaveButton/>\n        <uix.SaveButton\n          label=\"uix.actions.create_and_add\"\n          redirect={false}\n          submitOnEnter={false}\n          variant=\"text\"\n        />\n      </uix.Toolbar>\n    );\n  }\n\nconst EditSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n    return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst EditTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data} />\n  <#})#>\n      <uix.ShowButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowSimple#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TopToolbar>\n  <# entity.actions.forEach(action=>{ #>\n      <uix.#{entity.name}.#{action.fullName} record={data}/>\n  <#})#>\n      <uix.EditButton record={data} basePath={basePath} />\n    </uix.TopToolbar>\n  );\n}\n\nconst ShowTabbed#{entity.name}Actions = ({ basePath, data }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.TopToolbar>\n<# entity.actions.forEach(action=>{ #>\n    <uix.#{entity.name}.#{action.fullName} record={data}/>\n<#})#>\n    <uix.EditButton record={data} basePath={basePath} />\n  </uix.TopToolbar>\n);}\n\nexport const SimpleForm = (props)=>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.SimpleForm {...props}>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n      }, 'display-edit-entity')}\n    </uix.SimpleForm>\n  )\n}\n\nexport const CreateFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.SimpleForm toolbar={<CreateFormToolbar />}\n    <#if(btRels.length> 0){#> redirect={redirect} <#}#>\n    />\n  </uix.Create >\n  );\n};\n\nexport const EditFormSimple = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditSimple#{entity.name}Actions />} >\n    <uix.#{entity.name}.SimpleForm/>\n  </uix.Edit >\n  );\n};\n\nexport const TabbedForm = (props) =>{\n  const uix = useContext(UIXContext);\n  return (\n    <uix.TabbedForm {...props}>\n      <uix.FormTab label=\"resources.#{entity.name}.summary\">\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.summary,\n        },\n        source:'',\n        sectionLabel: false,\n        grid: false,\n\n      }, 'display-edit-entity')}\n      </uix.FormTab>\n\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n      <uix.FormTab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n        #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-edit-entity')}\n      </uix.FormTab>\n<#-})#>\n    </uix.TabbedForm>\n  )\n}\n\n// tabbed forms\nexport const CreateFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n #{content('init-record',btRels)}\n  return (\n  <uix.Create {...props} >\n    <uix.#{entity.name}.TabbedForm toolbar={<CreateFormToolbar />}\n     <#if(btRels.length> 0){#> redirect={redirect} <#}#>/>\n  </uix.Create >\n  );\n};\n\nexport const EditFormTabbed = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Edit title={<uix.#{entity.name}.Title />} {...props} actions={<EditTabbed#{entity.name}Actions />}>\n    <uix.#{entity.name}.TabbedForm />\n  </uix.Edit >\n  );\n};\n\nexport const ShowSimpleView = (props) => {\n  const uix = useContext(UIXContext);\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowSimple#{entity.name}Actions />}>\n      <uix.SimpleShowLayout>\n      <uix.HeaderLabel text=\"resources.#{entity.name}.summary\" />\n      #{partial({\n        entity: {\n          ...entity,\n          props: entity.lists.all,\n        },\n        source:'',\n        sectionLabel: true,\n        grid: false,\n\n      }, 'display-show-entity')}\n      </uix.SimpleShowLayout>\n    </uix.Show>\n  );\n};\n\nexport const ShowTabbedView = (props) => {\n  const uix = useContext(UIXContext);\n\n  return (\n    <uix.Show title={<uix.#{entity.name}.Title />} {...props} actions={<ShowTabbed#{entity.name}Actions />}>\n      <uix.TabbedShowLayout>\n        <uix.Tab label=\"resources.#{entity.name}.summary\">\n          #{partial({\n            entity: {\n            ...entity,\n            props: entity.lists.summary,\n          },\n          source:'',\n          sectionLabel: false,\n          grid: false,\n\n          }, 'display-show-entity')}\n        </uix.Tab>\n<#- entity.props.filter(f=>f.ref)\n  .filter(f => (entity.UI.edit[f.name] || entity.UI.list[f.name] || entity.UI.show[f.name]) && entity.UI.edit[f.name]!== false)\n  .forEach(f => {\n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if ( f.single && !embedded ) {\n      return;\n    }\n#>\n        <uix.Tab label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" path=\"#{f.name}\">\n          #{partial({\n      entity: {\n        ...entity,\n        props: entity.props.filter(fl=>fl.name === f.name)\n      },\n      source: ``,\n      emdedded: true,\n      sectionLabel: false,\n      grid: false,\n\n    }, 'display-show-entity')}\n        </uix.Tab>\n      <#-})#>\n      </uix.TabbedShowLayout>\n    </uix.Show>\n  );\n};\n"}]}}