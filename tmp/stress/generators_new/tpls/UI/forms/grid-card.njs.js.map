{"version":3,"sources":["generators_new/tpls/UI/forms/grid-card.njs.js"],"names":["text","expression","code"],"mappings":"AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAyBA,IACCA,IACzBA,IACAA,6CACAA,8CACAA,4DACAA,4DACAA,0DACAA,+CACAA,IACAA,6CACAA,6CACAA,IACAA,uBACAA,uBACAA,8BACAA,2BACAA,MACAA,IACAA,kCACAA,uCACAA,cACAA,8CACAA,OACAA,IACAA,2DACAA,yCACAA,IACAA,sDACAA,cACAA,qCACAA,4BACAA,yBACAA,6CACAA,oCAAkCC,aAAcD,yCAChDA,2BACAA,qBACAA,UAAQE;AArCT,IAqCSA,AACRA;AAtCD,IAsCCA,AACAA;AAvCD,IAuCCA,AAAeF,IACfA,gDAA8CC,QAASD,eACvDA,2CAAwCC,gCAAiCD,UAAQC,QAASD,SAC1FA,iCAA+BC,QAASD,oCAAiCC,QAASD,SAClFA,yBACAE;AA5CD,IA4CCA,AAAOF,IACPE;AA7CD,IA6CCA,AACAA;AA9CD,IA8CCA,AACAA;AA/CD,IA+CCA,AACAA;AAhDD,IAgDCA,AACAA;AAjDD,IAiDCA,AAAGA;AAjDJ,IAiDIA,AAAsCF,IACzCA,gDAA8CC,QAASD,eACvDA,2CAAwCC,gCAAiCD,UAAQC,QAASD,SAC1FA,kDAA+CC,6CAA8CD,yCAAqCC,gCAAiCD,UAAQC,QAASD,+BAA2BC,QAASD,iBAAaC,6CAA8CD,IAACE;AApDrR,IAoDqRA,AAAsBF,cAAYE;AApDvT,IAoDuTA,AAAKF,KAC3TA,yBAAuBC,cAAeD,mBACtCA,yCACAA,yBACAE;AAxDD,IAwDCA,AAAMF,IACNE;AAzDD,IAyDCA,AAAMF,IACNA,sBACAA,4BACAA,0DACAA,YAAUE;AA7DX,IA6DWA,AAAsCF,IAChDA,qBAAmBC,aAAcD,GAACC,iBAAkBD,oBACpDA,YAAUE;AA/DX,IA+DWA,AAAMF,IAChBE;AAhED,IAgECA,AAA+CF,IAC/CA,+BACAA,2BAAwBC,4CAA6CD,MACrEA,4BAAyBC,4CAA6CD,MACtEA,mCACAA,kBACAA,+BACAA,2BAAwBC,4CAA6CD,MACrEA,4BAAyBC,4CAA6CD,MACtEA,mCACAA,kBACAA,gCACAA,2BAAwBC,4CAA6CD,kBACrEA,4BAAyBC,4CAA6CD,MACtEA,mCACAA,kBACAA,iCACAA,2BAAwBC,4CAA6CD,kBACrEA,4BAAyBC,4CAA6CD,MACtEA,mCACAA,kBACAE;AArFD,IAqFCA,AAAKF,IACLA,4BACAA,mBACAA,YACAA,aACAA,4CACAA,UACAA,YACAA,MACAA,KACAA,IACAA,6BACAA,eACAA,cACAA,MACAA,IACAA;AArfile":"generators_new/tpls/UI/forms/grid-card.njs.js","sourceRoot":"/Users/vedmalex/work/fte2/demo","sourcesContent":["<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"],"template":{"version":"1.0.0","segments":[{"generatedLine":1,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":2,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":3,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":4,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":5,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":6,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":7,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":8,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":9,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":10,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":11,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":12,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":13,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":14,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":15,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":16,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":17,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":18,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":19,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":20,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":21,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":22,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":23,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":24,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":25,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":26,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":27,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":28,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":29,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":30,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":31,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":32,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":33,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":34,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":35,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":36,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":37,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":38,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":39,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":40,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":41,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":42,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":43,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":44,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":45,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":46,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":47,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":48,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":49,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":50,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":51,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":52,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":53,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":54,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":55,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":56,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":57,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":58,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":59,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":60,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":61,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":62,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":63,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":64,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":65,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":66,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":67,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":68,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":69,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":70,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":71,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":72,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":73,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":74,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":75,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":76,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":77,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":78,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":79,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":80,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":81,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":82,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":83,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":84,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":85,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":86,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":87,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":88,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":89,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":90,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":91,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":92,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":93,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":94,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":95,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":96,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":97,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":98,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":99,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":100,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":101,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":102,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":103,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":104,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":105,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":106,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":107,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":108,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":109,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":110,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":111,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":112,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":113,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":114,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":115,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":116,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":117,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":118,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":119,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":120,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":121,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":122,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":123,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":124,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":125,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":126,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":127,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":128,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":129,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":130,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":131,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":132,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":133,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":134,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":135,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":136,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":137,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":138,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":139,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":140,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/grid-card.njs.js"},{"generatedLine":12,"generatedColumn":4,"originalLine":1,"originalColumn":25,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":12,"generatedColumn":8,"originalLine":2,"originalColumn":26,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":12,"generatedColumn":12,"originalLine":3,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":12,"generatedColumn":16,"originalLine":4,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":12,"generatedColumn":61,"originalLine":5,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":12,"generatedColumn":107,"originalLine":6,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":12,"generatedColumn":167,"originalLine":7,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":12,"generatedColumn":227,"originalLine":8,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":12,"generatedColumn":285,"originalLine":9,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":12,"generatedColumn":332,"originalLine":10,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":12,"generatedColumn":336,"originalLine":11,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":12,"generatedColumn":381,"originalLine":12,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":12,"generatedColumn":426,"originalLine":13,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":12,"generatedColumn":430,"originalLine":14,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":12,"generatedColumn":453,"originalLine":15,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":12,"generatedColumn":476,"originalLine":16,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":12,"generatedColumn":506,"originalLine":17,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":12,"generatedColumn":533,"originalLine":18,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":12,"generatedColumn":539,"originalLine":19,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":12,"generatedColumn":543,"originalLine":20,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":12,"generatedColumn":577,"originalLine":21,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":12,"generatedColumn":616,"originalLine":22,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":12,"generatedColumn":630,"originalLine":23,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":12,"generatedColumn":676,"originalLine":24,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":12,"generatedColumn":683,"originalLine":25,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":12,"generatedColumn":687,"originalLine":26,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":12,"generatedColumn":746,"originalLine":27,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":12,"generatedColumn":787,"originalLine":28,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":12,"generatedColumn":791,"originalLine":29,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":12,"generatedColumn":845,"originalLine":30,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":12,"generatedColumn":859,"originalLine":31,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":12,"generatedColumn":896,"originalLine":32,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":12,"generatedColumn":924,"originalLine":33,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":12,"generatedColumn":949,"originalLine":34,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":12,"generatedColumn":994,"originalLine":35,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":12,"generatedColumn":1030,"originalLine":35,"originalColumn":35,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":12,"generatedColumn":1043,"originalLine":35,"originalColumn":49,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":12,"generatedColumn":1084,"originalLine":36,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":12,"generatedColumn":1111,"originalLine":37,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":12,"generatedColumn":1132,"originalLine":38,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":12,"generatedColumn":1142,"originalLine":38,"originalColumn":9,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":13,"generatedColumn":4,"originalLine":38,"originalColumn":9,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":13,"generatedColumn":4,"originalLine":39,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":14,"generatedColumn":4,"originalLine":39,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":14,"generatedColumn":4,"originalLine":40,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":15,"generatedColumn":4,"originalLine":40,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":15,"generatedColumn":4,"originalLine":40,"originalColumn":16,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":15,"generatedColumn":8,"originalLine":41,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":15,"generatedColumn":56,"originalLine":41,"originalColumn":47,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":15,"generatedColumn":64,"originalLine":41,"originalColumn":56,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":15,"generatedColumn":79,"originalLine":42,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":15,"generatedColumn":122,"originalLine":42,"originalColumn":41,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":15,"generatedColumn":154,"originalLine":42,"originalColumn":74,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":15,"generatedColumn":164,"originalLine":42,"originalColumn":82,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":15,"generatedColumn":172,"originalLine":42,"originalColumn":91,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":15,"generatedColumn":181,"originalLine":43,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":15,"generatedColumn":214,"originalLine":43,"originalColumn":32,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":15,"generatedColumn":222,"originalLine":43,"originalColumn":41,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":15,"generatedColumn":258,"originalLine":43,"originalColumn":74,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":15,"generatedColumn":266,"originalLine":43,"originalColumn":83,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":15,"generatedColumn":275,"originalLine":44,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":15,"generatedColumn":300,"originalLine":45,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":16,"generatedColumn":4,"originalLine":45,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":16,"generatedColumn":4,"originalLine":45,"originalColumn":8,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":16,"generatedColumn":8,"originalLine":46,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":17,"generatedColumn":4,"originalLine":46,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":17,"generatedColumn":4,"originalLine":47,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":18,"generatedColumn":4,"originalLine":47,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":18,"generatedColumn":4,"originalLine":48,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":19,"generatedColumn":4,"originalLine":48,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":19,"generatedColumn":4,"originalLine":49,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":20,"generatedColumn":4,"originalLine":49,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":20,"generatedColumn":4,"originalLine":50,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":21,"generatedColumn":4,"originalLine":50,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":21,"generatedColumn":4,"originalLine":50,"originalColumn":4,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":22,"generatedColumn":4,"originalLine":50,"originalColumn":4,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":22,"generatedColumn":4,"originalLine":50,"originalColumn":42,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":22,"generatedColumn":8,"originalLine":51,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":22,"generatedColumn":56,"originalLine":51,"originalColumn":47,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":22,"generatedColumn":64,"originalLine":51,"originalColumn":56,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":22,"generatedColumn":79,"originalLine":52,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":22,"generatedColumn":122,"originalLine":52,"originalColumn":41,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":22,"generatedColumn":154,"originalLine":52,"originalColumn":74,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":22,"generatedColumn":164,"originalLine":52,"originalColumn":82,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":22,"generatedColumn":172,"originalLine":52,"originalColumn":91,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":22,"generatedColumn":181,"originalLine":53,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":22,"generatedColumn":231,"originalLine":53,"originalColumn":48,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":22,"generatedColumn":276,"originalLine":53,"originalColumn":94,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":22,"generatedColumn":317,"originalLine":53,"originalColumn":131,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":22,"generatedColumn":349,"originalLine":53,"originalColumn":164,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":22,"generatedColumn":359,"originalLine":53,"originalColumn":172,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":22,"generatedColumn":367,"originalLine":53,"originalColumn":181,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":22,"generatedColumn":398,"originalLine":53,"originalColumn":208,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":22,"generatedColumn":406,"originalLine":53,"originalColumn":217,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":22,"generatedColumn":423,"originalLine":53,"originalColumn":230,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":22,"generatedColumn":468,"originalLine":53,"originalColumn":276,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":22,"generatedColumn":472,"originalLine":53,"originalColumn":277,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":23,"generatedColumn":4,"originalLine":53,"originalColumn":277,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":23,"generatedColumn":4,"originalLine":53,"originalColumn":299,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":23,"generatedColumn":18,"originalLine":53,"originalColumn":311,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":24,"generatedColumn":4,"originalLine":53,"originalColumn":311,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":24,"generatedColumn":4,"originalLine":53,"originalColumn":316,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":24,"generatedColumn":9,"originalLine":54,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":24,"generatedColumn":34,"originalLine":54,"originalColumn":24,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":24,"generatedColumn":48,"originalLine":54,"originalColumn":39,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":24,"generatedColumn":67,"originalLine":55,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":24,"generatedColumn":108,"originalLine":56,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":24,"generatedColumn":133,"originalLine":57,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":25,"generatedColumn":4,"originalLine":57,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":25,"generatedColumn":4,"originalLine":57,"originalColumn":7,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":25,"generatedColumn":8,"originalLine":58,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":26,"generatedColumn":4,"originalLine":58,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":26,"generatedColumn":4,"originalLine":58,"originalColumn":7,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":26,"generatedColumn":8,"originalLine":59,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":26,"generatedColumn":30,"originalLine":60,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":26,"generatedColumn":58,"originalLine":61,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":26,"generatedColumn":116,"originalLine":62,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":26,"generatedColumn":128,"originalLine":62,"originalColumn":11,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":27,"generatedColumn":4,"originalLine":62,"originalColumn":11,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":27,"generatedColumn":4,"originalLine":62,"originalColumn":49,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":27,"generatedColumn":8,"originalLine":63,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":27,"generatedColumn":29,"originalLine":63,"originalColumn":20,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":27,"generatedColumn":42,"originalLine":63,"originalColumn":34,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":27,"generatedColumn":45,"originalLine":63,"originalColumn":35,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":27,"generatedColumn":62,"originalLine":63,"originalColumn":53,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":27,"generatedColumn":82,"originalLine":64,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":27,"generatedColumn":94,"originalLine":64,"originalColumn":11,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":28,"generatedColumn":4,"originalLine":64,"originalColumn":11,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":28,"generatedColumn":4,"originalLine":64,"originalColumn":17,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":28,"generatedColumn":8,"originalLine":65,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":29,"generatedColumn":4,"originalLine":65,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":29,"generatedColumn":4,"originalLine":65,"originalColumn":48,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":29,"generatedColumn":8,"originalLine":66,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":29,"generatedColumn":39,"originalLine":67,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":29,"generatedColumn":66,"originalLine":67,"originalColumn":25,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":29,"generatedColumn":110,"originalLine":67,"originalColumn":70,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":29,"generatedColumn":116,"originalLine":68,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":29,"generatedColumn":144,"originalLine":68,"originalColumn":26,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":29,"generatedColumn":188,"originalLine":68,"originalColumn":71,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":29,"generatedColumn":194,"originalLine":69,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":29,"generatedColumn":229,"originalLine":70,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":29,"generatedColumn":247,"originalLine":71,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":29,"generatedColumn":278,"originalLine":72,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":29,"generatedColumn":305,"originalLine":72,"originalColumn":25,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":29,"generatedColumn":349,"originalLine":72,"originalColumn":70,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":29,"generatedColumn":355,"originalLine":73,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":29,"generatedColumn":383,"originalLine":73,"originalColumn":26,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":29,"generatedColumn":427,"originalLine":73,"originalColumn":71,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":29,"generatedColumn":433,"originalLine":74,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":29,"generatedColumn":468,"originalLine":75,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":29,"generatedColumn":486,"originalLine":76,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":29,"generatedColumn":518,"originalLine":77,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":29,"generatedColumn":545,"originalLine":77,"originalColumn":25,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":29,"generatedColumn":589,"originalLine":77,"originalColumn":70,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":29,"generatedColumn":607,"originalLine":78,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":29,"generatedColumn":635,"originalLine":78,"originalColumn":26,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":29,"generatedColumn":679,"originalLine":78,"originalColumn":71,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":29,"generatedColumn":685,"originalLine":79,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":29,"generatedColumn":720,"originalLine":80,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":29,"generatedColumn":738,"originalLine":81,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":29,"generatedColumn":771,"originalLine":82,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":29,"generatedColumn":798,"originalLine":82,"originalColumn":25,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":29,"generatedColumn":842,"originalLine":82,"originalColumn":70,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":29,"generatedColumn":860,"originalLine":83,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":29,"generatedColumn":888,"originalLine":83,"originalColumn":26,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":29,"generatedColumn":932,"originalLine":83,"originalColumn":71,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":29,"generatedColumn":938,"originalLine":84,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":29,"generatedColumn":973,"originalLine":85,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":29,"generatedColumn":991,"originalLine":86,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":30,"generatedColumn":4,"originalLine":86,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":30,"generatedColumn":4,"originalLine":86,"originalColumn":6,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":30,"generatedColumn":8,"originalLine":87,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":30,"generatedColumn":36,"originalLine":88,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":30,"generatedColumn":55,"originalLine":89,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":30,"generatedColumn":67,"originalLine":90,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":30,"generatedColumn":80,"originalLine":91,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":30,"generatedColumn":124,"originalLine":92,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":30,"generatedColumn":134,"originalLine":93,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":30,"generatedColumn":146,"originalLine":94,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":30,"generatedColumn":152,"originalLine":95,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":30,"generatedColumn":157,"originalLine":96,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":30,"generatedColumn":161,"originalLine":97,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":30,"generatedColumn":190,"originalLine":98,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":30,"generatedColumn":205,"originalLine":99,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":30,"generatedColumn":219,"originalLine":100,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":30,"generatedColumn":225,"originalLine":101,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"},{"generatedLine":30,"generatedColumn":229,"originalLine":102,"originalColumn":1,"source":"generators_new/tpls/UI/forms/grid-card.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'grid-card' -#>\n\nimport React, { useContext } from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { useTranslate } from 'react-admin';\n\nimport { UIXContext } from '../contexts';\nimport { prepareExcludeList } from '../';\n\nconst cardStyle = {\n  margin: '0.5rem',\n  display: 'inline-block',\n  verticalAlign: 'top',\n};\n\nconst Label = ({ label }) => {\n  const translate = useTranslate();\n  return (\n  <label>{translate(label)}:&nbsp;</label>\n);}\n\nconst CardView = ({ ids, data, basePath, fields }) => {\n  const uix = useContext(UIXContext);\n\n  const excludedField = prepareExcludeList(fields)\n  return (\n  <div style={{ margin: '1em' }}>\n    { ids.length > 0 ? (\n      ids.map(id => (\n        <Card key={id} style={cardStyle}>\n          <CardHeader title={<uix.#{entity.name}.SelectTitle record={data[id]} />} />\n          <CardContent>\n            <div>\n        <#- entity.props.filter(f=> !f.ref && f.name!== \"id\")\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.primitive.#{f.type}.Field record={data[id]} source=\"#{f.name}\" />\n              </div>}\n<#})-#>\n<#\nentity.props.filter(f=>f.ref)\n.filter(f=>entity.UI.list[f.name])\n.forEach(f=>{\n-#><#-if(f.single && !f.ref.embedded){-#>\n              {!excludedField.hasOwnProperty('#{f.name}') && <div>\n                <Label label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" />\n                <uix.ReferenceField basePath=\"/#{entity.model.entityPathMapper[f.ref.entity]}\" record={data[id]} label=\"resources.#{f.inheritedFrom || entity.name}.fields.#{f.name}\" sortable={false} source=\"#{f.name}\" reference=\"#{entity.model.entityPathMapper[f.ref.entity]}\"<# if (!f.required){#> allowEmpty <#}#>>\n                  <uix.#{f.ref.entity}.SelectTitle />\n                </uix.ReferenceField>\n              </div>}\n<#}-#>\n<#})#>\n            </div>\n          </CardContent>\n          <CardActions style={{ textAlign: 'right' }}>\n          <# entity.actions.forEach(action=>{ #>\n              <uix.#{entity.name}.#{action.fullName} record={data}/>\n          <#})#>\n<# if(!(entity.embedded || entity.abstract)){#>\n            <uix.EditButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.ShowButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"\n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.CloneButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n            <uix.DeleteButton\n              resource=\"#{entity.model.entityPathMapper[entity.name]}\"            \n              basePath=\"/#{entity.model.entityPathMapper[entity.name]}\"\n              record={data[id]}\n            />\n<#}#>\n          </CardActions>\n        </Card>\n      ))\n    ) : (\n      <div style={{ height: '10vh' }} />\n    )}\n  </div>\n);\n}\n\nCardView.defaultProps = {\n  data: {},\n  ids: [],\n};\n\nexport default CardView;"}]}}