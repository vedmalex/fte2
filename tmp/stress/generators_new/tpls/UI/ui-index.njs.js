module.exports = {
    chunks: "$$$main$$$",
    alias: [
        "ui-index"
    ],
    script: function(pack, _content, partial, slot, options) {
        function content(blockName, ctx) {
            if (ctx === undefined || ctx === null) ctx = pack;
            return _content(blockName, ctx, content, partial, slot);
        }
        var out = [];
        const _partial = partial;
        partial = function(obj, template) {
            const result = _partial(obj, template);
            if (Array.isArray(result)) {
                result.forEach((r)=>{
                    chunkEnsure(r.name, r.content);
                });
                return '';
            } else {
                return result;
            }
        };
        const main = '$$$main$$$';
        var current = main;
        let outStack = [
            current
        ];
        let result;
        function chunkEnsure(name, content) {
            if (!result) {
                result = {};
            }
            if (!result.hasOwnProperty(name)) {
                result[name] = content ? content : [];
            }
        }
        function chunkStart(name) {
            chunkEnsure(name);
            chunkEnd();
            current = name;
            out = [];
        }
        function chunkEnd() {
            result[current].push(...out);
            out = [];
            current = outStack.pop() || main;
        }
        chunkStart(main);
        out.push("\n");
        out.push("\n");
        out.push("\n");
        out.push("\n");
        chunkStart(`./resources.js`);
        out.push("\n");
        out.push("const embedded = {\n");
        for (let entity of pack.entities.filter((e)=>e.embedded)){
            out.push("\n");
            out.push("  " + (entity.name) + ": {\n");
            out.push("    uploadFields:[\n");
            out.push("      ");
            entity.uploadFields.forEach((f)=>{
                out.push("\n");
                out.push("      \"" + (f) + "\",\n");
                out.push("      ");
            });
            out.push("\n");
            out.push("    ]\n");
            out.push("  },\n");
        }
        out.push("\n");
        out.push("}\n");
        out.push("\n");
        out.push("export default [\n");
        for (let entity of pack.entities.filter((e)=>!e.embedded)){
            out.push("\n");
            out.push("  {\n");
            out.push("    name: \"" + (entity.name) + "\",\n");
            out.push("    resource: \"" + (entity.resourceName) + "\",\n");
            out.push("    path: \"" + (entity.collectionName) + "\",\n");
            out.push("    ");
            if (entity.filter) {
                out.push("\n");
                out.push("    filter: " + (entity.filter) + ",\n");
                out.push("    ");
            }
            out.push("\n");
            out.push("    isPublic: true,\n");
            out.push("    saveFilter: {\n");
            out.push("    ");
            entity.props.filter((p)=>(entity.embedded && p.name != 'id') || !entity.embedded).filter((p)=>!(p.ref && !p.single && !p.embedded) && !p.calculated).forEach((prop)=>{
                const { ref, single, stored, embedded, verb } = prop;
                const isSingle = !ref || single;
                out.push("\n");
                out.push("    '" + (prop.name) + "':'" + (prop.field) + "',\n");
                out.push("    ");
            });
            out.push("\n");
            out.push("    },\n");
            out.push("    readFilter: {\n");
            out.push("    ");
            entity.props.filter((p)=>(entity.embedded && p.name != 'id') || !entity.embedded).filter((p)=>!(p.ref && !p.single && !p.embedded) && !p.calculated).forEach((prop)=>{
                const { ref, single, stored, embedded, verb } = prop;
                const isSingle = !ref || single;
                out.push("\n");
                out.push("    '" + (prop.field) + "':'" + (prop.name) + "',\n");
                out.push("    ");
            });
            out.push("\n");
            out.push("    },\n");
            out.push("    uploadFields:[\n");
            out.push("      ");
            entity.uploadFields.forEach((f)=>{
                out.push("\n");
                out.push("      \"" + (f) + "\",\n");
                out.push("      ");
            });
            out.push("\n");
            out.push("      ");
            entity.maps.forEach((f)=>{
                out.push("\n");
                out.push("        ...embedded." + (f.type) + ".uploadFields.map(f=>`" + (f.name) + ".${f}`),\n");
                out.push("      ");
            });
            out.push("\n");
            out.push("      ");
            entity.collections.forEach((f)=>{
                out.push("\n");
                out.push("        ...embedded." + (f.type) + ".uploadFields.map(f=>`" + (f.name) + ".${f}`),\n");
                out.push("      ");
            });
            out.push("\n");
            out.push("    ],\n");
            out.push("    collections:[\n");
            out.push("      ");
            entity.collections.forEach((f)=>{
                out.push("\n");
                out.push("      {\n");
                out.push("        field:\"" + (f.name) + "\",\n");
                out.push("        path:\"" + (f.storage) + "\",\n");
                out.push("        type:\"" + (f.type) + "\",\n");
                out.push("        isPublic: true,\n");
                out.push("        ...embedded." + (f.type) + ",\n");
                out.push("      },\n");
                out.push("      ");
            });
            out.push("\n");
            out.push("    ],\n");
            out.push("    maps:[\n");
            out.push("      ");
            entity.maps.forEach((f)=>{
                out.push("\n");
                out.push("      {\n");
                out.push("        field:\"" + (f.name) + "\",\n");
                out.push("        path:\"" + (f.storage) + "\",\n");
                out.push("        type:\"" + (f.type) + "\",\n");
                out.push("        ...embedded." + (f.type) + ",\n");
                out.push("      },\n");
                out.push("      ");
            });
            out.push("\n");
            out.push("    ]\n");
            out.push("  },\n");
        }
        out.push("\n");
        out.push("]\n");
        out.push("\n");
        chunkStart(`./index.js`);
        out.push("\n");
        out.push("import {Fragment} from 'react';\n");
        for (let entity of pack.entities.filter((e)=>!e.embedded)){
            out.push("\n");
            out.push("import " + (entity.name) + "UIX from './" + (entity.name) + "';\n");
        }
        out.push("\n");
        for (let en_ of pack.enums){
            out.push("\n");
            out.push("import " + (en_.name) + " from './" + (en_.name) + "';\n");
        }
        out.push("\n");
        out.push("import React from 'react';\n");
        out.push("import Admin from './admin';\n");
        out.push("import Typography from '@material-ui/core/Typography';\n");
        out.push("import InputWithPreview from './InputWithPreview';\n");
        out.push("import QuickCreateButton from './quickCreate';\n");
        out.push("// import TimeInput from '../../modules/TimeInput';\n");
        out.push("// import TimeField from '../../modules/TimeField';\n");
        out.push("// import FixedTimeInput from '../../modules/FixedTimeInput';\n");
        out.push("// import FixedTimeField from '../../modules/FixedTimeField';\n");
        out.push("\n");
        out.push("import {\n");
        out.push("  //primitives\n");
        out.push("  //input\n");
        out.push("  DateInput,\n");
        out.push("  DateTimeInput,\n");
        out.push("  TextInput,\n");
        out.push("  BooleanInput,\n");
        out.push("  ImageInput,\n");
        out.push("  FileInput,\n");
        out.push("  NumberInput,\n");
        out.push("  PasswordInput,\n");
        out.push("  //field\n");
        out.push("  TextField,\n");
        out.push("  DateField,\n");
        out.push("  BooleanField,\n");
        out.push("  NullableBooleanInput,\n");
        out.push("  ImageField,\n");
        out.push("  FileField,\n");
        out.push("  NumberField,\n");
        out.push("  RichTextField,\n");
        out.push("  UrlField,\n");
        out.push("  ChipField,\n");
        out.push("  EmailField,\n");
        out.push("  //complex\n");
        out.push("  //input\n");
        out.push("  // array\n");
        out.push("  ArrayInput,\n");
        out.push("  SimpleFormIterator,\n");
        out.push("  FormDataConsumer,\n");
        out.push("  // select from list\n");
        out.push("  AutocompleteInput,\n");
        out.push("  AutocompleteArrayInput,\n");
        out.push("  CheckboxGroupInput,\n");
        out.push("  RadioButtonGroupInput,\n");
        out.push("  //\n");
        out.push("  //reference\n");
        out.push("  ReferenceArrayInput,\n");
        out.push("  SelectArrayInput,\n");
        out.push("  ReferenceInput,\n");
        out.push("  SelectInput,\n");
        out.push("  //field\n");
        out.push("  ArrayField,\n");
        out.push("  ReferenceManyField,\n");
        out.push("  FunctionField,\n");
        out.push("  SelectField,\n");
        out.push("  ReferenceField,\n");
        out.push("  ReferenceArrayField,\n");
        out.push("  SimpleList,\n");
        out.push("  // ref items\n");
        out.push("  SingleFieldList,\n");
        out.push("  Datagrid,\n");
        out.push("  //layout single item\n");
        out.push("  Show,\n");
        out.push("  SimpleShowLayout,\n");
        out.push("  TabbedShowLayout,\n");
        out.push("  Tab,\n");
        out.push("  Create,\n");
        out.push("  Edit,\n");
        out.push("  SimpleForm,\n");
        out.push("  TabbedForm,\n");
        out.push("  FormTab,\n");
        out.push("  // layout list items\n");
        out.push("  List,\n");
        out.push("  // universal\n");
        out.push("  //layput controls\n");
        out.push("  Toolbar,\n");
        out.push("  Filter,\n");
        out.push("  Pagination,\n");
        out.push("  TopToolbar,\n");
        out.push("  // buttons\n");
        out.push("  Button,\n");
        out.push("  ShowButton,\n");
        out.push("  EditButton,\n");
        out.push("  DeleteButton,\n");
        out.push("  CloneButton,\n");
        out.push("  BulkDeleteButton,\n");
        out.push("  SaveButton,\n");
        out.push("  // functions\n");
        out.push("  required,\n");
        out.push("  //\n");
        out.push("  useTranslate,\n");
        out.push("} from 'react-admin';\n");
        out.push("import RichTextInputBase from 'ra-input-rich-text';\n");
        out.push("\n");
        out.push("const HeaderLabel = ({text, ...props })=> {\n");
        out.push("  const translate = useTranslate();\n");
        out.push("  return (<Typography variant=\"h6\" gutterBottom {...props}>{translate(text)}</Typography>);\n");
        out.push("}\n");
        out.push("\n");
        out.push("const DisabledInput = (props) => (<TextInput disabled {...props}/>);\n");
        out.push("const LongTextInput = (props) => (<TextInput multiline {...props}/>);\n");
        out.push("const FileInputField = props => (\n");
        out.push("  <FileInput {...props}>\n");
        out.push("    <FileField source=\"src\" title=\"name\" />\n");
        out.push("  </FileInput>\n");
        out.push(");\n");
        out.push("\n");
        out.push("const ImageInputField = props => (\n");
        out.push("  <ImageInput {...props}>\n");
        out.push("    <ImageField source=\"src\" title=\"title\" />\n");
        out.push("  </ImageInput>\n");
        out.push(");\n");
        out.push("const PasswordField = (props) => (<TextField  {...props} inputProps={{ autocomplete: 'new-password' }}/>);\n");
        out.push("const Readonly = field => ({ Input: DisabledInput, Field: field });\n");
        out.push("\n");
        out.push("const ReadonlyReachTextInput = ({ label, ...props }) => {\n");
        out.push("  const translate = useTranslate();\n");
        out.push("  if (label) {\n");
        out.push("    label = translate(label);\n");
        out.push("  }\n");
        out.push("  return <RichTextInputBase label={label} {...props} disabled />;\n");
        out.push("};\n");
        out.push("\n");
        out.push("const RichTextInput = ({ label, ...props }) => {\n");
        out.push("  const translate = useTranslate();\n");
        out.push("  if (label) {\n");
        out.push("    label = translate(label);\n");
        out.push("  }\n");
        out.push("  return <RichTextInputBase label={label} {...props} />;\n");
        out.push("};\n");
        out.push("\n");
        out.push("const primitive = {\n");
        out.push("  Text: { Input: TextInput, Field: TextField },\n");
        out.push("  LongText: { Input: LongTextInput, Field: TextField },\n");
        out.push("  Number: { Input: NumberInput, Field: NumberField },\n");
        out.push("  Date: { Input: DateInput, Field: DateField },\n");
        out.push("  DateTime: { Input: DateTimeInput, Field: DateField },\n");
        out.push("  // Time: { Input: TimeInput, Field: TimeField },\n");
        out.push("  // FixedTime: { Input: FixedTimeInput, Field: FixedTimeField },\n");
        out.push("  Boolean: { Input: BooleanInput, Field: BooleanField },\n");
        out.push("  ID: { Input: DisabledInput, Field: TextField },\n");
        out.push("  URLFile: { Input: TextInput, Field: FileField },\n");
        out.push("  URLImage: { Input: TextInput, Field: ImageField },\n");
        out.push("  File: { Input: FileInputField, Field: FileField },\n");
        out.push("  Image: { Input: ImageInputField, Field: ImageField },\n");
        out.push("  RichText: { Input: RichTextInput, Field: RichTextField },\n");
        out.push("  ReadonlyRichText: { Input: ReadonlyReachTextInput, Field: RichTextField },\n");
        out.push("  URL: { Input: TextInput, Field: UrlField },\n");
        out.push("  Password: { Input: PasswordInput, Field: TextField },\n");
        out.push("  Email: { Input: TextInput, Field: EmailField },\n");
        out.push("  NullableBoolean: { Input: NullableBooleanInput, Field: BooleanField },\n");
        out.push("};\n");
        out.push("\n");
        out.push("const readonly = Object.keys(primitive).reduce((result, cur) => {\n");
        out.push("  if(!/Readonly/i.test(cur) && !primitive[`Readonly${cur}`]){\n");
        out.push("    result[`Readonly${cur}`] = Readonly(primitive[cur]);\n");
        out.push("  }\n");
        out.push("  return result;\n");
        out.push("}, {});\n");
        out.push("\n");
        out.push("export const components = {\n");
        out.push("  HeaderLabel,\n");
        out.push("  InputWithPreview,\n");
        out.push("  QuickCreateButton,\n");
        out.push("  primitive: {\n");
        out.push("  ...primitive,\n");
        out.push("  ...readonly,\n");
        for (let en_ of pack.enums){
            out.push("\n");
            out.push("    " + (en_.name) + ",\n");
        }
        out.push("\n");
        out.push("  },\n");
        out.push("  //primitives\n");
        out.push("  //input\n");
        out.push("  DateInput,\n");
        out.push("  // TimeInput,\n");
        out.push("  // FixedTimeInput,\n");
        out.push("  TextInput,\n");
        out.push("  BooleanInput,\n");
        out.push("  DisabledInput,\n");
        out.push("  ImageInput,\n");
        out.push("  FileInput,\n");
        out.push("  LongTextInput,\n");
        out.push("  NumberInput,\n");
        out.push("  RichTextInput,\n");
        out.push("  //field\n");
        out.push("  TextField,\n");
        out.push("  // TimeField,\n");
        out.push("  // FixedTimeField,\n");
        out.push("  DateField,\n");
        out.push("  BooleanField,\n");
        out.push("  NullableBooleanInput,\n");
        out.push("  ImageField,\n");
        out.push("  FileField,\n");
        out.push("  NumberField,\n");
        out.push("  RichTextField,\n");
        out.push("  UrlField,\n");
        out.push("  ChipField,\n");
        out.push("  EmailField,\n");
        out.push("  //complex\n");
        out.push("  //input\n");
        out.push("  // array\n");
        out.push("  ArrayInput,\n");
        out.push("  SimpleFormIterator,\n");
        out.push("  FormDataConsumer,\n");
        out.push("  // select from list\n");
        out.push("  AutocompleteInput,\n");
        out.push("  AutocompleteArrayInput,\n");
        out.push("  CheckboxGroupInput,\n");
        out.push("  RadioButtonGroupInput,\n");
        out.push("  //\n");
        out.push("  //reference\n");
        out.push("  ReferenceArrayInput,\n");
        out.push("  SelectArrayInput,\n");
        out.push("  ReferenceInput,\n");
        out.push("  SelectInput,\n");
        out.push("  //field\n");
        out.push("  ArrayField,\n");
        out.push("  ReferenceManyField,\n");
        out.push("  FunctionField,\n");
        out.push("  SelectField,\n");
        out.push("  ReferenceField,\n");
        out.push("  ReferenceArrayField,\n");
        out.push("  SimpleList,\n");
        out.push("  // ref items\n");
        out.push("  SingleFieldList,\n");
        out.push("  Datagrid,\n");
        out.push("  //layout single item\n");
        out.push("  Show,\n");
        out.push("  SimpleShowLayout,\n");
        out.push("  TabbedShowLayout,\n");
        out.push("  Tab,\n");
        out.push("  Create,\n");
        out.push("  Edit,\n");
        out.push("  SimpleForm,\n");
        out.push("  TabbedForm,\n");
        out.push("  FormTab,\n");
        out.push("  // layout list items\n");
        out.push("  List,\n");
        out.push("  // universal\n");
        out.push("  //layput controls\n");
        out.push("  Toolbar,\n");
        out.push("  Filter,\n");
        out.push("  Pagination,\n");
        out.push("  TopToolbar,\n");
        out.push("  // buttons\n");
        out.push("  Button,\n");
        out.push("  ShowButton,\n");
        out.push("  EditButton,\n");
        out.push("  DeleteButton,\n");
        out.push("  CloneButton,\n");
        out.push("  BulkDeleteButton,\n");
        out.push("  SaveButton,\n");
        out.push("  //tree\n");
        out.push("  // Tree,\n");
        out.push("  // NodeView,\n");
        out.push("  // NodeActions,\n");
        out.push("  // functions\n");
        out.push("  required,\n");
        out.push("};\n");
        out.push("\n");
        out.push("export { Admin };\n");
        out.push("\n");
        out.push("export const uix = {\n");
        out.push("  Fragment,\n");
        out.push("  ...components,\n");
        for (let entity of pack.entities.filter((e)=>!e.embedded)){
            out.push("\n");
            out.push("  \"" + (entity.name) + "\": " + (entity.name) + "UIX,\n");
        }
        out.push("\n");
        out.push("};\n");
        out.push("\n");
        out.push("export const prepareExcludeList = (name, excludeList) => {\n");
        out.push("  let result;\n");
        out.push("  if (Array.isArray(name)) {\n");
        out.push("    result = name.map(prepareExcludeList).reduce(\n");
        out.push("      (res, curr) => ({\n");
        out.push("        ...res,\n");
        out.push("        ...curr,\n");
        out.push("      }),\n");
        out.push("      {},\n");
        out.push("    );\n");
        out.push("  } else if (typeof name === 'string' && name.startsWith('!')) {\n");
        out.push("    result = { [name.slice(1)]: true };\n");
        out.push("  } else {\n");
        out.push("    result = {};\n");
        out.push("  }\n");
        out.push("  if(excludeList){\n");
        out.push("    result = {\n");
        out.push("      ...excludeList,\n");
        out.push("      ...result,\n");
        out.push("    }\n");
        out.push("  }\n");
        out.push("  return result;\n");
        out.push("};\n");
        out.push("\n");
        chunkStart(`./i18n/index.js`);
        out.push("\n");
        out.push("import {merge} from 'lodash';\n");
        out.push("\n");
        for (let entity of pack.entities){
            out.push("\n");
            out.push("import " + (entity.name) + "Translate from './" + (entity.name) + "';\n");
        }
        out.push("\n");
        out.push("\n");
        for (let en_ of pack.enums){
            out.push("\n");
            out.push("import { translation as " + (en_.name) + " } from '../" + (en_.name) + "';\n");
        }
        out.push("\n");
        out.push("\n");
        let messages = pack.metadata?.UI?.messages || {};
        out.push("\n");
        out.push("const messages = {\n");
        out.push("  uix: {\n");
        out.push("    \"filter\": {\n");
        out.push("      \"search\": \"" + (messages.search || 'Search') + "\",\n");
        out.push("      \"exists\": \"%{name} " + (messages.exists || 'exists') + "\",\n");
        out.push("      \"eq\": \"%{name} =\",\n");
        out.push("      \"ne\": \"%{name} !=\",\n");
        out.push("      \"lte\": \"%{name} <=\",\n");
        out.push("      \"gte\": \"%{name} >=\",\n");
        out.push("      \"lt\": \"%{name} <\",\n");
        out.push("      \"gt\": \"%{name} >\",\n");
        out.push("      \"imatch\": \"%{name}\",\n");
        out.push("      \"in\": \"%{name} " + (messages.in || 'in') + "\",\n");
        out.push("      \"nin\": \"%{name} " + (messages.nin || 'not in') + "\",\n");
        out.push("    },\n");
        out.push("    actions:{\n");
        out.push("      \"create_and_add\": \"" + (messages.create_and_add || 'Create more...') + "\",\n");
        out.push("      \"preview\": \"" + (messages.preview || 'Quick View') + "\",\n");
        out.push("    },\n");
        out.push("  }\n");
        out.push("}\n");
        out.push("\n");
        out.push("export default\n");
        out.push("  merge(\n");
        out.push("    messages,\n");
        for (let entity of pack.entities){
            out.push("\n");
            out.push("    " + (entity.name) + "Translate,\n");
        }
        out.push("\n");
        for (let en_ of pack.enums){
            out.push("\n");
            out.push("    " + (en_.name) + ",\n");
        }
        out.push("\n");
        out.push("  )\n");
        out.push("\n");
        chunkStart(`./resource-menu-items.js`);
        out.push("\n");
        out.push("import React from 'react';\n");
        out.push("import ListIcon from '@material-ui/icons/view-list';\n");
        out.push("import { translate } from 'react-admin';\n");
        out.push("\n");
        out.push("export default {\n");
        for (let entity of pack.entities.filter((e)=>!e.embedded && !e.abstract)){
            out.push("\n");
            out.push("  \"" + (entity.name) + "\": { icon: <ListIcon />, visible: true, name: translate('resources." + (entity.name) + ".name', { smart_count:2 }) },\n");
        }
        out.push("\n");
        out.push("};\n");
        out.push("\n");
        chunkStart(`./admin.js`);
        out.push("\n");
        const language = pack.metadata?.UI?.locale || 'english';
        out.push("\n");
        out.push("import React from 'react';\n");
        out.push("import { Admin, Resource } from 'react-admin';\n");
        out.push("import " + (language) + "Messages from 'ra-language-" + (language) + "';\n");
        out.push("import translation from './i18n';\n");
        out.push("import { merge } from 'lodash';\n");
        out.push("import { uix as getUIX } from './';\n");
        out.push("import { UIXContext } from './contexts';\n");
        out.push("import polyglotI18nProvider from 'ra-i18n-polyglot';\n");
        out.push("\n");
        out.push("const messages = {\n");
        out.push("  " + (language) + ": {\n");
        out.push("    ...merge({}, " + (language) + "Messages, translation),\n");
        out.push("  },\n");
        out.push("};\n");
        out.push("\n");
        out.push("const i18nProviderGenerated = polyglotI18nProvider(locale => messages[locale], '" + (language) + "');\n");
        out.push("\n");
        out.push("export default ({ title, dataProvider, authProvider, customSagas, i18nProvider, uix, history,}) => (\n");
        out.push("  <UIXContext.Provider  value={uix || getUIX}>\n");
        out.push("    <Admin\n");
        out.push("      history={history}\n");
        out.push("      i18nProvider={i18nProvider || i18nProviderGenerated}\n");
        out.push("      title={title}\n");
        out.push("      dataProvider={dataProvider}\n");
        out.push("      authProvider={authProvider}\n");
        out.push("      customSagas={customSagas}\n");
        out.push("    >\n");
        out.push("    ");
        for (let entity of pack.entities.filter((e)=>!(e.embedded || e.abstract))){
            out.push("\n");
            out.push("        <Resource\n");
            out.push("          key={\"" + (entity.name) + "\"}\n");
            out.push("          show={(uix || getUIX)." + (entity.name) + ".Show}\n");
            out.push("          name={\"" + (entity.resourceName) + "\"}\n");
            out.push("          edit={(uix || getUIX)." + (entity.name) + ".Edit}\n");
            out.push("          create={(uix || getUIX)." + (entity.name) + ".Create}\n");
            out.push("          list={(uix || getUIX)." + (entity.name) + ".List}\n");
            out.push("          options={{ label: `resources.${(uix || getUIX)." + (entity.name) + ".name}.name` }}\n");
            out.push("        />\n");
            out.push("    ");
        }
        out.push("\n");
        out.push("    </Admin>\n");
        out.push("  </UIXContext.Provider>\n");
        out.push(");\n");
        out.push("\n");
        chunkStart(`./InputWithPreview.js`);
        out.push("\n");
        out.push("import React, { useContext, useState, Fragment } from 'react';\n");
        out.push("import Drawer from '@material-ui/core/Drawer';\n");
        out.push("\n");
        out.push("import { Field } from 'react-final-form';\n");
        out.push("import IconImageEye from '@material-ui/icons/RemoveRedEye';\n");
        out.push("import CloseIcon from '@material-ui/icons/Close';\n");
        out.push("import { Button } from 'react-admin';\n");
        out.push("import { ReferenceInput } from 'react-admin';\n");
        out.push("import QuickCreateButton from './quickCreate';\n");
        out.push("import { UIXContext } from './contexts';\n");
        out.push("\n");
        out.push("import { makeStyles } from '@material-ui/core/styles';\n");
        out.push("\n");
        out.push("const useStyles = makeStyles({\n");
        out.push("  root: {\n");
        out.push("    display: 'flex',\n");
        out.push("  }\n");
        out.push("});\n");
        out.push("\n");
        out.push("const PreviewButton = ({ id, resource, basePath, showForm: ShowForm }) => {\n");
        out.push("  const [show, setView] = useState(false);\n");
        out.push("  return (\n");
        out.push("    <Fragment>\n");
        out.push("      <Button onClick={() => setView(true)} label=\"ra.action.show\">\n");
        out.push("        <IconImageEye />\n");
        out.push("      </Button>\n");
        out.push("      <Drawer anchor=\"right\" open={show} onClose={() => setView(false)}>\n");
        out.push("        <div>\n");
        out.push("          <Button label=\"ra.action.cancel\" onClick={() => setView(false)}>\n");
        out.push("            <CloseIcon />\n");
        out.push("          </Button>\n");
        out.push("        </div>\n");
        out.push("        <ShowForm id={id} basePath={basePath} resource={resource} />\n");
        out.push("      </Drawer>\n");
        out.push("    </Fragment>\n");
        out.push("  );\n");
        out.push("};\n");
        out.push("\n");
        out.push("const InputWithPreview = ({ optionText, preview, from, Select, children, ...props }) => {\n");
        out.push("  const uix = useContext(UIXContext);\n");
        out.push("  const classes = useStyles();\n");
        out.push("  return (\n");
        out.push("    <div className={classes.root}>\n");
        out.push("      <ReferenceInput {...props} >\n");
        out.push("        <Select optionText={optionText} />\n");
        out.push("      </ReferenceInput>\n");
        out.push("      <Field\n");
        out.push("        name={props.source}\n");
        out.push("        component={({ input }) =>\n");
        out.push("          ((props.source === 'id' && !input.value) ||\n");
        out.push("            props.source !== 'id') && (\n");
        out.push("            <QuickCreateButton\n");
        out.push("              resource={props.reference}\n");
        out.push("              source={props.source}\n");
        out.push("              from={from}\n");
        out.push("            >\n");
        out.push("              {children}\n");
        out.push("            </QuickCreateButton>\n");
        out.push("          )\n");
        out.push("        }\n");
        out.push("      />\n");
        out.push("      <Field\n");
        out.push("        name={props.source}\n");
        out.push("        component={({ input }) =>\n");
        out.push("          input.value && (\n");
        out.push("            <PreviewButton\n");
        out.push("              id={input.value}\n");
        out.push("              basePath={`/${props.reference}`}\n");
        out.push("              resource={props.reference}\n");
        out.push("              showForm={uix[props.entity].Preview}\n");
        out.push("            />\n");
        out.push("          )\n");
        out.push("        }\n");
        out.push("      />\n");
        out.push("      <Field\n");
        out.push("        name={props.source}\n");
        out.push("        component={({ input }) =>\n");
        out.push("          input.value && (\n");
        out.push("            <uix.EditButton\n");
        out.push("              record={{ id: input.value }}\n");
        out.push("              basePath={`/${props.reference}`}\n");
        out.push("              resource={props.reference}\n");
        out.push("            />\n");
        out.push("          )\n");
        out.push("        }\n");
        out.push("      />\n");
        out.push("    </div>\n");
        out.push("  );\n");
        out.push("};\n");
        out.push("\n");
        out.push("export default InputWithPreview;\n");
        out.push("\n");
        chunkStart(`./quickCreate.js`);
        out.push("\n");
        out.push("import React, { useState, useContext, Fragment } from 'react';\n");
        out.push("import { UIXContext } from './contexts';\n");
        out.push("import {\n");
        out.push("  Button,\n");
        out.push("  useTranslate,\n");
        out.push("  SaveButton,\n");
        out.push("  useCreate,\n");
        out.push("  useNotify,\n");
        out.push("} from 'react-admin';\n");
        out.push("import IconContentAdd from '@material-ui/icons/Add';\n");
        out.push("import IconCancel from '@material-ui/icons/Cancel';\n");
        out.push("import Dialog from '@material-ui/core/Dialog';\n");
        out.push("import DialogTitle from '@material-ui/core/DialogTitle';\n");
        out.push("import DialogActions from '@material-ui/core/DialogActions';\n");
        out.push("import DialogContent from '@material-ui/core/DialogContent';\n");
        out.push("import { createForm } from 'final-form';\n");
        out.push("import { useForm } from 'react-final-form';\n");
        out.push("\n");
        out.push("export default ({ resource, source, children, ...props }) => {\n");
        out.push("  const notify = useNotify();\n");
        out.push("  const currentForm = useForm();\n");
        out.push("  const [create, { loading: saving }] = useCreate(resource);\n");
        out.push("  const [, setError] = useState(false);\n");
        out.push("  const [showDialog, setShowDialog] = useState(false);\n");
        out.push("  const translate = useTranslate();\n");
        out.push("  const formLabel = `${translate('ra.action.create')} ${translate(\n");
        out.push("    `resources.${resource}.name`,\n");
        out.push("    {\n");
        out.push("      smart_count: 1,\n");
        out.push("    },\n");
        out.push("  )}`;\n");
        out.push("\n");
        out.push("  const form = createForm({\n");
        out.push("    onSubmit: (values, _, callback) => {\n");
        out.push("      create(\n");
        out.push("        { payload: { data: values } },\n");
        out.push("        {\n");
        out.push("          onSuccess: ({ data }) => {\n");
        out.push("            notify('DONE');\n");
        out.push("            currentForm.change(source, data.id);\n");
        out.push("            setShowDialog(false);\n");
        out.push("            callback();\n");
        out.push("          },\n");
        out.push("          onFailure: error => {\n");
        out.push("            setError(error);\n");
        out.push("            notify(`error while creating ${error.message}`);\n");
        out.push("            callback(error);\n");
        out.push("          },\n");
        out.push("        },\n");
        out.push("      );\n");
        out.push("    },\n");
        out.push("  });\n");
        out.push("\n");
        out.push("  return (\n");
        out.push("    <Fragment>\n");
        out.push("      <Button onClick={() => setShowDialog(true)} label=\"ra.action.create\">\n");
        out.push("        <IconContentAdd />\n");
        out.push("      </Button>\n");
        out.push("      <Dialog\n");
        out.push("        fullWidth\n");
        out.push("        open={showDialog}\n");
        out.push("        onClose={() => setShowDialog(false)}\n");
        out.push("        aria-label={formLabel}\n");
        out.push("      >\n");
        out.push("        <DialogTitle>{formLabel}</DialogTitle>\n");
        out.push("        <DialogContent>{React.cloneElement(children, {\n");
        out.push("          form,\n");
        out.push("          save:(...args) => {\n");
        out.push("            console.log(args);\n");
        out.push("          },\n");
        out.push("          toolbar:null,\n");
        out.push("          record:{}\n");
        out.push("        })}</DialogContent>\n");
        out.push("        <DialogActions>\n");
        out.push("          <SaveButton\n");
        out.push("            saving={saving}\n");
        out.push("            handleSubmitWithRedirect={() => {\n");
        out.push("              form.submit();\n");
        out.push("            }}\n");
        out.push("          />\n");
        out.push("          <Button label=\"ra.action.cancel\" onClick={() => setShowDialog(false)}>\n");
        out.push("            <IconCancel />\n");
        out.push("          </Button>\n");
        out.push("        </DialogActions>\n");
        out.push("      </Dialog>\n");
        out.push("    </Fragment>\n");
        out.push("  );\n");
        out.push("};\n");
        out.push("\n");
        chunkStart(`./contexts.js`);
        out.push("\n");
        out.push("import React from 'react';\n");
        out.push("\n");
        out.push("export const UIXContext = React.createContext({});");
        chunkEnd();
        out = Object.keys(result).filter((i)=>i !== '$$$main$$$').map((curr)=>({
                name: curr,
                content: result[curr]
            }));
        if (out.some((t)=>typeof t == 'object')) {
            return out.map(chunk = ({
                ...chunk,
                content: Array.isArray(chunk.content) ? chunk.content.join('') : chunk.content
            }));
        } else {
            return out.join('');
        }
    },
    compile: function() {
        this.chunks = "$$$main$$$";
        this.alias = [
            "ui-index"
        ];
    },
    dependency: {}
};

//# sourceMappingURL=generators_new/tpls/UI/ui-index.njs.js.map