{"version":3,"sources":["generators_new/tpls/next-js/ui-data-adapters.njs.js"],"names":["code","text","expression"],"mappings":"AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAGCA;AAHD,IAGCA,AAAkCC,IAClCA,kCACAA,IACAA,oBACAD;AAPD,IAOCA,AAA6DC,IAC7DA,IAAEC,WAAYD,MACdA,kCACAA,sBAAoBC,WAAYD,MAAIC,WAAYD,MAChDA,QAAMD;AAXP,IAWOA,AACNA;AAZD,IAYCA,AACAA;AAbD,IAaCA,AACAA;AAdD,IAcCA,AACAA,MACMA;AAhBP,IAgBOA,AACAE,WAAYD,IAAEC,WAAYD,IAC1BD;AAlBP,IAkBOA,AACAE,WAAYD,IAAEC,WAAYD,KAC1BD;AApBP,IAoBOA,AACAE,WAAYD,GAACD;AArBpB,IAqBoBA,AAAYC,aAAWC,cAAeD,KAAGD;AArB7D,IAqB6DA,AACtDA;AAtBP,IAsBOA,AAAMC,IACZA,QAAMD;AAvBP,IAuBOA,AAAMC,IACZA,WACAA,QAAMD;AAzBP,IAyBOA,AACNA;AA1BD,IA0BCA,AACAA;AA3BD,IA2BCA,AACAC,cAAkBC,iBAAkBD,sBACpCA,QAAMD;AA7BP,IA6BOA,AAAMC,IACZA,SACAA,QACAD;AAhCD,IAgCCA,AAAOC,IACPA,GAEAD;AAnCD,IAmCCA,AAAsCC,IACtCA,IACAA,0EACAA,wCACAA,2CACAA,4CACAA,IACAA,qCACAA,eAAaC,YAAaD,MAC1BA,6BACAA,oDACAA,8BACAA,oBACAA,0DACAA,YACAA,WACAA,QACAA,OACAA,IACAA,8DAEAD;AAxDD,IAwDCA,AAAsCC,IACtCA,4CACAA,IACAA,qCACAA,wBACAA,6BACAA,oDACAA,8BACAA,oBACAA,0DACAA,YACAA,WACAA,QACAA,OACAA,IACAA,4EACAA,sCAEAD;AA1ED,IA0ECA,AAAyCC,IACzCA,IACAA,wCACAA,2BACAA,IACAA,oDACAA,IACAA,qCACAA,qCACAA,6EACAA,KACAA,IACAA,4EACAA,oEAEAD;AAzFD,IAyFCA,AAA8CC,IAC9CA,0EACAA,kFACAA,wCACAA,2CACAA,4CACAA,wCACAA,2BACAA,IACAA,uDACAA,IACAA,qCACAA,wCACAA,6EACAA,KACAA,IACAA,qCACAA,eAAaC,YAAaD,MAC1BA,mCACAA,+BACAA,0CACAA,sEACAA,gCACAA,sBACAA,4DACAA,cACAA,YACAA,gBACAA,4CACAA,SACAA,QACAA,OACAA,IACAA;AA1HD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","file":"generators_new/tpls/next-js/ui-data-adapters.njs.js","sourceRoot":"/Users/vedmalex/work/fte2/demo","sourcesContent":["<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"],"template":{"version":"1.0.0","segments":[{"generatedLine":1,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":2,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":3,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":4,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":5,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":6,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":7,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":8,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":9,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":10,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":11,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":12,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":13,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":14,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":15,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":16,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":17,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":18,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":19,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":20,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":21,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":22,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":23,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":24,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":25,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":26,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":27,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":28,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":29,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":30,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":31,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":32,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":33,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":34,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":35,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":36,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":37,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":38,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":39,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":40,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":41,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":42,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":43,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":44,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":45,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":46,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":47,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":48,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":49,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":50,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":51,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":52,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":53,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":54,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":55,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":56,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":57,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":58,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":59,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":60,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":61,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":62,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":63,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":64,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":65,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":66,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":67,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":68,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":69,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":70,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":71,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":72,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":73,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":74,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":75,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":76,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":77,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":78,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":79,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":80,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":81,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":82,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":83,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":84,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":85,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":86,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":87,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":88,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":89,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":90,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":91,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":92,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":93,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":94,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":95,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":96,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":97,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":98,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":99,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":100,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":101,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":102,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":103,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":104,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":105,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":106,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":107,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":108,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":109,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":110,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":111,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":112,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":113,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":114,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":115,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":116,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":117,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":118,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":119,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":120,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":121,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":122,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":123,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":124,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":125,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":126,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":127,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":128,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":129,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":130,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":131,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":132,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":133,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":134,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":135,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":136,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":137,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":138,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":139,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":140,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":141,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":142,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":143,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":144,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":145,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":146,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":147,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":148,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":149,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":150,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":151,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":152,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":153,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":154,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":155,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":156,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":157,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":158,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":159,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":160,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":161,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":162,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":163,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":164,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":165,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":166,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":167,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":168,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":169,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":170,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":171,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":172,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":173,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":174,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":175,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":176,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":177,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":178,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":179,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":180,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":181,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":182,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":183,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":184,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":185,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":186,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":187,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":188,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":189,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":190,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":191,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":192,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":193,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":194,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":195,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":196,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":197,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":198,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":199,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":200,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":201,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":202,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":203,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":204,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":205,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":206,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":207,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":208,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js"},{"generatedLine":50,"generatedColumn":4,"originalLine":4,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"code","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":51,"generatedColumn":4,"originalLine":4,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"code","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":51,"generatedColumn":4,"originalLine":4,"originalColumn":35,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":51,"generatedColumn":8,"originalLine":5,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":51,"generatedColumn":42,"originalLine":6,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":51,"generatedColumn":46,"originalLine":7,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":51,"generatedColumn":66,"originalLine":8,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"code","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":52,"generatedColumn":4,"originalLine":8,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"code","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":52,"generatedColumn":4,"originalLine":8,"originalColumn":62,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":52,"generatedColumn":8,"originalLine":9,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":52,"generatedColumn":12,"originalLine":9,"originalColumn":3,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"expression","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":52,"generatedColumn":23,"originalLine":9,"originalColumn":15,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":52,"generatedColumn":29,"originalLine":10,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":52,"generatedColumn":63,"originalLine":11,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":52,"generatedColumn":85,"originalLine":11,"originalColumn":21,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"expression","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":52,"generatedColumn":96,"originalLine":11,"originalColumn":33,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":52,"generatedColumn":102,"originalLine":11,"originalColumn":37,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"expression","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":52,"generatedColumn":113,"originalLine":11,"originalColumn":49,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":52,"generatedColumn":119,"originalLine":12,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":52,"generatedColumn":127,"originalLine":12,"originalColumn":7,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"code","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":53,"generatedColumn":4,"originalLine":12,"originalColumn":7,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"code","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":53,"generatedColumn":4,"originalLine":13,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"code","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":54,"generatedColumn":4,"originalLine":13,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"code","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":54,"generatedColumn":4,"originalLine":14,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"code","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":55,"generatedColumn":4,"originalLine":14,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"code","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":55,"generatedColumn":4,"originalLine":15,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"code","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":56,"generatedColumn":4,"originalLine":15,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"code","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":56,"generatedColumn":4,"originalLine":16,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"code","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":56,"generatedColumn":10,"originalLine":17,"originalColumn":7,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"code","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":57,"generatedColumn":4,"originalLine":17,"originalColumn":7,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"code","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":57,"generatedColumn":4,"originalLine":18,"originalColumn":7,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"expression","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":57,"generatedColumn":15,"originalLine":18,"originalColumn":19,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":57,"generatedColumn":19,"originalLine":18,"originalColumn":21,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"expression","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":57,"generatedColumn":30,"originalLine":18,"originalColumn":33,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":57,"generatedColumn":34,"originalLine":19,"originalColumn":7,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"code","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":58,"generatedColumn":4,"originalLine":19,"originalColumn":7,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"code","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":58,"generatedColumn":4,"originalLine":20,"originalColumn":7,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"expression","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":58,"generatedColumn":15,"originalLine":20,"originalColumn":19,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":58,"generatedColumn":19,"originalLine":20,"originalColumn":21,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"expression","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":58,"generatedColumn":30,"originalLine":20,"originalColumn":33,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":58,"generatedColumn":35,"originalLine":21,"originalColumn":7,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"code","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":59,"generatedColumn":4,"originalLine":21,"originalColumn":7,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"code","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":59,"generatedColumn":4,"originalLine":22,"originalColumn":7,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"expression","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":59,"generatedColumn":15,"originalLine":22,"originalColumn":19,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":59,"generatedColumn":18,"originalLine":22,"originalColumn":20,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"code","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":60,"generatedColumn":4,"originalLine":22,"originalColumn":20,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"code","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":60,"generatedColumn":4,"originalLine":22,"originalColumn":32,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":60,"generatedColumn":17,"originalLine":22,"originalColumn":43,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"expression","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":60,"generatedColumn":31,"originalLine":22,"originalColumn":58,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":60,"generatedColumn":36,"originalLine":22,"originalColumn":61,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"code","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":61,"generatedColumn":4,"originalLine":22,"originalColumn":61,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"code","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":61,"generatedColumn":4,"originalLine":23,"originalColumn":7,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"code","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":62,"generatedColumn":4,"originalLine":23,"originalColumn":7,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"code","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":62,"generatedColumn":4,"originalLine":23,"originalColumn":13,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":62,"generatedColumn":8,"originalLine":24,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":62,"generatedColumn":16,"originalLine":24,"originalColumn":7,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"code","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":63,"generatedColumn":4,"originalLine":24,"originalColumn":7,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"code","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":63,"generatedColumn":4,"originalLine":24,"originalColumn":13,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":63,"generatedColumn":8,"originalLine":25,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":63,"generatedColumn":19,"originalLine":26,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":63,"generatedColumn":27,"originalLine":26,"originalColumn":7,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"code","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":64,"generatedColumn":4,"originalLine":26,"originalColumn":7,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"code","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":64,"generatedColumn":4,"originalLine":27,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"code","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":65,"generatedColumn":4,"originalLine":27,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"code","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":65,"generatedColumn":4,"originalLine":28,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"code","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":66,"generatedColumn":4,"originalLine":28,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"code","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":66,"generatedColumn":4,"originalLine":29,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":66,"generatedColumn":18,"originalLine":29,"originalColumn":19,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"expression","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":66,"generatedColumn":35,"originalLine":29,"originalColumn":37,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":66,"generatedColumn":57,"originalLine":30,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":66,"generatedColumn":65,"originalLine":30,"originalColumn":7,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"code","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":67,"generatedColumn":4,"originalLine":30,"originalColumn":7,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"code","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":67,"generatedColumn":4,"originalLine":30,"originalColumn":13,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":67,"generatedColumn":8,"originalLine":31,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":67,"generatedColumn":17,"originalLine":32,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":67,"generatedColumn":25,"originalLine":33,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"code","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":68,"generatedColumn":4,"originalLine":33,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"code","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":68,"generatedColumn":4,"originalLine":33,"originalColumn":8,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":68,"generatedColumn":8,"originalLine":34,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":68,"generatedColumn":11,"originalLine":36,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"code","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":69,"generatedColumn":4,"originalLine":36,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"code","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":69,"generatedColumn":4,"originalLine":36,"originalColumn":39,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":69,"generatedColumn":8,"originalLine":37,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":69,"generatedColumn":12,"originalLine":38,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":69,"generatedColumn":86,"originalLine":39,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":69,"generatedColumn":126,"originalLine":40,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":69,"generatedColumn":169,"originalLine":41,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":69,"generatedColumn":213,"originalLine":42,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":69,"generatedColumn":217,"originalLine":43,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":69,"generatedColumn":254,"originalLine":44,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":69,"generatedColumn":269,"originalLine":44,"originalColumn":14,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"expression","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":69,"generatedColumn":281,"originalLine":44,"originalColumn":27,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":69,"generatedColumn":287,"originalLine":45,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":69,"generatedColumn":316,"originalLine":46,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":69,"generatedColumn":368,"originalLine":47,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":69,"generatedColumn":398,"originalLine":48,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":69,"generatedColumn":418,"originalLine":49,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":69,"generatedColumn":476,"originalLine":50,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":69,"generatedColumn":488,"originalLine":51,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":69,"generatedColumn":499,"originalLine":52,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":69,"generatedColumn":507,"originalLine":53,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":69,"generatedColumn":514,"originalLine":54,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":69,"generatedColumn":518,"originalLine":55,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":69,"generatedColumn":580,"originalLine":57,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"code","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":70,"generatedColumn":4,"originalLine":57,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"code","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":70,"generatedColumn":4,"originalLine":57,"originalColumn":39,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":70,"generatedColumn":8,"originalLine":58,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":70,"generatedColumn":52,"originalLine":59,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":70,"generatedColumn":56,"originalLine":60,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":70,"generatedColumn":93,"originalLine":61,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":70,"generatedColumn":117,"originalLine":62,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":70,"generatedColumn":146,"originalLine":63,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":70,"generatedColumn":198,"originalLine":64,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":70,"generatedColumn":228,"originalLine":65,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":70,"generatedColumn":248,"originalLine":66,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":70,"generatedColumn":306,"originalLine":67,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":70,"generatedColumn":318,"originalLine":68,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":70,"generatedColumn":329,"originalLine":69,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":70,"generatedColumn":337,"originalLine":70,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":70,"generatedColumn":344,"originalLine":71,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":70,"generatedColumn":348,"originalLine":72,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":70,"generatedColumn":424,"originalLine":73,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":70,"generatedColumn":462,"originalLine":75,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"code","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":71,"generatedColumn":4,"originalLine":75,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"code","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":71,"generatedColumn":4,"originalLine":75,"originalColumn":42,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":71,"generatedColumn":8,"originalLine":76,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":71,"generatedColumn":12,"originalLine":77,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":71,"generatedColumn":52,"originalLine":78,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":71,"generatedColumn":79,"originalLine":79,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":71,"generatedColumn":83,"originalLine":80,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":71,"generatedColumn":135,"originalLine":81,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":71,"generatedColumn":139,"originalLine":82,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":71,"generatedColumn":176,"originalLine":83,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":71,"generatedColumn":213,"originalLine":84,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":71,"generatedColumn":290,"originalLine":85,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":71,"generatedColumn":295,"originalLine":86,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":71,"generatedColumn":299,"originalLine":87,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":71,"generatedColumn":375,"originalLine":88,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":71,"generatedColumn":443,"originalLine":90,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"code","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":72,"generatedColumn":4,"originalLine":90,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"code","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":72,"generatedColumn":4,"originalLine":90,"originalColumn":47,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":72,"generatedColumn":8,"originalLine":91,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":72,"generatedColumn":82,"originalLine":92,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":72,"generatedColumn":164,"originalLine":93,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":72,"generatedColumn":204,"originalLine":94,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":72,"generatedColumn":247,"originalLine":95,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":72,"generatedColumn":291,"originalLine":96,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":72,"generatedColumn":331,"originalLine":97,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":72,"generatedColumn":358,"originalLine":98,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":72,"generatedColumn":362,"originalLine":99,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":72,"generatedColumn":417,"originalLine":100,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":72,"generatedColumn":421,"originalLine":101,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":72,"generatedColumn":458,"originalLine":102,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":72,"generatedColumn":498,"originalLine":103,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":72,"generatedColumn":575,"originalLine":104,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":72,"generatedColumn":580,"originalLine":105,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":72,"generatedColumn":584,"originalLine":106,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":72,"generatedColumn":621,"originalLine":107,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":72,"generatedColumn":636,"originalLine":107,"originalColumn":14,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"expression","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":72,"generatedColumn":648,"originalLine":107,"originalColumn":27,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":72,"generatedColumn":654,"originalLine":108,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":72,"generatedColumn":689,"originalLine":109,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":72,"generatedColumn":720,"originalLine":110,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":72,"generatedColumn":762,"originalLine":111,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":72,"generatedColumn":832,"originalLine":112,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":72,"generatedColumn":864,"originalLine":113,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":72,"generatedColumn":886,"originalLine":114,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":72,"generatedColumn":946,"originalLine":115,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":72,"generatedColumn":960,"originalLine":116,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":72,"generatedColumn":972,"originalLine":117,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":72,"generatedColumn":988,"originalLine":118,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":72,"generatedColumn":1032,"originalLine":119,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":72,"generatedColumn":1041,"originalLine":120,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":72,"generatedColumn":1049,"originalLine":121,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":72,"generatedColumn":1056,"originalLine":122,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"},{"generatedLine":72,"generatedColumn":1060,"originalLine":123,"originalColumn":1,"source":"generators_new/tpls/next-js/ui-data-adapters.njs.js","name":"text","content":"<#@ context \"model\" -#>\n<#@ chunks \"$$$main$$$\" -#>\n<#@ alias \"ui-data-adapters\" -#>\n<#- chunkStart(`fragments.js`); #>\nimport gql from 'graphql-tag';\n\nexport default {\n<# model.entities.filter(e => !e.abstract).forEach(item=> {#>\n  #{item.name}:{\n    query: (fragments) => gql`\n      fragment Query#{item.name} on #{item.name} {\n      <#\n      item.props.forEach(prop=> {\n      const { ref, embedded, stored, single } = prop;\n        if(item.embedded && prop.name === 'id') return;\n      -#>\n      <#-if(ref && single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Id\n      <#-} else if(ref && !single && !embedded) {-#>\n      #{prop.name}: #{prop.name}Ids\n      <#-} else {-#>\n      #{prop.name} <#if(ref){#> { ...Query#{prop.gqlType} } <#}#>\n      <#-}#>\n      <#})#>\n      }\n      <#item.props.filter(f=>f.ref && f.embedded).forEach(prop=>{\n      const { ref } = prop;\n      -#>\n      ${fragments.#{prop.ref.entity}.query(fragments)}\n      <#})#>\n    `\n  },\n<# })#>\n}\n\n<#- chunkStart(`data-provider.js`); #>\n\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n\n<#- chunkStart(`auth-provider.js`); #>\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/api/admin',\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n});\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderRemote';\nexport default authProvider(client);\n\n<#- chunkStart(`auth-provider-fb.js`); #>\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport client from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(client);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nimport authProvider from 'ra-gen-ui-lib/dist/client/authProviderClient';\nexport default authProvider(firebase.auth.Auth.Persistence.LOCAL);\n\n<#- chunkStart(`data-provider-fb-auth.js`); #>\nimport clientProvider from 'ra-gen-ui-lib/dist/client/remoteProvider';\nimport { firebaseLoaded } from 'ra-gen-ui-lib/dist/client/authProviderClient';\nimport fragments from './fragments';\nimport resources from './ui/resources';\nimport ApolloClient from 'apollo-boost';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport clientKey from '../../configure/client.json'\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(clientKey);\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n}\n\nconst client = new ApolloClient({\n  uri: '/api/#{model.name}',\n  request: async operation => {\n    await firebaseLoaded();\n    if (firebase.auth().currentUser) {\n      const token = await firebase.auth().currentUser.getIdToken()\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : '',\n        },\n      })\n    } else {\n      throw new Error('unauthenticated')\n    }\n  },\n});\n\nexport default clientProvider(client, fragments, resources);\n"}]}}