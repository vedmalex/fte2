{"version":3,"sources":["generators_new/tpls/graphql/graphql-api.njs.js"],"names":["code","text","expression"],"mappings":"AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAGCA;AAHD,IAGCA,AACAA;AAJD,IAICA,AACAA;AALD,IAKCA,AACAA;AAND,IAMCA,AAAsCC,IACtCA,gFACAA,IACAA,sEACAA,IACAA,sCACAA,uCACAA,0BACAA,0CACAA,IACAA,kCACAA,qEACAA,mEACAA,YACAA,mBACAA,oBACAA,qDACAA,4DACAA,sDACAA,kFACAA,2EACAA,IACAA,wDACAD;AA7BD,IA6BCA,AACAA;AA9BD,IA8BCA,AACAA;AA/BD,IA+BCA,AACAA;AAhCD,IAgCCA,AACAA;AAjCD,IAiCCA,AACAA;AAlCD,IAkCCA,AAAEC,IACFA,IACAD;AApCD,IAoCCA,AACAC,SAAOC,GAAID,SAAOC,4BAA6BD,UAAQC,GAAID,MAC3DD;AAtCD,IAsCCA,AAAMC,IACNA,IACAA,6BACAA,2BACAA,kEACAA,QACAA,KACAA,IACAA,qCACAA,mDACAA,yEACAA,KACAA,IACAA,kDACAA,uBACAA,MACAA,IACAA,8BACAA,iBACAA,iBACAA,uBACAA,eACAA,iBACAA,IACAA,uBACAA,iBACAA,oBACAA,OACAA,IACAA,sBACAA,WACAA,YACAA,OACAA,IACAA,kBACAA,sBACAA,yBACAA,OACAA,IACAA,sBACAA,kBACAA,OACAA,MACAA,aACAA,IAAED;AAlFH,IAkFGA,AACAE,GAAID,GACJD;AApFH,IAoFGA,AACFC,gBACAA,qBACAA,OACAA,MACAA,IACAA,kBACAA,IACAA,6BACAA,wBACAA,oCACAA,MACAA,sBACAA,MACAA,IACAA,qDACAA,mCACAA,wDACAA,+BACAA,gDACAA,kCACAA,+DACAA,WACAA,gBACAA,sBACAA,SACAA,cACAA,mBACAA,OACAA,KACAA,IACAA,2CACAA,6BACAA,gBACAA,yBACAA,0BACAA,QACAA,qDACAA,mCACAA,8CACAA,iEACAA,gBACAA,oBACAA,eACAA,8BACAA,qBACAA,mCACAA,6DACAA,uBACAA,oDACAA,WACAA,SACAA,gBACAA,eACAA,uBACAA,oBACAA,gBACAA,mBACAA,gBACAA,wCACAA,2BACAA,SACAA,QACAA,MACAA,IACAA,2BACAA,YACAA,yBACAA,OACAA,MACAA,IACAA,0DAAwDC,YAAaD,SACrfile":"generators_new/tpls/graphql/graphql-api.njs.js","sourceRoot":"/Users/vedmalex/work/fte2/demo","sourcesContent":["<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"],"template":{"version":"1.0.0","segments":[{"generatedLine":1,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":2,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":3,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":4,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":5,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":6,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":7,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":8,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":9,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":10,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":11,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":12,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":13,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":14,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":15,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":16,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":17,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":18,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":19,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":20,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":21,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":22,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":23,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":24,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":25,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":26,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":27,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":28,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":29,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":30,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":31,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":32,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":33,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":34,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":35,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":36,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":37,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":38,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":39,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":40,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":41,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":42,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":43,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":44,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":45,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":46,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":47,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":48,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":49,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":50,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":51,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":52,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":53,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":54,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":55,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":56,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":57,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":58,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":59,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":60,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":61,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":62,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":63,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":64,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":65,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":66,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":67,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":68,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":69,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":70,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":71,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":72,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":73,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":74,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":75,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":76,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":77,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":78,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":79,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":80,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":81,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":82,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":83,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":84,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":85,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":86,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":87,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":88,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":89,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":90,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":91,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":92,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":93,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":94,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":95,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":96,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":97,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":98,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":99,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":100,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":101,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":102,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":103,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":104,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":105,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":106,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":107,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":108,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":109,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":110,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":111,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":112,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":113,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":114,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":115,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":116,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":117,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":118,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":119,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":120,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":121,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":122,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":123,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":124,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":125,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":126,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":127,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":128,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":129,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":130,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":131,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":132,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":133,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":134,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":135,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":136,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":137,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":138,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":139,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":140,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":141,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":142,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":143,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":144,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":145,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":146,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":147,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":148,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":149,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":150,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":151,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":152,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":153,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":154,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":155,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":156,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":157,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":158,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":159,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":160,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":161,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":162,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":163,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":164,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":165,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":166,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":167,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":168,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":169,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":170,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":171,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":172,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":173,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":174,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":175,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":176,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":177,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":178,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":179,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":180,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":181,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":182,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":183,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":184,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":185,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":186,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":187,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":188,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":189,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":190,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":191,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":192,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":193,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":194,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":195,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":196,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":197,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":198,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":199,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":200,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":201,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":202,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":203,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":204,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":205,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":206,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":207,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":208,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":209,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":210,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":211,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":212,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":213,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":214,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":215,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":216,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":217,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":218,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":219,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":220,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":221,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":222,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":223,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":224,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":225,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":226,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":227,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":228,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":229,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":230,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":231,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":232,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":233,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/graphql/graphql-api.njs.js"},{"generatedLine":50,"generatedColumn":4,"originalLine":4,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"code","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":51,"generatedColumn":4,"originalLine":4,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"code","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":51,"generatedColumn":4,"originalLine":5,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"code","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":52,"generatedColumn":4,"originalLine":5,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"code","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":52,"generatedColumn":4,"originalLine":6,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"code","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":53,"generatedColumn":4,"originalLine":6,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"code","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":53,"generatedColumn":4,"originalLine":7,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"code","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":54,"generatedColumn":4,"originalLine":7,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"code","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":54,"generatedColumn":4,"originalLine":7,"originalColumn":39,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":54,"generatedColumn":8,"originalLine":8,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":54,"generatedColumn":88,"originalLine":9,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":54,"generatedColumn":92,"originalLine":10,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":54,"generatedColumn":162,"originalLine":11,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":54,"generatedColumn":166,"originalLine":12,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":54,"generatedColumn":204,"originalLine":13,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":54,"generatedColumn":243,"originalLine":14,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":54,"generatedColumn":269,"originalLine":15,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":54,"generatedColumn":311,"originalLine":16,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":54,"generatedColumn":315,"originalLine":17,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":54,"generatedColumn":349,"originalLine":18,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":54,"generatedColumn":418,"originalLine":19,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":54,"generatedColumn":485,"originalLine":20,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":54,"generatedColumn":497,"originalLine":21,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":54,"generatedColumn":516,"originalLine":22,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":54,"generatedColumn":536,"originalLine":23,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":54,"generatedColumn":589,"originalLine":24,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":54,"generatedColumn":649,"originalLine":25,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":54,"generatedColumn":703,"originalLine":26,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":54,"generatedColumn":785,"originalLine":27,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":54,"generatedColumn":860,"originalLine":28,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":54,"generatedColumn":864,"originalLine":29,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":54,"generatedColumn":920,"originalLine":30,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"code","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":55,"generatedColumn":4,"originalLine":30,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"code","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":55,"generatedColumn":4,"originalLine":31,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"code","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":56,"generatedColumn":4,"originalLine":31,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"code","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":56,"generatedColumn":4,"originalLine":32,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"code","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":57,"generatedColumn":4,"originalLine":32,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"code","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":57,"generatedColumn":4,"originalLine":33,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"code","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":58,"generatedColumn":4,"originalLine":33,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"code","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":58,"generatedColumn":4,"originalLine":34,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"code","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":59,"generatedColumn":4,"originalLine":34,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"code","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":59,"generatedColumn":4,"originalLine":35,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"code","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":60,"generatedColumn":4,"originalLine":35,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"code","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":60,"generatedColumn":4,"originalLine":35,"originalColumn":3,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":60,"generatedColumn":8,"originalLine":36,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":60,"generatedColumn":12,"originalLine":37,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"code","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":61,"generatedColumn":4,"originalLine":37,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"code","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":61,"generatedColumn":4,"originalLine":38,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":61,"generatedColumn":13,"originalLine":38,"originalColumn":8,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"expression","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":61,"generatedColumn":16,"originalLine":38,"originalColumn":12,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":61,"generatedColumn":25,"originalLine":38,"originalColumn":19,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"expression","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":61,"generatedColumn":53,"originalLine":38,"originalColumn":48,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":61,"generatedColumn":63,"originalLine":38,"originalColumn":56,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"expression","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":61,"generatedColumn":66,"originalLine":38,"originalColumn":60,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":61,"generatedColumn":72,"originalLine":39,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"code","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":62,"generatedColumn":4,"originalLine":39,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"code","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":62,"generatedColumn":4,"originalLine":39,"originalColumn":7,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":62,"generatedColumn":8,"originalLine":40,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":62,"generatedColumn":12,"originalLine":41,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":62,"generatedColumn":41,"originalLine":42,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":62,"generatedColumn":68,"originalLine":43,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":62,"generatedColumn":134,"originalLine":44,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":62,"generatedColumn":142,"originalLine":45,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":62,"generatedColumn":147,"originalLine":46,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":62,"generatedColumn":151,"originalLine":47,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":62,"generatedColumn":188,"originalLine":48,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":62,"generatedColumn":239,"originalLine":49,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":62,"generatedColumn":312,"originalLine":50,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":62,"generatedColumn":317,"originalLine":51,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":62,"generatedColumn":321,"originalLine":52,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":62,"generatedColumn":371,"originalLine":53,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":62,"generatedColumn":394,"originalLine":54,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":62,"generatedColumn":400,"originalLine":55,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":62,"generatedColumn":404,"originalLine":56,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":62,"generatedColumn":434,"originalLine":57,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":62,"generatedColumn":451,"originalLine":58,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":62,"generatedColumn":468,"originalLine":59,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":62,"generatedColumn":491,"originalLine":60,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":62,"generatedColumn":506,"originalLine":61,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":62,"generatedColumn":523,"originalLine":62,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":62,"generatedColumn":527,"originalLine":63,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":62,"generatedColumn":550,"originalLine":64,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":62,"generatedColumn":567,"originalLine":65,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":62,"generatedColumn":587,"originalLine":66,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":62,"generatedColumn":594,"originalLine":67,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":62,"generatedColumn":598,"originalLine":68,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":62,"generatedColumn":620,"originalLine":69,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":62,"generatedColumn":631,"originalLine":70,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":62,"generatedColumn":643,"originalLine":71,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":62,"generatedColumn":650,"originalLine":72,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":62,"generatedColumn":654,"originalLine":73,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":62,"generatedColumn":672,"originalLine":74,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":62,"generatedColumn":694,"originalLine":75,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":62,"generatedColumn":719,"originalLine":76,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":62,"generatedColumn":726,"originalLine":77,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":62,"generatedColumn":730,"originalLine":78,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":62,"generatedColumn":752,"originalLine":79,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":62,"generatedColumn":770,"originalLine":80,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":62,"generatedColumn":777,"originalLine":81,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":62,"generatedColumn":783,"originalLine":82,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":62,"generatedColumn":796,"originalLine":83,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":62,"generatedColumn":800,"originalLine":83,"originalColumn":3,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"code","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":63,"generatedColumn":4,"originalLine":83,"originalColumn":3,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"code","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":63,"generatedColumn":4,"originalLine":84,"originalColumn":3,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"expression","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":63,"generatedColumn":7,"originalLine":84,"originalColumn":7,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":63,"generatedColumn":10,"originalLine":85,"originalColumn":3,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"code","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":64,"generatedColumn":4,"originalLine":85,"originalColumn":3,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"code","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":64,"generatedColumn":4,"originalLine":86,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":64,"generatedColumn":20,"originalLine":87,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":64,"generatedColumn":41,"originalLine":88,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":64,"generatedColumn":48,"originalLine":89,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":64,"generatedColumn":54,"originalLine":90,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":64,"generatedColumn":58,"originalLine":91,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":64,"generatedColumn":76,"originalLine":92,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":64,"generatedColumn":80,"originalLine":93,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":64,"generatedColumn":109,"originalLine":94,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":64,"generatedColumn":133,"originalLine":95,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":64,"generatedColumn":169,"originalLine":96,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":64,"generatedColumn":175,"originalLine":97,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":64,"generatedColumn":197,"originalLine":98,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":64,"generatedColumn":203,"originalLine":99,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":64,"generatedColumn":207,"originalLine":100,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":64,"generatedColumn":260,"originalLine":101,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":64,"generatedColumn":295,"originalLine":102,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":64,"generatedColumn":351,"originalLine":103,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":64,"generatedColumn":382,"originalLine":104,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":64,"generatedColumn":430,"originalLine":105,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":64,"generatedColumn":464,"originalLine":106,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":64,"generatedColumn":527,"originalLine":107,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":64,"generatedColumn":538,"originalLine":108,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":64,"generatedColumn":554,"originalLine":109,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":64,"generatedColumn":576,"originalLine":110,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":64,"generatedColumn":585,"originalLine":111,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":64,"generatedColumn":599,"originalLine":112,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":64,"generatedColumn":618,"originalLine":113,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":64,"generatedColumn":625,"originalLine":114,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":64,"generatedColumn":630,"originalLine":115,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":64,"generatedColumn":634,"originalLine":116,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":64,"generatedColumn":677,"originalLine":117,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":64,"generatedColumn":706,"originalLine":118,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":64,"generatedColumn":722,"originalLine":119,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":64,"generatedColumn":747,"originalLine":120,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":64,"generatedColumn":773,"originalLine":121,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":64,"generatedColumn":781,"originalLine":122,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":64,"generatedColumn":834,"originalLine":123,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":64,"generatedColumn":869,"originalLine":124,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":64,"generatedColumn":915,"originalLine":125,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":64,"generatedColumn":980,"originalLine":126,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":64,"generatedColumn":996,"originalLine":127,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":64,"generatedColumn":1016,"originalLine":128,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":64,"generatedColumn":1031,"originalLine":129,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":64,"generatedColumn":1061,"originalLine":130,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":64,"generatedColumn":1082,"originalLine":131,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":64,"generatedColumn":1117,"originalLine":132,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":64,"generatedColumn":1178,"originalLine":133,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":64,"generatedColumn":1201,"originalLine":134,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":64,"generatedColumn":1253,"originalLine":135,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":64,"generatedColumn":1264,"originalLine":136,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":64,"generatedColumn":1273,"originalLine":137,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":64,"generatedColumn":1289,"originalLine":138,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":64,"generatedColumn":1304,"originalLine":139,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":64,"generatedColumn":1327,"originalLine":140,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":64,"generatedColumn":1347,"originalLine":141,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":64,"generatedColumn":1363,"originalLine":142,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":64,"generatedColumn":1382,"originalLine":143,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":64,"generatedColumn":1398,"originalLine":144,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":64,"generatedColumn":1438,"originalLine":145,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":64,"generatedColumn":1465,"originalLine":146,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":64,"generatedColumn":1474,"originalLine":147,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":64,"generatedColumn":1482,"originalLine":148,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":64,"generatedColumn":1488,"originalLine":149,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":64,"generatedColumn":1492,"originalLine":150,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":64,"generatedColumn":1519,"originalLine":151,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":64,"generatedColumn":1531,"originalLine":152,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":64,"generatedColumn":1556,"originalLine":153,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":64,"generatedColumn":1563,"originalLine":154,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":64,"generatedColumn":1569,"originalLine":155,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":64,"generatedColumn":1573,"originalLine":156,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":64,"generatedColumn":1631,"originalLine":156,"originalColumn":57,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"expression","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":64,"generatedColumn":1643,"originalLine":156,"originalColumn":70,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"},{"generatedLine":64,"generatedColumn":1652,"originalLine":157,"originalColumn":1,"source":"generators_new/tpls/graphql/graphql-api.njs.js","name":"text","content":"<#@ context \"context\" -#>\n<#@ alias \"graphql-api\" -#>\n<#@ chunks \"api.js\" -#>\n<#\nconst { model, nextApp } = context;\n#>\n<#- chunkStart(`${model.name}.js`); #>\nimport { ApolloServer, gql, AuthenticationError } from 'apollo-server-micro'\n\nimport GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json'\n\nimport admin from 'firebase-admin'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport fetch from 'isomorphic-unfetch'\n\nimport { merge } from 'lodash'\nimport firebaseServiceAccount from '../../configure/account.json'\nimport firebaseClientAccount from '../../configure/client.json'\nimport {\n  AclDirective,\n  FirebaseAdmin,\n} from 'ra-gen-ui-lib/dist/server/firebase-admin'\nimport gqlLodash from 'ra-gen-ui-lib/dist/server/lodash'\nimport { LodashSchema } from '@grainjs/gql-lodash'\nimport DataProvider from 'ra-gen-ui-lib/dist/server/dataProviderFirebaseAdmin'\nimport trackedResources from './../../components/students/ui/resources'\n\nimport { Schema } from '@grainjs/gql-schema-builder'\n<#\nconst gqlItems = [\n...model.enums.map(i=>i.name),\n...model.entities.filter(i=>!i.abstract).map(i=>i.name),\n];\n#>\n\n<# gqlItems.forEach(i=>{-#>\nimport #{i} from '#{ nextApp ? '../../' : './'}graphql/#{i}';\n<#})#>\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(firebaseServiceAccount),\n  })\n}\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseClientAccount)\n  firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n}\n\nexport const dataProvider = new DataProvider({\n  trackedResources,\n})\n\nconst model = new Schema({\n  schema:gql`\n  scalar JSON\n  scalar JSONObject\n  scalar ID\n  scalar Date\n\n input Pagination {\n    page: Int\n    perPage: Int\n  }\n\n  enum SortOrder {\n    ASC\n    DESC\n  }\n\n  input Sort {\n    field: String!\n    order: SortOrder!\n  }\n\n  type IdsResult {\n    data: [ID]\n  }\n`,\n  items:[\n  <# gqlItems.forEach(i=>{ -#>\n  #{i},\n  <#-})-#>\n    FirebaseAdmin,\n    LodashSchema,\n  ]\n})\n\nmodel.build();\n\nconst resolvers = merge({\n  JSON: GraphQLJSON,\n  JSONObject: GraphQLJSONObject,\n},\n  model.resolvers,\n);\n\nfunction checkPermissions(permissions, context) {\n  if (permissions.length > 0) {\n    if (permissions.indexOf('AUTHENTICATED') > -1) {\n      return !!context.user\n    } else if (context.user?.customClaims) {\n      return permissions.some(\n        (p) => context.user?.customClaims[p.toLowerCase()],\n      )\n    } else {\n      return false\n    }\n  } else {\n    return true\n  }\n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs: model.schema,\n  resolvers,\n  schemaDirectives: {\n    acl: AclDirective,\n  },\n  plugins: [gqlLodash({ name: 'aggregations' })],\n  context: async ({ req }) => {\n    const auth = req.headers.authorization\n    const token = auth ? auth.match(/Bearer (.*)/)[1] : false\n    let user\n    if (token) {\n      try {\n        user = await admin\n          .auth()\n          .verifyIdToken(token)\n          .then((user) => admin.auth().getUser(user.uid))\n      } catch (e) {\n        throw new AuthenticationError(e.message)\n      }\n    }\n    return {\n      user,\n      dataProvider,\n      resolvers,\n      admin,\n      firebase,\n      fetch,\n      client: firebaseClientAccount,\n      checkPermissions,\n    }\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default apolloServer.createHandler({ path: `/api/#{model.name}` });\n//https://medium.com/@tomanagle/create-a-server-side-rendering-graphql-client-with-next-js-and-apollo-client-acd397f70c64\n"}]}}