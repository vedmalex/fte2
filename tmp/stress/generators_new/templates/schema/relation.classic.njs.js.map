{"version":3,"sources":["generators_new/templates/schema/relation.classic.njs.js"],"names":["text","code","expression"],"mappings":"AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAiBA,IAChBA,+BACAA,uDACAA,mCACAA,iCACAA,mCACAA,wCACAA,mCACAA,wCACAA,2BACAA,IACAC;AAXD,IAWCA,AACAA;AAZD,IAYCA,AACAA;AAbD,IAaCA,AACAA;AAdD,IAcCA,AACAA;AAfD,IAeCA,AACAA;AAhBD,IAgBCA,AACAA;AAjBD,IAiBCA,AACAA;AAlBD,IAkBCA,AACAA;AAnBD,IAmBCA,AACAA;AApBD,IAoBCA,AACAA;AArBD,IAqBCA,AACAA;AAtBD,IAsBCA,AACAA;AAvBD,IAuBCA,AACAA;AAxBD,IAwBCA,AACAA;AAzBD,IAyBCA,AACAA;AA1BD,IA0BCA,AACAA;AA3BD,IA2BCA,AACAA;AA5BD,IA4BCA,AACAA;AA7BD,IA6BCA,AACAA;AA9BD,IA8BCA,AACAA;AA/BD,IA+BCA,AACAA;AAhCD,IAgCCA,AACAA;AAjCD,IAiCCA,AACAA;AAlCD,IAkCCA,AACAA;AAnCD,IAmCCA,AACAA;AApCD,IAoCCA,AACAA;AArCD,IAqCCA,AACAA;AAtCD,IAsCCA,AACAA;AAvCD,IAuCCA,AACAA;AAxCD,IAwCCA,AACAA;AAzCD,IAyCCA,AACAA;AA1CD,IA0CCA,AACAA;AA3CD,IA2CCA,AACAA;AA5CD,IA4CCA,AACAA;AA7CD,IA6CCA,AACAA;AA9CD,IA8CCA,AACAA;AA/CD,IA+CCA,AACAA;AAhDD,IAgDCA,AAAGD,IACHA,IACAC;AAlDD,IAkDCA,AAA6BD,IAC7BA,IACAA,OAAKE,YAAaF,QAClBA,IAAEE,qBAAsBF,UAAQE,OAAQF,mBAAiBE,cAAeF,2BAAyBE,KAAMF,OACvGA,IAAEE,mBAAoBF,UAAQE,OAAQF,mBAAiBE,cAAeF,0BAAwBE,KAAMF,MACpGA,MACAA,IACAA,IACAA,OAAKE,YAAaF,iBAAeE,YAAaF,gBAAcE,wBAAyBF,yBACrFA,IACAA,oDACAA,yBAAuBE,mBAAoBF,uBAAqBE,mBAAoBF,UACpFA,IACAA,qBAAmBE,cAAeF,MAAIE,YAAaF,KACnDA,IACAA,GAACE,YAAaF,YACdA,KAAGE,qBAAsBF,SACzBA,MAAGE,mBAAoBF,SACvBA,QACAA,kDACAA,OACAA,IACAA,uDACAA,cAAYE,mBAAoBF,kBAAgBE,mBAAoBF,UACpEA,oCAAkCE,cAAeF,sBAAoBE,cAAeF,MACpFA,IACAA,IAAEE,eAAgBF,wCAAsCE,cAAeF,uBAAqBE,cAAeF,wBAAsBE,cAAeF,MAChJA,OACAA,IACAA,iCACAA,gBACAA,4BACAA,iCACAA,sCAAoCE,sBAAuBF,YAAUE,cAAeF,OACpFA,qBACAA,0EACAA,mFAAiFE,cAAeF,cAChGA,aACAA,iBACAA,+CAA6CE,cAAeF,mBAC5DA,aACAA,2BACAA,WACAA,IACAC;AA9FD,IA8FCA,AAAMD,IACNA,MACAA,2BACAC;AAjGD,IAiGCA,AACAA;AAlGD,IAkGCA,AACAA;AAnGD,IAmGCA,AAAED,IACFA,qCAAmCE,KAAMF,kBACzCA,sCAAoCE,KAAMF,MAC1CA,uBAAqBE,KAAMF,aAAUE,qBAAsBF,SAC3DA,WAASE,KAAMF,MACfA,mBAAiBE,2DAA4DF,MAC7EA,qBAAmBE,uDAAwDF,MAC3EA,eAAaC;AA1Gd,IA0GcA,AAAgBD,OAAKC;AA1GnC,IA0GmCA,AAAYD,MAAIC;AA1GnD,IA0GmDA,AAAKD,IACvDA,SACAA,KACAC;AA7GD,IA6GCA,AACAA;AA9GD,IA8GCA,AACAA;AA/GD,IA+GCA,AACAA;AAhHD,IAgHCA,AACAA;AAjHD,IAiHCA,AAAED,IACFA,qCAAmCE,OAAQF,kBAC3CA,sCAAoCE,OAAQF,MAC5CA,uBAAqBE,OAAQF,aAAUE,qBAAsBF,SAC7DA,WAASE,KAAMF,MACfA,mBAAiBE,2DAA4DF,MAC7EA,qBAAmBE,uDAAwDF,MAC3EA,eAAaC;AAxHd,IAwHcA,AAAgBD,OAAKC;AAxHnC,IAwHmCA,AAAYD,MAAIC;AAxHnD,IAwHmDA,AAAKD,IACvDA,SACAA,KACAC;AA3HD,IA2HCA,AAAOD,IACPA,IACAC;AA7HD,IA6HCA,AACAA;AA9HD,IA8HCA,AACAA;AA/HD,IA+HCA,AAAED,IACFA,qCAAmCE,KAAMF,kBACzCA,sCAAoCE,KAAMF,MAC1CA,uBAAqBE,KAAMF,aAAUE,mBAAoBF,SACzDA,WAASE,KAAMF,MACfA,qBAAmBE,2DAA4DF,MAC/EA,mBAAiBE,uDAAwDF,MACzEA,eAAaC;AAtId,IAsIcA,AAAgBD,OAAKC;AAtInC,IAsImCA,AAAYD,MAAIC;AAtInD,IAsImDA,AAAKD,IACvDA,SACAA,KACAC;AAzID,IAyICA,AACAA;AA1ID,IA0ICA,AACAA;AA3ID,IA2ICA,AACAA;AA5ID,IA4ICA,AACAA;AA7ID,IA6ICA,AAAED,IACFA,qCAAmCE,OAAQF,kBAC3CA,sCAAoCE,OAAQF,MAC5CA,uBAAqBE,OAAQF,aAAUE,mBAAoBF,SAC3DA,WAASE,KAAMF,MACfA,qBAAmBE,2DAA4DF,MAC/EA,mBAAiBE,uDAAwDF,MACzEA,eAAaC;AApJd,IAoJcA,AAAgBD,OAAKC;AApJnC,IAoJmCA,AAAYD,MAAIC;AApJnD,IAoJmDA,AAAKD,IACvDA,SACAA,KACAC;AAvJD,IAuJCA,AAAOD,IACPA;AAxfile":"generators_new/templates/schema/relation.classic.njs.js","sourceRoot":"/Users/vedmalex/work/fte2/demo","sourcesContent":["<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"],"template":{"version":"1.0.0","segments":[{"generatedLine":1,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":2,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":3,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":4,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":5,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":6,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":7,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":8,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":9,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":10,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":11,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":12,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":13,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":14,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":15,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":16,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":17,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":18,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":19,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":20,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":21,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":22,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":23,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":24,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":25,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":26,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":27,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":28,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":29,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":30,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":31,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":32,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":33,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":34,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":35,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":36,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":37,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":38,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":39,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":40,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":41,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":42,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":43,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":44,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":45,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":46,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":47,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":48,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":49,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":50,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":51,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":52,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":53,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":54,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":55,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":56,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":57,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":58,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":59,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":60,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":61,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":62,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":63,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":64,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":65,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":66,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":67,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":68,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":69,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":70,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":71,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":72,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":73,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":74,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":75,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":76,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":77,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":78,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":79,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":80,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":81,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":82,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":83,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":84,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":85,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":86,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":87,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":88,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":89,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":90,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":91,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":92,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":93,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":94,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":95,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":96,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":97,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":98,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":99,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":100,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":101,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":102,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":103,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":104,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":105,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":106,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":107,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":108,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":109,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":110,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":111,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":112,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":113,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":114,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":115,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":116,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":117,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":118,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":119,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":120,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":121,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":122,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":123,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":124,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":125,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":126,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":127,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":128,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":129,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":130,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":131,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":132,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":133,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":134,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":135,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":136,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":137,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":138,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":139,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":140,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":141,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":142,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":143,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":144,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":145,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":146,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":147,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":148,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":149,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":150,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":151,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":152,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":153,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":154,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":155,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":156,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":157,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":158,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":159,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":160,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":161,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":162,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":163,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":164,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":165,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":166,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":167,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":168,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":169,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":170,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":171,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":172,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":173,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":174,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":175,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":176,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":177,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":178,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":179,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":180,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":181,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":182,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":183,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":184,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":185,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":186,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":187,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":188,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":189,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":190,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":191,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":192,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":193,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":194,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":195,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":196,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":197,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":198,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":199,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":200,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":201,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":202,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/templates/schema/relation.classic.njs.js"},{"generatedLine":8,"generatedColumn":4,"originalLine":1,"originalColumn":17,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":8,"generatedColumn":8,"originalLine":2,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":8,"generatedColumn":39,"originalLine":3,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":8,"generatedColumn":94,"originalLine":4,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":8,"generatedColumn":129,"originalLine":5,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":8,"generatedColumn":162,"originalLine":6,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":8,"generatedColumn":197,"originalLine":7,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":8,"generatedColumn":237,"originalLine":8,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":8,"generatedColumn":272,"originalLine":9,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":8,"generatedColumn":312,"originalLine":10,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":8,"generatedColumn":339,"originalLine":11,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":8,"generatedColumn":343,"originalLine":12,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":9,"generatedColumn":4,"originalLine":12,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":9,"generatedColumn":4,"originalLine":13,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":10,"generatedColumn":4,"originalLine":13,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":10,"generatedColumn":4,"originalLine":14,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":11,"generatedColumn":4,"originalLine":14,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":11,"generatedColumn":4,"originalLine":15,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":12,"generatedColumn":4,"originalLine":15,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":12,"generatedColumn":4,"originalLine":16,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":13,"generatedColumn":4,"originalLine":16,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":13,"generatedColumn":4,"originalLine":17,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":14,"generatedColumn":4,"originalLine":17,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":14,"generatedColumn":4,"originalLine":18,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":15,"generatedColumn":4,"originalLine":18,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":15,"generatedColumn":4,"originalLine":19,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":16,"generatedColumn":4,"originalLine":19,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":16,"generatedColumn":4,"originalLine":20,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":17,"generatedColumn":4,"originalLine":20,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":17,"generatedColumn":4,"originalLine":21,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":18,"generatedColumn":4,"originalLine":21,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":18,"generatedColumn":4,"originalLine":22,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":19,"generatedColumn":4,"originalLine":22,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":19,"generatedColumn":4,"originalLine":23,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":20,"generatedColumn":4,"originalLine":23,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":20,"generatedColumn":4,"originalLine":24,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":21,"generatedColumn":4,"originalLine":24,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":21,"generatedColumn":4,"originalLine":25,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":22,"generatedColumn":4,"originalLine":25,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":22,"generatedColumn":4,"originalLine":26,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":23,"generatedColumn":4,"originalLine":26,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":23,"generatedColumn":4,"originalLine":27,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":24,"generatedColumn":4,"originalLine":27,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":24,"generatedColumn":4,"originalLine":28,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":25,"generatedColumn":4,"originalLine":28,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":25,"generatedColumn":4,"originalLine":29,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":26,"generatedColumn":4,"originalLine":29,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":26,"generatedColumn":4,"originalLine":30,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":27,"generatedColumn":4,"originalLine":30,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":27,"generatedColumn":4,"originalLine":31,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":28,"generatedColumn":4,"originalLine":31,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":28,"generatedColumn":4,"originalLine":32,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":29,"generatedColumn":4,"originalLine":32,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":29,"generatedColumn":4,"originalLine":33,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":30,"generatedColumn":4,"originalLine":33,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":30,"generatedColumn":4,"originalLine":34,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":31,"generatedColumn":4,"originalLine":34,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":31,"generatedColumn":4,"originalLine":35,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":32,"generatedColumn":4,"originalLine":35,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":32,"generatedColumn":4,"originalLine":36,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":33,"generatedColumn":4,"originalLine":36,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":33,"generatedColumn":4,"originalLine":37,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":34,"generatedColumn":4,"originalLine":37,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":34,"generatedColumn":4,"originalLine":38,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":35,"generatedColumn":4,"originalLine":38,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":35,"generatedColumn":4,"originalLine":39,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":36,"generatedColumn":4,"originalLine":39,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":36,"generatedColumn":4,"originalLine":40,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":37,"generatedColumn":4,"originalLine":40,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":37,"generatedColumn":4,"originalLine":41,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":38,"generatedColumn":4,"originalLine":41,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":38,"generatedColumn":4,"originalLine":42,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":39,"generatedColumn":4,"originalLine":42,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":39,"generatedColumn":4,"originalLine":43,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":40,"generatedColumn":4,"originalLine":43,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":40,"generatedColumn":4,"originalLine":44,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":41,"generatedColumn":4,"originalLine":44,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":41,"generatedColumn":4,"originalLine":45,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":42,"generatedColumn":4,"originalLine":45,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":42,"generatedColumn":4,"originalLine":46,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":43,"generatedColumn":4,"originalLine":46,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":43,"generatedColumn":4,"originalLine":47,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":44,"generatedColumn":4,"originalLine":47,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":44,"generatedColumn":4,"originalLine":48,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":45,"generatedColumn":4,"originalLine":48,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":45,"generatedColumn":4,"originalLine":49,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":46,"generatedColumn":4,"originalLine":49,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":46,"generatedColumn":4,"originalLine":49,"originalColumn":4,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":46,"generatedColumn":8,"originalLine":50,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":46,"generatedColumn":12,"originalLine":51,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":4,"originalLine":51,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":4,"originalLine":51,"originalColumn":30,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":8,"originalLine":52,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":12,"originalLine":53,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":19,"originalLine":53,"originalColumn":6,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"expression","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":31,"originalLine":53,"originalColumn":19,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":39,"originalLine":54,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":43,"originalLine":54,"originalColumn":3,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"expression","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":64,"originalLine":54,"originalColumn":25,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":74,"originalLine":54,"originalColumn":33,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"expression","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":81,"originalLine":54,"originalColumn":41,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":100,"originalLine":54,"originalColumn":58,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"expression","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":114,"originalLine":54,"originalColumn":73,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":141,"originalLine":54,"originalColumn":98,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"expression","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":146,"originalLine":54,"originalColumn":104,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":153,"originalLine":55,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":157,"originalLine":55,"originalColumn":3,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"expression","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":176,"originalLine":55,"originalColumn":23,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":186,"originalLine":55,"originalColumn":31,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"expression","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":193,"originalLine":55,"originalColumn":39,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":212,"originalLine":55,"originalColumn":56,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"expression","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":226,"originalLine":55,"originalColumn":71,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":252,"originalLine":55,"originalColumn":95,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"expression","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":257,"originalLine":55,"originalColumn":101,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":263,"originalLine":56,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":269,"originalLine":57,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":273,"originalLine":58,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":277,"originalLine":59,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":284,"originalLine":59,"originalColumn":6,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"expression","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":296,"originalLine":59,"originalColumn":19,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":313,"originalLine":59,"originalColumn":34,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"expression","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":325,"originalLine":59,"originalColumn":47,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":341,"originalLine":59,"originalColumn":61,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"expression","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":365,"originalLine":59,"originalColumn":86,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":390,"originalLine":60,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":394,"originalLine":61,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":446,"originalLine":62,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":471,"originalLine":62,"originalColumn":24,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"expression","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":490,"originalLine":62,"originalColumn":44,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":513,"originalLine":62,"originalColumn":65,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"expression","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":532,"originalLine":62,"originalColumn":85,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":542,"originalLine":63,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":546,"originalLine":64,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":567,"originalLine":64,"originalColumn":20,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"expression","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":581,"originalLine":64,"originalColumn":35,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":587,"originalLine":64,"originalColumn":39,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"expression","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":599,"originalLine":64,"originalColumn":52,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":604,"originalLine":65,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":608,"originalLine":66,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":611,"originalLine":66,"originalColumn":2,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"expression","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":623,"originalLine":66,"originalColumn":15,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":635,"originalLine":67,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":640,"originalLine":67,"originalColumn":4,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"expression","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":661,"originalLine":67,"originalColumn":26,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":670,"originalLine":68,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":676,"originalLine":68,"originalColumn":4,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"expression","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":695,"originalLine":68,"originalColumn":24,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":704,"originalLine":69,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":712,"originalLine":70,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":762,"originalLine":71,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":769,"originalLine":72,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":773,"originalLine":73,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":828,"originalLine":74,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":842,"originalLine":74,"originalColumn":13,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"expression","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":861,"originalLine":74,"originalColumn":33,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":879,"originalLine":74,"originalColumn":49,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"expression","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":898,"originalLine":74,"originalColumn":69,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":908,"originalLine":75,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":944,"originalLine":75,"originalColumn":35,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"expression","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":958,"originalLine":75,"originalColumn":50,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":980,"originalLine":75,"originalColumn":70,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"expression","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":994,"originalLine":75,"originalColumn":85,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":1000,"originalLine":76,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":1004,"originalLine":77,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":1008,"originalLine":77,"originalColumn":3,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"expression","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":1023,"originalLine":77,"originalColumn":19,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":1063,"originalLine":77,"originalColumn":57,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"expression","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":1077,"originalLine":77,"originalColumn":72,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":1100,"originalLine":77,"originalColumn":93,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"expression","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":1114,"originalLine":77,"originalColumn":108,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":1138,"originalLine":77,"originalColumn":130,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"expression","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":1152,"originalLine":77,"originalColumn":145,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":1158,"originalLine":78,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":1165,"originalLine":79,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":1169,"originalLine":80,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":1202,"originalLine":81,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":1218,"originalLine":82,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":1246,"originalLine":83,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":1279,"originalLine":84,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":1317,"originalLine":84,"originalColumn":37,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"expression","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":1339,"originalLine":84,"originalColumn":60,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":1351,"originalLine":84,"originalColumn":70,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"expression","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":1365,"originalLine":84,"originalColumn":85,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":1372,"originalLine":85,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":1393,"originalLine":86,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":1467,"originalLine":87,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":1550,"originalLine":87,"originalColumn":82,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"expression","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":1564,"originalLine":87,"originalColumn":97,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":1578,"originalLine":88,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":1591,"originalLine":89,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":1608,"originalLine":90,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":1655,"originalLine":90,"originalColumn":46,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"expression","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":1669,"originalLine":90,"originalColumn":61,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":1688,"originalLine":91,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":1701,"originalLine":92,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":1728,"originalLine":93,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":1739,"originalLine":94,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":47,"generatedColumn":1743,"originalLine":95,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":48,"generatedColumn":4,"originalLine":95,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":48,"generatedColumn":4,"originalLine":95,"originalColumn":7,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":48,"generatedColumn":8,"originalLine":96,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":48,"generatedColumn":14,"originalLine":97,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":48,"generatedColumn":41,"originalLine":98,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":49,"generatedColumn":4,"originalLine":98,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":49,"generatedColumn":4,"originalLine":99,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":50,"generatedColumn":4,"originalLine":99,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":50,"generatedColumn":4,"originalLine":100,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":51,"generatedColumn":4,"originalLine":100,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":51,"generatedColumn":4,"originalLine":100,"originalColumn":3,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":51,"generatedColumn":8,"originalLine":101,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":51,"generatedColumn":45,"originalLine":101,"originalColumn":36,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"expression","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":51,"generatedColumn":50,"originalLine":101,"originalColumn":42,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":51,"generatedColumn":68,"originalLine":102,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":51,"generatedColumn":106,"originalLine":102,"originalColumn":37,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"expression","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":51,"generatedColumn":111,"originalLine":102,"originalColumn":43,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":51,"generatedColumn":117,"originalLine":103,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":51,"generatedColumn":140,"originalLine":103,"originalColumn":22,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"expression","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":51,"generatedColumn":145,"originalLine":103,"originalColumn":28,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":51,"generatedColumn":158,"originalLine":103,"originalColumn":38,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"expression","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":51,"generatedColumn":179,"originalLine":103,"originalColumn":60,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":51,"generatedColumn":188,"originalLine":104,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":51,"generatedColumn":199,"originalLine":104,"originalColumn":10,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"expression","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":51,"generatedColumn":204,"originalLine":104,"originalColumn":16,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":51,"generatedColumn":210,"originalLine":105,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":51,"generatedColumn":229,"originalLine":105,"originalColumn":18,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"expression","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":51,"generatedColumn":288,"originalLine":105,"originalColumn":78,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":51,"generatedColumn":294,"originalLine":106,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":51,"generatedColumn":315,"originalLine":106,"originalColumn":20,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"expression","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":51,"generatedColumn":370,"originalLine":106,"originalColumn":76,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":51,"generatedColumn":376,"originalLine":107,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":51,"generatedColumn":391,"originalLine":107,"originalColumn":14,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":52,"generatedColumn":4,"originalLine":107,"originalColumn":14,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":52,"generatedColumn":4,"originalLine":107,"originalColumn":30,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":52,"generatedColumn":11,"originalLine":107,"originalColumn":35,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":53,"generatedColumn":4,"originalLine":107,"originalColumn":35,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":53,"generatedColumn":4,"originalLine":107,"originalColumn":47,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":53,"generatedColumn":10,"originalLine":107,"originalColumn":51,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":54,"generatedColumn":4,"originalLine":107,"originalColumn":51,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":54,"generatedColumn":4,"originalLine":107,"originalColumn":56,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":54,"generatedColumn":8,"originalLine":108,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":54,"generatedColumn":17,"originalLine":109,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":54,"generatedColumn":22,"originalLine":110,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":55,"generatedColumn":4,"originalLine":110,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":55,"generatedColumn":4,"originalLine":111,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":56,"generatedColumn":4,"originalLine":111,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":56,"generatedColumn":4,"originalLine":112,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":57,"generatedColumn":4,"originalLine":112,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":57,"generatedColumn":4,"originalLine":113,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":58,"generatedColumn":4,"originalLine":113,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":58,"generatedColumn":4,"originalLine":114,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":59,"generatedColumn":4,"originalLine":114,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":59,"generatedColumn":4,"originalLine":114,"originalColumn":3,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":59,"generatedColumn":8,"originalLine":115,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":59,"generatedColumn":45,"originalLine":115,"originalColumn":36,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"expression","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":59,"generatedColumn":52,"originalLine":115,"originalColumn":44,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":59,"generatedColumn":70,"originalLine":116,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":59,"generatedColumn":108,"originalLine":116,"originalColumn":37,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"expression","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":59,"generatedColumn":115,"originalLine":116,"originalColumn":45,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":59,"generatedColumn":121,"originalLine":117,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":59,"generatedColumn":144,"originalLine":117,"originalColumn":22,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"expression","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":59,"generatedColumn":151,"originalLine":117,"originalColumn":30,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":59,"generatedColumn":164,"originalLine":117,"originalColumn":40,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"expression","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":59,"generatedColumn":185,"originalLine":117,"originalColumn":62,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":59,"generatedColumn":194,"originalLine":118,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":59,"generatedColumn":205,"originalLine":118,"originalColumn":10,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"expression","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":59,"generatedColumn":210,"originalLine":118,"originalColumn":16,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":59,"generatedColumn":216,"originalLine":119,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":59,"generatedColumn":235,"originalLine":119,"originalColumn":18,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"expression","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":59,"generatedColumn":294,"originalLine":119,"originalColumn":78,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":59,"generatedColumn":300,"originalLine":120,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":59,"generatedColumn":321,"originalLine":120,"originalColumn":20,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"expression","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":59,"generatedColumn":376,"originalLine":120,"originalColumn":76,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":59,"generatedColumn":382,"originalLine":121,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":59,"generatedColumn":397,"originalLine":121,"originalColumn":14,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":60,"generatedColumn":4,"originalLine":121,"originalColumn":14,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":60,"generatedColumn":4,"originalLine":121,"originalColumn":30,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":60,"generatedColumn":11,"originalLine":121,"originalColumn":35,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":61,"generatedColumn":4,"originalLine":121,"originalColumn":35,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":61,"generatedColumn":4,"originalLine":121,"originalColumn":47,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":61,"generatedColumn":10,"originalLine":121,"originalColumn":51,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":62,"generatedColumn":4,"originalLine":121,"originalColumn":51,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":62,"generatedColumn":4,"originalLine":121,"originalColumn":56,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":62,"generatedColumn":8,"originalLine":122,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":62,"generatedColumn":17,"originalLine":123,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":62,"generatedColumn":22,"originalLine":124,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":63,"generatedColumn":4,"originalLine":124,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":63,"generatedColumn":4,"originalLine":124,"originalColumn":8,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":63,"generatedColumn":8,"originalLine":125,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":63,"generatedColumn":12,"originalLine":126,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":64,"generatedColumn":4,"originalLine":126,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":64,"generatedColumn":4,"originalLine":127,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":65,"generatedColumn":4,"originalLine":127,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":65,"generatedColumn":4,"originalLine":128,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":66,"generatedColumn":4,"originalLine":128,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":66,"generatedColumn":4,"originalLine":128,"originalColumn":3,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":66,"generatedColumn":8,"originalLine":129,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":66,"generatedColumn":45,"originalLine":129,"originalColumn":36,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"expression","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":66,"generatedColumn":50,"originalLine":129,"originalColumn":42,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":66,"generatedColumn":68,"originalLine":130,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":66,"generatedColumn":106,"originalLine":130,"originalColumn":37,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"expression","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":66,"generatedColumn":111,"originalLine":130,"originalColumn":43,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":66,"generatedColumn":117,"originalLine":131,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":66,"generatedColumn":140,"originalLine":131,"originalColumn":22,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"expression","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":66,"generatedColumn":145,"originalLine":131,"originalColumn":28,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":66,"generatedColumn":158,"originalLine":131,"originalColumn":38,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"expression","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":66,"generatedColumn":177,"originalLine":131,"originalColumn":58,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":66,"generatedColumn":186,"originalLine":132,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":66,"generatedColumn":197,"originalLine":132,"originalColumn":10,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"expression","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":66,"generatedColumn":202,"originalLine":132,"originalColumn":16,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":66,"generatedColumn":208,"originalLine":133,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":66,"generatedColumn":229,"originalLine":133,"originalColumn":20,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"expression","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":66,"generatedColumn":288,"originalLine":133,"originalColumn":80,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":66,"generatedColumn":294,"originalLine":134,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":66,"generatedColumn":313,"originalLine":134,"originalColumn":18,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"expression","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":66,"generatedColumn":368,"originalLine":134,"originalColumn":74,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":66,"generatedColumn":374,"originalLine":135,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":66,"generatedColumn":389,"originalLine":135,"originalColumn":14,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":67,"generatedColumn":4,"originalLine":135,"originalColumn":14,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":67,"generatedColumn":4,"originalLine":135,"originalColumn":30,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":67,"generatedColumn":11,"originalLine":135,"originalColumn":35,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":68,"generatedColumn":4,"originalLine":135,"originalColumn":35,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":68,"generatedColumn":4,"originalLine":135,"originalColumn":47,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":68,"generatedColumn":10,"originalLine":135,"originalColumn":51,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":69,"generatedColumn":4,"originalLine":135,"originalColumn":51,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":69,"generatedColumn":4,"originalLine":135,"originalColumn":56,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":69,"generatedColumn":8,"originalLine":136,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":69,"generatedColumn":17,"originalLine":137,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":69,"generatedColumn":22,"originalLine":138,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":70,"generatedColumn":4,"originalLine":138,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":70,"generatedColumn":4,"originalLine":139,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":71,"generatedColumn":4,"originalLine":139,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":71,"generatedColumn":4,"originalLine":140,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":72,"generatedColumn":4,"originalLine":140,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":72,"generatedColumn":4,"originalLine":141,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":73,"generatedColumn":4,"originalLine":141,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":73,"generatedColumn":4,"originalLine":142,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":74,"generatedColumn":4,"originalLine":142,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":74,"generatedColumn":4,"originalLine":142,"originalColumn":3,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":74,"generatedColumn":8,"originalLine":143,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":74,"generatedColumn":45,"originalLine":143,"originalColumn":36,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"expression","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":74,"generatedColumn":52,"originalLine":143,"originalColumn":44,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":74,"generatedColumn":70,"originalLine":144,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":74,"generatedColumn":108,"originalLine":144,"originalColumn":37,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"expression","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":74,"generatedColumn":115,"originalLine":144,"originalColumn":45,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":74,"generatedColumn":121,"originalLine":145,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":74,"generatedColumn":144,"originalLine":145,"originalColumn":22,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"expression","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":74,"generatedColumn":151,"originalLine":145,"originalColumn":30,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":74,"generatedColumn":164,"originalLine":145,"originalColumn":40,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"expression","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":74,"generatedColumn":183,"originalLine":145,"originalColumn":60,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":74,"generatedColumn":192,"originalLine":146,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":74,"generatedColumn":203,"originalLine":146,"originalColumn":10,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"expression","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":74,"generatedColumn":208,"originalLine":146,"originalColumn":16,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":74,"generatedColumn":214,"originalLine":147,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":74,"generatedColumn":235,"originalLine":147,"originalColumn":20,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"expression","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":74,"generatedColumn":294,"originalLine":147,"originalColumn":80,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":74,"generatedColumn":300,"originalLine":148,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":74,"generatedColumn":319,"originalLine":148,"originalColumn":18,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"expression","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":74,"generatedColumn":374,"originalLine":148,"originalColumn":74,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":74,"generatedColumn":380,"originalLine":149,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":74,"generatedColumn":395,"originalLine":149,"originalColumn":14,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":75,"generatedColumn":4,"originalLine":149,"originalColumn":14,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":75,"generatedColumn":4,"originalLine":149,"originalColumn":30,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":75,"generatedColumn":11,"originalLine":149,"originalColumn":35,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":76,"generatedColumn":4,"originalLine":149,"originalColumn":35,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":76,"generatedColumn":4,"originalLine":149,"originalColumn":47,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":76,"generatedColumn":10,"originalLine":149,"originalColumn":51,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":77,"generatedColumn":4,"originalLine":149,"originalColumn":51,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":77,"generatedColumn":4,"originalLine":149,"originalColumn":56,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":77,"generatedColumn":8,"originalLine":150,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":77,"generatedColumn":17,"originalLine":151,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":77,"generatedColumn":22,"originalLine":152,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":78,"generatedColumn":4,"originalLine":152,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"code","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":78,"generatedColumn":4,"originalLine":152,"originalColumn":8,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"},{"generatedLine":78,"generatedColumn":8,"originalLine":153,"originalColumn":1,"source":"generators_new/templates/schema/relation.classic.njs.js","name":"text","content":"<#@ noContent #>\nvar path = require('path');\nvar utils = require('@grainjs/meta-codegen').utils;\nvar mongoose = global.mongoose;\nvar Schema = mongoose.Schema;\nvar ObjectId = Schema.ObjectId;\nvar StringRef = Schema.Types.String;\nvar Mixed = Schema.Types.Mixed;\nvar Step = require('@grainjs/step');\nvar fs = require('fs');\n\n<#\nvar notGenerateClass = context.source.embedded || context.dest.embedded;\nfunction decapitalize (str){\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\nvar dot = context.name.indexOf('.');\nvar schema = ((dot>0)? context.name.slice(dot+1):context.name);\nvar schemaName = decapitalize(schema) +'Def';\nvar resCollection = context.namespace+'.'+schema;\nvar dst = ('string' !== typeof(context.dest.thingType)) ? context.dest.thingType.thingType : context.dest.thingType ;\nvar src = ('string' !== typeof(context.source.thingType)) ? context.source.thingType.thingType : context.source.thingType ;\nvar sType = (context.source.keyField != undefined && context.source.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\nvar dType = (context.dest.keyField != undefined && context.dest.keyField !== '_id') ? \"StringRef\" : \"ObjectId\";\n\nconst relKind = `${context.source.cardinality}${context.dest.cardinality}`\n\nvar srcIndexKind = 'index'\nvar dstIndexKind = 'index'\nswitch(relKind){\n  case '11': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'unique'\n  } break;\n  case '**':{\n    srcIndexKind = 'index'\n    dstIndexKind = 'index'\n  } break;\n  case '1*': {\n    srcIndexKind = 'unique'\n    dstIndexKind = 'index'\n  } break;\n  case '*1': {\n    srcIndexKind = 'index'\n    dstIndexKind = 'unique'\n  } break;\n}\n\n-#>\n\n<#- if(!notGenerateClass){-#>\n\nvar $#{schemaName} = {\n '#{context.source.name}':{type:#{sType}, required:true, #{srcIndexKind}:true, sparse:true, ref:'#{src}'},\n '#{context.dest.name}':{type:#{dType}, required:true, #{dstIndexKind}:true,sparse:true, ref:'#{dst}'}\n};\n\n\nvar _#{schemaName} = new Schema($#{schemaName},{collection:'#{context.collectionType}', autoIndex:false});\n\nif(!global.SchemaCache) global.SchemaCache = {};\nif(!global.SchemaCache.#{context.namespace}) global.SchemaCache.#{context.namespace} = {};\n\nglobal.SchemaCache.#{context.name} = _#{schemaName};\n\n_#{schemaName}.index({\n  '#{context.source.name}': 1,\n  \"#{context.dest.name}\": 1\n}, {\n  unique: true, /*dropDups:true,*/ sparse:true\n});\n\nglobal.RegisterSchema.jobs.push(function(mongoose){\n  if(typeof(#{context.namespace})=='undefined') #{context.namespace} = {};\n  var alreadyOverriden = !!global.#{context.name} && mongoose.model('#{context.name}')\n\n  #{resCollection} = alreadyOverriden ? mongoose.model('#{context.name}') : mongoose.model('#{context.name}', global.SchemaCache.#{context.name});\n});\n\nglobal.EnsureIndex.jobs.push(\n  (dbPool)=>\n    function(err, data){\n      var next = this.slot();\n      var $collection = dbPool.get('#{context.locationType}').model('#{context.name}');\n      if (!err) {\n        if(!global.EnsureIndex.dropDone[$collection.collection.name]){\n          $collection.collection.dropIndexes(global.EnsureIndex.go($collection, '#{context.name}', next));\n        }\n        else{\n          global.EnsureIndex.go($collection,'#{context.name}', next)(null);\n        }\n      } else next(err);\n    });\n\n<#-}#>\n/*\nvar reqSuccess = false;\n<#-\n  var manySrc = context.source.cardinality != '1'\n#>\nreqSuccess = global.RESOLVESCHEMA('#{dst}', __dirname);\nif(reqSuccess && global.SchemaCache.#{dst}){\n  global.SchemaCache.#{dst}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.source.name}\", {\n    ref:'#{src}',\n    localField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    foreignField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manySrc){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n\n<#-\n  var manyDst = context.dest.cardinality != '1';\n#>\nreqSuccess = global.RESOLVESCHEMA('#{src}', __dirname);\nif(reqSuccess && global.SchemaCache.#{src}){\n  global.SchemaCache.#{src}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField: '_id' }',\n    localField: '#{context.dest.keyField ? context.dest.keyField : '_id'}',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#- var sci, child;\nvar len = context.dest?.childs?.length ?? 0;\nfor (sci = 0; sci< len; sci++){\n  child = context.dest.childs[sci];\n#>\nreqSuccess = global.RESOLVESCHEMA('#{child}', __dirname);\nif(reqSuccess && global.SchemaCache.#{child}){\n  global.SchemaCache.#{child}.virtual(\"#{context.dest.name}\", {\n    ref:'#{dst}',\n    foreignField: '#{context.source.keyField ? context.source.keyField : '_id'}',\n    localField: '#{context.dest.keyField ? context.dest.keyField: '_id' }',\n    justOne: <#if(manyDst){#>false<#} else {#>true<#}#>\n  });\n}\n<#-}-#>\n*/"}]}}