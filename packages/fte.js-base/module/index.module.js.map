{"version":3,"file":"index.module.js","sources":["../src/utils/applyDeindent.ts","../src/utils/applyIndent.ts","../src/utils/escapeIt.ts","../src/types/DefaultFactoryOptions.ts","../src/utils/merge.ts","../src/TemplateBase.ts","../src/TemplateFactoryBase.ts"],"sourcesContent":["export function applyDeindent(str: string, numChars: number | string): string\nexport function applyDeindent(str: Array<string>, numChars: number | string): Array<string>\nexport function applyDeindent(str: string | Array<string>, numChars: number | string): string | Array<string> {\n  if (!str) return str\n  let lines = Array.isArray(str) ? [...str] : String(str).split('\\n')\n  // по первой строке\n  if (typeof numChars == 'string') {\n    numChars = numChars.length\n  }\n\n  if (numChars != 0) {\n    let i = 0\n    do {\n      if (lines[i].trim().length !== 0) break\n      i += 1\n      if (i >= lines.length - 1) break\n    } while (true)\n    if (i < lines.length) {\n      numChars = lines[i].length - lines[i].trimStart().length\n    }\n  }\n  if (numChars > 0) {\n    for (let i = 0; i < lines.length; i++) {\n      let spaceCount = 0\n      for (let j = 0; j < lines[i].length; j++) {\n        if (lines[i][j] === ' ') {\n          spaceCount++\n        } else {\n          break\n        }\n      }\n      if (spaceCount > 0) {\n        if (spaceCount <= numChars) {\n          lines[i] = lines[i].trimStart()\n        } else {\n          lines[i] = lines[i].substring(numChars)\n        }\n      }\n    }\n  }\n  return Array.isArray(str) ? lines : lines.join('\\n')\n}\n","export function applyIndent(str: string, _indent: number | string): string\nexport function applyIndent(str: Array<string>, _indent: number | string): Array<string>\nexport function applyIndent(str: string | Array<string>, _indent: number | string): string | Array<string> {\n  let lines = Array.isArray(str) ? [...str] : String(str).split('\\n')\n  var indent = ''\n  if (typeof _indent == 'number' && _indent > 0) {\n    var res = ''\n    for (var i = 0; i < _indent; i++) {\n      res += ' '\n    }\n    indent = res\n  }\n  if (typeof _indent == 'string' && _indent.length > 0) {\n    indent = _indent\n  }\n  if (indent && lines) {\n    let res = lines.map(s => indent + s)\n    return Array.isArray(str) ? res : res.join('\\n')\n  } else {\n    return lines\n  }\n}\n","var escapeExp = /[&<>\"]/,\n  escapeAmpExp = /&/g,\n  escapeLtExp = /</g,\n  escapeGtExp = />/g,\n  escapeQuotExp = /\"/g\n\nexport function escapeIt(text: string): string {\n  if (text == null) {\n    return ''\n  }\n\n  var result = text.toString()\n  if (!escapeExp.test(result)) {\n    return result\n  }\n\n  return result\n    .replace(escapeAmpExp, '&amp;')\n    .replace(escapeLtExp, '&lt;')\n    .replace(escapeGtExp, '&gt;')\n    .replace(escapeQuotExp, '&quot;')\n}\n","import { escapeIt } from '../utils/escapeIt'\nimport { applyIndent } from '../utils/applyIndent'\nimport { applyDeindent } from '../utils/applyDeindent'\nimport { DefaultFactoryOption } from './DefaultFactoryOption'\n\nexport const DefaultFactoryOptions = {\n  applyIndent,\n  escapeIt,\n  applyDeindent,\n} satisfies DefaultFactoryOption\n","export function merge(a: object, b: object, property: string) {\n  let prop\n  const aProp = a[property]\n  if (aProp !== undefined) {\n    let bProp = b[property]\n    if (bProp === undefined) {\n      bProp = b[property] = {}\n    }\n    const propList = Object.keys(aProp)\n    for (let i = 0, pLen = propList.length; i < pLen; i++) {\n      prop = propList[i]\n      if (!(prop in bProp)) {\n        bProp[prop] = aProp[prop]\n      }\n    }\n  }\n}\n","import { merge } from './utils/merge'\nimport { TemplateFactoryBase } from './TemplateFactoryBase'\nimport { BlocksHash } from './types/BlocksHash'\nimport { TemplateConfig } from './types/TemplateConfig'\nimport { BlockRunFunction } from './types/BlockRunFunction'\nimport { HashTypeGeneric } from './types/HashTypeGeneric'\nimport { DefaultFactoryOption } from './types/DefaultFactoryOption'\n\nexport class TemplateBase<OPTIONS extends DefaultFactoryOption = DefaultFactoryOption> {\n  public parent?: string\n  public blocks?: BlocksHash\n  public slots?: BlocksHash\n  public aliases: HashTypeGeneric<string>\n  public alias: Array<string>\n  public dependency?: HashTypeGeneric<boolean>\n  public absPath?: string\n  public name?: string\n  public chunks!: string\n  public srcCode: string\n  public script!: BlockRunFunction\n  public factory!: TemplateFactoryBase<OPTIONS>\n\n  constructor(config: TemplateConfig<OPTIONS>) {\n    if (!(this instanceof TemplateBase)) {\n      throw new Error('constructor is not a function')\n    }\n    this.srcCode = config.source ? config.source.toString() : ''\n    this.name = config.name\n    this.absPath = config.absPath\n    if (config.script) this.script = config.script\n    this.blocks = config.blocks\n    this.slots = config.slots\n    this.dependency = config.dependency\n    this.parent = config.parent ? config.parent.trim() : ''\n    this.aliases = config.aliases || {}\n    this.alias = config.alias || [config.name!]\n    if (config.factory) this.factory = config.factory\n    if (config.compile) {\n      this.compile = config.compile\n    }\n  }\n\n  public mergeParent(src: TemplateBase<OPTIONS>) {\n    if (src) {\n      merge(src, this, 'blocks')\n      merge(src, this, 'aliases')\n      merge(src, this, 'slots')\n    }\n  }\n\n  public compile() {\n    throw new Error('abstract method call')\n  }\n}\n","import { TemplateBase } from './TemplateBase'\n\nimport { BlockRunFunction } from './types/BlockRunFunction'\nimport { FactoryConfig } from './types/FactoryConfig'\nimport { DefaultFactoryOptions } from './types/DefaultFactoryOptions'\nimport { BlockContent } from './types/BlockContent'\nimport { ContentFunction } from './types/ContentFunction'\nimport { DefaultFactoryOption } from './types/DefaultFactoryOption'\nimport { HashTypeGeneric } from './types/HashTypeGeneric'\nimport { PartialFunction } from './types/PartialFunction'\nimport { SlotFunction } from './types/SlotFunction'\nimport { SlotsHash } from './types/SlotsHash'\nimport { RunPartialContext } from './types/RunPartialContext'\n\n/**\n * template factory -- it instantiate the templates\n */\n\nexport abstract class TemplateFactoryBase<OPTIONS extends DefaultFactoryOption = DefaultFactoryOption> {\n  public ext: Array<string> = []\n  public cache: HashTypeGeneric<TemplateBase<OPTIONS>>\n  public root?: Array<string> = undefined\n  public options: OPTIONS\n  public watch = false\n\n  constructor(config?: Partial<FactoryConfig<OPTIONS>>) {\n    if (config?.options) {\n      this.options = { ...config.options, ...DefaultFactoryOptions }\n    } else {\n      this.options = { ...DefaultFactoryOptions } as OPTIONS\n    }\n    this.watch = config?.watch ?? false\n\n    // TODO: сделать MACRO\n    if (!global.browser) {\n      // this only need in server-side code with server load code\n      this.root = config\n        ? config.root\n          ? Array.isArray(config.root)\n            ? config.root\n            : [config.root]\n          : [process.cwd()]\n        : [process.cwd()]\n\n      if (config && config.ext) {\n        if (Array.isArray(config.ext)) {\n          this.ext = config.ext\n        } else {\n          this.ext = [config.ext]\n        }\n      }\n    }\n    this.cache = {}\n    if (config && config.preload) {\n      this.preload()\n    }\n  }\n  public register(tpl: TemplateBase<OPTIONS>, fileName?: string) {\n    if (!(tpl.name! in this.cache)) {\n      this.cache[tpl.name!] = tpl\n      if (tpl.alias && Array.isArray(tpl.alias)) {\n        tpl.alias\n          .filter(a => a !== tpl.name)\n          .forEach(a => {\n            this.cache[a] = tpl\n          })\n      }\n      this.cache[tpl.absPath!] = tpl\n    }\n    return tpl\n  }\n\n  public ensure(fileName: string, absPath?: boolean): TemplateBase<OPTIONS> {\n    if (!(fileName in this.cache)) {\n      return this.load(fileName, absPath)\n    }\n    return this.cache[fileName]\n  }\n  public blockContent(tpl: TemplateBase<OPTIONS>, slots?: SlotsHash): BlockContent<OPTIONS> {\n    const scripts: Array<BlockRunFunction> = []\n    const self = this\n    const bc: BlockContent<OPTIONS> = {\n      slots: slots ? slots : {},\n      slot(name: string, content: string | Array<string>): void | string {\n        if (name) {\n          if (!this.slots.hasOwnProperty(name)) {\n            this.slots[name] = []\n          }\n          if (content) {\n            if (Array.isArray(content)) {\n              content.forEach(c => this.slot(name, c))\n            } else {\n              if (this.slots[name].indexOf(content) === -1) {\n                this.slots[name].push(content)\n              }\n            }\n          } else {\n            return `#{partial(context['${name}'] || [], '${name}')}`\n          }\n        }\n      },\n      partial<T>(obj: T, name: string): string {\n        if (tpl.aliases.hasOwnProperty(name)) {\n          return self.runPartial({\n            context: obj,\n            name: tpl.aliases[name],\n            absPath: true,\n            slots: this.slots,\n            options: this.options,\n          })\n        } else {\n          return self.runPartial({\n            context: obj,\n            name,\n            absPath: false,\n            slots: this.slots,\n            options: this.options,\n          })\n        }\n      },\n      content<T>(name: string, context: T, content: ContentFunction, partial: PartialFunction, slot: SlotFunction) {\n        if (name) {\n          return tpl.blocks && tpl.blocks.hasOwnProperty(name)\n            ? tpl.blocks[name](context, content, partial, slot, self.options)\n            : ''\n        } else {\n          const fn = scripts.pop()\n          if (typeof fn === 'function') {\n            return fn(context, content, partial, slot, self.options)\n          } else {\n            return ''\n          }\n        }\n      },\n      run<T>(\n        $context: T,\n        $content: ContentFunction,\n        $partial: PartialFunction,\n      ): string | Array<{ name: string; content: string }> {\n        function go(\n          this: TemplateBase<OPTIONS>,\n          context,\n          content,\n          partial,\n          slot,\n        ): string | Array<{ name: string; content: string }> {\n          const $this = this as TemplateBase<OPTIONS>\n          if ($this.parent) {\n            const parent = self.ensure($this.parent)\n            // tpl.mergeParent(parent); moved to compile.\n            scripts.push($this.script)\n            return go.call(parent, context, content, partial, slot)\n          } else {\n            try {\n              return $this.script(context, content, partial, slot, self.options)\n            } catch (e) {\n              throw new Error(\n                `template ${$this.name} failed to execute with error\n                  '${(e as Error).message}\n                  ${(e as Error).stack}'`,\n              )\n            }\n          }\n        }\n        return go.call(tpl, $context, $content, $partial, this.slot)\n      },\n      options: { ...this.options },\n    }\n    bc.content = bc.content.bind(bc)\n    bc.partial = bc.partial.bind(bc)\n    bc.run = bc.run.bind(bc)\n    bc.slot = bc.slot.bind(bc)\n    return bc\n  }\n\n  public preload(fileName?: string) {\n    throw new Error('abstract method call')\n  }\n\n  public load(fileName: string, absPath?: boolean): TemplateBase<OPTIONS> {\n    throw new Error('abstract method call')\n  }\n\n  public run<T>(context: T, name: string): string | Array<{ name: string; content: string }> {\n    throw new Error('abstract method call')\n  }\n\n  public runPartial<CONTEXT>(_: RunPartialContext<CONTEXT, OPTIONS>): string {\n    throw new Error('abstract method call')\n  }\n}\n"],"names":[],"mappings":"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"}