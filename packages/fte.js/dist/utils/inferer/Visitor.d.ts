import { Accessibility, Argument, ArrayExpression, ArrayPattern, ArrowFunctionExpression, AssignmentExpression, AssignmentPattern, AssignmentPatternProperty, AssignmentProperty, AwaitExpression, BigIntLiteral, BinaryExpression, BindingIdentifier, BlockStatement, BooleanLiteral, BreakStatement, CallExpression, CatchClause, Class, ClassDeclaration, ClassExpression, ClassMember, ClassMethod, ClassProperty, ComputedPropName, ConditionalExpression, Constructor, ContinueStatement, DebuggerStatement, Declaration, Decorator, DefaultDecl, DoWhileStatement, EmptyStatement, ExportAllDeclaration, ExportDeclaration, ExportDefaultDeclaration, ExportDefaultExpression, ExportDefaultSpecifier, ExportNamedDeclaration, ExportNamespaceSpecifier, ExportSpecifier, ExprOrSpread, Expression, ExpressionStatement, Fn, ForInStatement, ForOfStatement, ForStatement, FunctionDeclaration, FunctionExpression, GetterProperty, Identifier, IfStatement, Import, ImportDeclaration, ImportDefaultSpecifier, ImportNamespaceSpecifier, ImportSpecifier, JSXAttrValue, JSXAttribute, JSXAttributeName, JSXAttributeOrSpread, JSXClosingElement, JSXClosingFragment, JSXElement, JSXElementChild, JSXElementName, JSXEmptyExpression, JSXExpressionContainer, JSXFragment, JSXMemberExpression, JSXNamespacedName, JSXObject, JSXOpeningElement, JSXOpeningFragment, JSXSpreadChild, JSXText, KeyValuePatternProperty, KeyValueProperty, LabeledStatement, MemberExpression, MetaProperty, MethodProperty, Module, ModuleDeclaration, ModuleExportName, ModuleItem, NamedExportSpecifier, NamedImportSpecifier, NewExpression, NullLiteral, NumericLiteral, ObjectExpression, ObjectPattern, ObjectPatternProperty, OptionalChainingCall, OptionalChainingExpression, Param, ParenthesisExpression, Pattern, PrivateMethod, PrivateName, PrivateProperty, Program, Property, PropertyName, RegExpLiteral, RestElement, ReturnStatement, Script, SequenceExpression, SetterProperty, SpreadElement, Statement, StaticBlock, StringLiteral, Super, SuperPropExpression, SwitchCase, SwitchStatement, TaggedTemplateExpression, TemplateLiteral, ThisExpression, ThrowStatement, TryStatement, TsAsExpression, TsCallSignatureDeclaration, TsConstAssertion, TsConstructSignatureDeclaration, TsEntityName, TsEnumDeclaration, TsEnumMember, TsEnumMemberId, TsExportAssignment, TsExpressionWithTypeArguments, TsExternalModuleReference, TsFnParameter, TsGetterSignature, TsImportEqualsDeclaration, TsIndexSignature, TsInstantiation, TsInterfaceBody, TsInterfaceDeclaration, TsMethodSignature, TsModuleBlock, TsModuleDeclaration, TsModuleName, TsModuleReference, TsNamespaceBody, TsNamespaceDeclaration, TsNamespaceExportDeclaration, TsNonNullExpression, TsParameterProperty, TsParameterPropertyParameter, TsPropertySignature, TsQualifiedName, TsSetterSignature, TsType, TsTypeAliasDeclaration, TsTypeAnnotation, TsTypeAssertion, TsTypeElement, TsTypeParameter, TsTypeParameterDeclaration, TsTypeParameterInstantiation, UnaryExpression, UpdateExpression, VariableDeclaration, VariableDeclarator, WhileStatement, WithStatement, YieldExpression, Node, HasSpan, TsKeywordType, TsThisType, TsFnOrConstructorType, TsTypeReference, TsTypeQuery, TsTypeLiteral, TsArrayType, TsTupleType, TsOptionalType, TsRestType, TsUnionOrIntersectionType, TsConditionalType, TsInferType, TsImportType, TsIndexedAccessType, TsLiteralType, TsMappedType, TsParenthesizedType, TsTypeOperator, TsTypePredicate, TsUnionType, TsIntersectionType, TsFunctionType, TsConstructorType, Invalid, Literal } from '@swc/core';
import Visitor from '@swc/core/Visitor';
export declare function isNode(node: unknown): node is Node;
export declare function isHasSpan(node: unknown): node is HasSpan;
export declare class BaseVistor extends Visitor {
    handleProgram?: Visitor['visitProgram'];
    handleModule?: Visitor['visitModule'];
    handleScript?: Visitor['visitScript'];
    handleModuleItems?: Visitor['visitModuleItems'];
    handleModuleItem?: Visitor['visitModuleItem'];
    handleModuleDeclaration?: Visitor['visitModuleDeclaration'];
    handleTsNamespaceExportDeclaration?: Visitor['visitTsNamespaceExportDeclaration'];
    handleTsExportAssignment?: Visitor['visitTsExportAssignment'];
    handleTsImportEqualsDeclaration?: Visitor['visitTsImportEqualsDeclaration'];
    handleTsModuleReference?: Visitor['visitTsModuleReference'];
    handleTsExternalModuleReference?: Visitor['visitTsExternalModuleReference'];
    handleExportAllDeclaration?: Visitor['visitExportAllDeclaration'];
    handleExportDefaultExpression?: Visitor['visitExportDefaultExpression'];
    handleExportNamedDeclaration?: Visitor['visitExportNamedDeclaration'];
    handleExportSpecifiers?: Visitor['visitExportSpecifiers'];
    handleExportSpecifier?: Visitor['visitExportSpecifier'];
    handleNamedExportSpecifier?: Visitor['visitNamedExportSpecifier'];
    handleModuleExportName?: Visitor['visitModuleExportName'];
    handleExportNamespaceSpecifier?: Visitor['visitExportNamespaceSpecifier'];
    handleExportDefaultSpecifier?: Visitor['visitExportDefaultSpecifier'];
    handleOptionalStringLiteral?: Visitor['visitOptionalStringLiteral'];
    handleExportDefaultDeclaration?: Visitor['visitExportDefaultDeclaration'];
    handleDefaultDeclaration?: Visitor['visitDefaultDeclaration'];
    handleFunctionExpression?: Visitor['visitFunctionExpression'];
    handleClassExpression?: Visitor['visitClassExpression'];
    handleExportDeclaration?: Visitor['visitExportDeclaration'];
    handleArrayExpression?: Visitor['visitArrayExpression'];
    handleArrayElement?: Visitor['visitArrayElement'];
    handleExprOrSpread?: Visitor['visitExprOrSpread'];
    handleExprOrSpreads?: Visitor['visitExprOrSpreads'];
    handleSpreadElement?: Visitor['visitSpreadElement'];
    handleOptionalExpression?: Visitor['visitOptionalExpression'];
    handleArrowFunctionExpression?: Visitor['visitArrowFunctionExpression'];
    handleArrowBody?: Visitor['visitArrowBody'];
    handleBlockStatement?: Visitor['visitBlockStatement'];
    handleStatements?: Visitor['visitStatements'];
    handleStatement?: Visitor['visitStatement'];
    handleSwitchStatement?: Visitor['visitSwitchStatement'];
    handleSwitchCases?: Visitor['visitSwitchCases'];
    handleSwitchCase?: Visitor['visitSwitchCase'];
    handleIfStatement?: Visitor['visitIfStatement'];
    handleOptionalStatement?: Visitor['visitOptionalStatement'];
    handleBreakStatement?: Visitor['visitBreakStatement'];
    handleWhileStatement?: Visitor['visitWhileStatement'];
    handleTryStatement?: Visitor['visitTryStatement'];
    handleCatchClause?: Visitor['visitCatchClause'];
    handleThrowStatement?: Visitor['visitThrowStatement'];
    handleReturnStatement?: Visitor['visitReturnStatement'];
    handleLabeledStatement?: Visitor['visitLabeledStatement'];
    handleForStatement?: Visitor['visitForStatement'];
    handleForOfStatement?: Visitor['visitForOfStatement'];
    handleForInStatement?: Visitor['visitForInStatement'];
    handleEmptyStatement?: Visitor['visitEmptyStatement'];
    handleDoWhileStatement?: Visitor['visitDoWhileStatement'];
    handleDebuggerStatement?: Visitor['visitDebuggerStatement'];
    handleWithStatement?: Visitor['visitWithStatement'];
    handleDeclaration?: Visitor['visitDeclaration'];
    handleVariableDeclaration?: Visitor['visitVariableDeclaration'];
    handleVariableDeclarators?: Visitor['visitVariableDeclarators'];
    handleVariableDeclarator?: Visitor['visitVariableDeclarator'];
    handleTsTypeAliasDeclaration?: Visitor['visitTsTypeAliasDeclaration'];
    handleTsModuleDeclaration?: Visitor['visitTsModuleDeclaration'];
    handleTsModuleName?: Visitor['visitTsModuleName'];
    handleTsNamespaceBody?: Visitor['visitTsNamespaceBody'];
    handleTsNamespaceDeclaration?: Visitor['visitTsNamespaceDeclaration'];
    handleTsModuleBlock?: Visitor['visitTsModuleBlock'];
    handleTsInterfaceDeclaration?: Visitor['visitTsInterfaceDeclaration'];
    handleTsInterfaceBody?: Visitor['visitTsInterfaceBody'];
    handleTsTypeElements?: Visitor['visitTsTypeElements'];
    handleTsTypeElement?: Visitor['visitTsTypeElement'];
    handleTsCallSignatureDeclaration?: Visitor['visitTsCallSignatureDeclaration'];
    handleTsConstructSignatureDeclaration?: Visitor['visitTsConstructSignatureDeclaration'];
    handleTsPropertySignature?: Visitor['visitTsPropertySignature'];
    handleTsGetterSignature?: Visitor['visitTsGetterSignature'];
    handleTsSetterSignature?: Visitor['visitTsSetterSignature'];
    handleTsMethodSignature?: Visitor['visitTsMethodSignature'];
    handleTsEnumDeclaration?: Visitor['visitTsEnumDeclaration'];
    handleTsEnumMembers?: Visitor['visitTsEnumMembers'];
    handleTsEnumMember?: Visitor['visitTsEnumMember'];
    handleTsEnumMemberId?: Visitor['visitTsEnumMemberId'];
    handleFunctionDeclaration?: Visitor['visitFunctionDeclaration'];
    handleClassDeclaration?: Visitor['visitClassDeclaration'];
    handleClassBody?: Visitor['visitClassBody'];
    handleClassMember?: Visitor['visitClassMember'];
    handleTsIndexSignature?: Visitor['visitTsIndexSignature'];
    handleTsFnParameters?: Visitor['visitTsFnParameters'];
    handleTsFnParameter?: Visitor['visitTsFnParameter'];
    handlePrivateProperty?: Visitor['visitPrivateProperty'];
    handlePrivateMethod?: Visitor['visitPrivateMethod'];
    handlePrivateName?: Visitor['visitPrivateName'];
    handleConstructor?: Visitor['visitConstructor'];
    handleConstructorParameters?: Visitor['visitConstructorParameters'];
    handleConstructorParameter?: Visitor['visitConstructorParameter'];
    handleStaticBlock?: Visitor['visitStaticBlock'];
    handleTsParameterProperty?: Visitor['visitTsParameterProperty'];
    handleTsParameterPropertyParameter?: Visitor['visitTsParameterPropertyParameter'];
    handlePropertyName?: Visitor['visitPropertyName'];
    handleAccessibility?: Visitor['visitAccessibility'];
    handleClassProperty?: Visitor['visitClassProperty'];
    handleClassMethod?: Visitor['visitClassMethod'];
    handleComputedPropertyKey?: Visitor['visitComputedPropertyKey'];
    handleClass?: Visitor['visitClass'];
    handleFunction?: Visitor['visitFunction'];
    handleTsExpressionsWithTypeArguments?: Visitor['visitTsExpressionsWithTypeArguments'];
    handleTsExpressionWithTypeArguments?: Visitor['visitTsExpressionWithTypeArguments'];
    handleTsTypeParameterInstantiation?: Visitor['visitTsTypeParameterInstantiation'];
    handleTsTypes?: Visitor['visitTsTypes'];
    handleTsEntityName?: Visitor['visitTsEntityName'];
    handleTsQualifiedName?: Visitor['visitTsQualifiedName'];
    handleDecorators?: Visitor['visitDecorators'];
    handleDecorator?: Visitor['visitDecorator'];
    handleExpressionStatement?: Visitor['visitExpressionStatement'];
    handleContinueStatement?: Visitor['visitContinueStatement'];
    handleExpression?: Visitor['visitExpression'];
    handleOptionalChainingExpression?: Visitor['visitOptionalChainingExpression'];
    handleMemberExpressionOrOptionalChainingCall?: Visitor['visitMemberExpressionOrOptionalChainingCall'];
    handleOptionalChainingCall?: Visitor['visitOptionalChainingCall'];
    handleAssignmentExpression?: Visitor['visitAssignmentExpression'];
    handlePatternOrExpression?: Visitor['visitPatternOrExpression'];
    handleYieldExpression?: Visitor['visitYieldExpression'];
    handleUpdateExpression?: Visitor['visitUpdateExpression'];
    handleUnaryExpression?: Visitor['visitUnaryExpression'];
    handleTsTypeAssertion?: Visitor['visitTsTypeAssertion'];
    handleTsConstAssertion?: Visitor['visitTsConstAssertion'];
    handleTsInstantiation?: Visitor['visitTsInstantiation'];
    handleTsNonNullExpression?: Visitor['visitTsNonNullExpression'];
    handleTsAsExpression?: Visitor['visitTsAsExpression'];
    handleThisExpression?: Visitor['visitThisExpression'];
    handleTemplateLiteral?: Visitor['visitTemplateLiteral'];
    handleParameters?: Visitor['visitParameters'];
    handleParameter?: Visitor['visitParameter'];
    handleTaggedTemplateExpression?: Visitor['visitTaggedTemplateExpression'];
    handleSequenceExpression?: Visitor['visitSequenceExpression'];
    handleRegExpLiteral?: Visitor['visitRegExpLiteral'];
    handleParenthesisExpression?: Visitor['visitParenthesisExpression'];
    handleObjectExpression?: Visitor['visitObjectExpression'];
    handleObjectProperties?: Visitor['visitObjectProperties'];
    handleObjectProperty?: Visitor['visitObjectProperty'];
    handleProperty?: Visitor['visitProperty'];
    handleSetterProperty?: Visitor['visitSetterProperty'];
    handleMethodProperty?: Visitor['visitMethodProperty'];
    handleKeyValueProperty?: Visitor['visitKeyValueProperty'];
    handleGetterProperty?: Visitor['visitGetterProperty'];
    handleAssignmentProperty?: Visitor['visitAssignmentProperty'];
    handleNullLiteral?: Visitor['visitNullLiteral'];
    handleNewExpression?: Visitor['visitNewExpression'];
    handleTsTypeArguments?: Visitor['visitTsTypeArguments'];
    handleArguments?: Visitor['visitArguments'];
    handleArgument?: Visitor['visitArgument'];
    handleMetaProperty?: Visitor['visitMetaProperty'];
    handleMemberExpression?: Visitor['visitMemberExpression'];
    handleSuperPropExpression?: Visitor['visitSuperPropExpression'];
    handleCallee?: Visitor['visitCallee'];
    handleJSXText?: Visitor['visitJSXText'];
    handleJSXNamespacedName?: Visitor['visitJSXNamespacedName'];
    handleJSXMemberExpression?: Visitor['visitJSXMemberExpression'];
    handleJSXObject?: Visitor['visitJSXObject'];
    handleJSXFragment?: Visitor['visitJSXFragment'];
    handleJSXClosingFragment?: Visitor['visitJSXClosingFragment'];
    handleJSXElementChildren?: Visitor['visitJSXElementChildren'];
    handleJSXElementChild?: Visitor['visitJSXElementChild'];
    handleJSXExpressionContainer?: Visitor['visitJSXExpressionContainer'];
    handleJSXSpreadChild?: Visitor['visitJSXSpreadChild'];
    handleJSXOpeningFragment?: Visitor['visitJSXOpeningFragment'];
    handleJSXEmptyExpression?: Visitor['visitJSXEmptyExpression'];
    handleJSXElement?: Visitor['visitJSXElement'];
    handleJSXClosingElement?: Visitor['visitJSXClosingElement'];
    handleJSXElementName?: Visitor['visitJSXElementName'];
    handleJSXOpeningElement?: Visitor['visitJSXOpeningElement'];
    handleJSXAttributes?: Visitor['visitJSXAttributes'];
    handleJSXAttributeOrSpread?: Visitor['visitJSXAttributeOrSpread'];
    handleJSXAttributeOrSpreads?: Visitor['visitJSXAttributeOrSpreads'];
    handleJSXAttribute?: Visitor['visitJSXAttribute'];
    handleJSXAttributeValue?: Visitor['visitJSXAttributeValue'];
    handleJSXAttributeName?: Visitor['visitJSXAttributeName'];
    handleConditionalExpression?: Visitor['visitConditionalExpression'];
    handleCallExpression?: Visitor['visitCallExpression'];
    handleBooleanLiteral?: Visitor['visitBooleanLiteral'];
    handleBinaryExpression?: Visitor['visitBinaryExpression'];
    handleAwaitExpression?: Visitor['visitAwaitExpression'];
    handleTsTypeParameterDeclaration?: Visitor['visitTsTypeParameterDeclaration'];
    handleTsTypeParameters?: Visitor['visitTsTypeParameters'];
    handleTsTypeParameter?: Visitor['visitTsTypeParameter'];
    handleTsTypeAnnotation?: Visitor['visitTsTypeAnnotation'];
    handleTsType?: Visitor['visitTsType'];
    handlePatterns?: Visitor['visitPatterns'];
    handleImportDeclaration?: Visitor['visitImportDeclaration'];
    handleImportSpecifiers?: Visitor['visitImportSpecifiers'];
    handleImportSpecifier?: Visitor['visitImportSpecifier'];
    handleNamedImportSpecifier?: Visitor['visitNamedImportSpecifier'];
    handleImportNamespaceSpecifier?: Visitor['visitImportNamespaceSpecifier'];
    handleImportDefaultSpecifier?: Visitor['visitImportDefaultSpecifier'];
    handleBindingIdentifier?: Visitor['visitBindingIdentifier'];
    handleIdentifierReference?: Visitor['visitIdentifierReference'];
    handleLabelIdentifier?: Visitor['visitLabelIdentifier'];
    handleIdentifier?: Visitor['visitIdentifier'];
    handleStringLiteral?: Visitor['visitStringLiteral'];
    handleNumericLiteral?: Visitor['visitNumericLiteral'];
    handleBigIntLiteral?: Visitor['visitBigIntLiteral'];
    handlePattern?: Visitor['visitPattern'];
    handleRestElement?: Visitor['visitRestElement'];
    handleAssignmentPattern?: Visitor['visitAssignmentPattern'];
    handleObjectPattern?: Visitor['visitObjectPattern'];
    handleObjectPatternProperties?: Visitor['visitObjectPatternProperties'];
    handleObjectPatternProperty?: Visitor['visitObjectPatternProperty'];
    handleKeyValuePatternProperty?: Visitor['visitKeyValuePatternProperty'];
    handleAssignmentPatternProperty?: Visitor['visitAssignmentPatternProperty'];
    handleArrayPattern?: Visitor['visitArrayPattern'];
    handleArrayPatternElements?: Visitor['visitArrayPatternElements'];
    handleArrayPatternElement?: Visitor['visitArrayPatternElement'];
    constructor(context?: {
        visitProgram?: Visitor['visitProgram'];
        visitModule?: Visitor['visitModule'];
        visitScript?: Visitor['visitScript'];
        visitModuleItems?: Visitor['visitModuleItems'];
        visitModuleItem?: Visitor['visitModuleItem'];
        visitModuleDeclaration?: Visitor['visitModuleDeclaration'];
        visitTsNamespaceExportDeclaration?: Visitor['visitTsNamespaceExportDeclaration'];
        visitTsExportAssignment?: Visitor['visitTsExportAssignment'];
        visitTsImportEqualsDeclaration?: Visitor['visitTsImportEqualsDeclaration'];
        visitTsModuleReference?: Visitor['visitTsModuleReference'];
        visitTsExternalModuleReference?: Visitor['visitTsExternalModuleReference'];
        visitExportAllDeclaration?: Visitor['visitExportAllDeclaration'];
        visitExportDefaultExpression?: Visitor['visitExportDefaultExpression'];
        visitExportNamedDeclaration?: Visitor['visitExportNamedDeclaration'];
        visitExportSpecifiers?: Visitor['visitExportSpecifiers'];
        visitExportSpecifier?: Visitor['visitExportSpecifier'];
        visitNamedExportSpecifier?: Visitor['visitNamedExportSpecifier'];
        visitModuleExportName?: Visitor['visitModuleExportName'];
        visitExportNamespaceSpecifier?: Visitor['visitExportNamespaceSpecifier'];
        visitExportDefaultSpecifier?: Visitor['visitExportDefaultSpecifier'];
        visitOptionalStringLiteral?: Visitor['visitOptionalStringLiteral'];
        visitExportDefaultDeclaration?: Visitor['visitExportDefaultDeclaration'];
        visitDefaultDeclaration?: Visitor['visitDefaultDeclaration'];
        visitFunctionExpression?: Visitor['visitFunctionExpression'];
        visitClassExpression?: Visitor['visitClassExpression'];
        visitExportDeclaration?: Visitor['visitExportDeclaration'];
        visitArrayExpression?: Visitor['visitArrayExpression'];
        visitArrayElement?: Visitor['visitArrayElement'];
        visitExprOrSpread?: Visitor['visitExprOrSpread'];
        visitExprOrSpreads?: Visitor['visitExprOrSpreads'];
        visitSpreadElement?: Visitor['visitSpreadElement'];
        visitOptionalExpression?: Visitor['visitOptionalExpression'];
        visitArrowFunctionExpression?: Visitor['visitArrowFunctionExpression'];
        visitArrowBody?: Visitor['visitArrowBody'];
        visitBlockStatement?: Visitor['visitBlockStatement'];
        visitStatements?: Visitor['visitStatements'];
        visitStatement?: Visitor['visitStatement'];
        visitSwitchStatement?: Visitor['visitSwitchStatement'];
        visitSwitchCases?: Visitor['visitSwitchCases'];
        visitSwitchCase?: Visitor['visitSwitchCase'];
        visitIfStatement?: Visitor['visitIfStatement'];
        visitOptionalStatement?: Visitor['visitOptionalStatement'];
        visitBreakStatement?: Visitor['visitBreakStatement'];
        visitWhileStatement?: Visitor['visitWhileStatement'];
        visitTryStatement?: Visitor['visitTryStatement'];
        visitCatchClause?: Visitor['visitCatchClause'];
        visitThrowStatement?: Visitor['visitThrowStatement'];
        visitReturnStatement?: Visitor['visitReturnStatement'];
        visitLabeledStatement?: Visitor['visitLabeledStatement'];
        visitForStatement?: Visitor['visitForStatement'];
        visitForOfStatement?: Visitor['visitForOfStatement'];
        visitForInStatement?: Visitor['visitForInStatement'];
        visitEmptyStatement?: Visitor['visitEmptyStatement'];
        visitDoWhileStatement?: Visitor['visitDoWhileStatement'];
        visitDebuggerStatement?: Visitor['visitDebuggerStatement'];
        visitWithStatement?: Visitor['visitWithStatement'];
        visitDeclaration?: Visitor['visitDeclaration'];
        visitVariableDeclaration?: Visitor['visitVariableDeclaration'];
        visitVariableDeclarators?: Visitor['visitVariableDeclarators'];
        visitVariableDeclarator?: Visitor['visitVariableDeclarator'];
        visitTsTypeAliasDeclaration?: Visitor['visitTsTypeAliasDeclaration'];
        visitTsModuleDeclaration?: Visitor['visitTsModuleDeclaration'];
        visitTsModuleName?: Visitor['visitTsModuleName'];
        visitTsNamespaceBody?: Visitor['visitTsNamespaceBody'];
        visitTsNamespaceDeclaration?: Visitor['visitTsNamespaceDeclaration'];
        visitTsModuleBlock?: Visitor['visitTsModuleBlock'];
        visitTsInterfaceDeclaration?: Visitor['visitTsInterfaceDeclaration'];
        visitTsInterfaceBody?: Visitor['visitTsInterfaceBody'];
        visitTsTypeElements?: Visitor['visitTsTypeElements'];
        visitTsTypeElement?: Visitor['visitTsTypeElement'];
        visitTsCallSignatureDeclaration?: Visitor['visitTsCallSignatureDeclaration'];
        visitTsConstructSignatureDeclaration?: Visitor['visitTsConstructSignatureDeclaration'];
        visitTsPropertySignature?: Visitor['visitTsPropertySignature'];
        visitTsGetterSignature?: Visitor['visitTsGetterSignature'];
        visitTsSetterSignature?: Visitor['visitTsSetterSignature'];
        visitTsMethodSignature?: Visitor['visitTsMethodSignature'];
        visitTsEnumDeclaration?: Visitor['visitTsEnumDeclaration'];
        visitTsEnumMembers?: Visitor['visitTsEnumMembers'];
        visitTsEnumMember?: Visitor['visitTsEnumMember'];
        visitTsEnumMemberId?: Visitor['visitTsEnumMemberId'];
        visitFunctionDeclaration?: Visitor['visitFunctionDeclaration'];
        visitClassDeclaration?: Visitor['visitClassDeclaration'];
        visitClassBody?: Visitor['visitClassBody'];
        visitClassMember?: Visitor['visitClassMember'];
        visitTsIndexSignature?: Visitor['visitTsIndexSignature'];
        visitTsFnParameters?: Visitor['visitTsFnParameters'];
        visitTsFnParameter?: Visitor['visitTsFnParameter'];
        visitPrivateProperty?: Visitor['visitPrivateProperty'];
        visitPrivateMethod?: Visitor['visitPrivateMethod'];
        visitPrivateName?: Visitor['visitPrivateName'];
        visitConstructor?: Visitor['visitConstructor'];
        visitConstructorParameters?: Visitor['visitConstructorParameters'];
        visitConstructorParameter?: Visitor['visitConstructorParameter'];
        visitStaticBlock?: Visitor['visitStaticBlock'];
        visitTsParameterProperty?: Visitor['visitTsParameterProperty'];
        visitTsParameterPropertyParameter?: Visitor['visitTsParameterPropertyParameter'];
        visitPropertyName?: Visitor['visitPropertyName'];
        visitAccessibility?: Visitor['visitAccessibility'];
        visitClassProperty?: Visitor['visitClassProperty'];
        visitClassMethod?: Visitor['visitClassMethod'];
        visitComputedPropertyKey?: Visitor['visitComputedPropertyKey'];
        visitClass?: Visitor['visitClass'];
        visitFunction?: Visitor['visitFunction'];
        visitTsExpressionsWithTypeArguments?: Visitor['visitTsExpressionsWithTypeArguments'];
        visitTsExpressionWithTypeArguments?: Visitor['visitTsExpressionWithTypeArguments'];
        visitTsTypeParameterInstantiation?: Visitor['visitTsTypeParameterInstantiation'];
        visitTsTypes?: Visitor['visitTsTypes'];
        visitTsEntityName?: Visitor['visitTsEntityName'];
        visitTsQualifiedName?: Visitor['visitTsQualifiedName'];
        visitDecorators?: Visitor['visitDecorators'];
        visitDecorator?: Visitor['visitDecorator'];
        visitExpressionStatement?: Visitor['visitExpressionStatement'];
        visitContinueStatement?: Visitor['visitContinueStatement'];
        visitExpression?: Visitor['visitExpression'];
        visitOptionalChainingExpression?: Visitor['visitOptionalChainingExpression'];
        visitMemberExpressionOrOptionalChainingCall?: Visitor['visitMemberExpressionOrOptionalChainingCall'];
        visitOptionalChainingCall?: Visitor['visitOptionalChainingCall'];
        visitAssignmentExpression?: Visitor['visitAssignmentExpression'];
        visitPatternOrExpression?: Visitor['visitPatternOrExpression'];
        visitYieldExpression?: Visitor['visitYieldExpression'];
        visitUpdateExpression?: Visitor['visitUpdateExpression'];
        visitUnaryExpression?: Visitor['visitUnaryExpression'];
        visitTsTypeAssertion?: Visitor['visitTsTypeAssertion'];
        visitTsConstAssertion?: Visitor['visitTsConstAssertion'];
        visitTsInstantiation?: Visitor['visitTsInstantiation'];
        visitTsNonNullExpression?: Visitor['visitTsNonNullExpression'];
        visitTsAsExpression?: Visitor['visitTsAsExpression'];
        visitThisExpression?: Visitor['visitThisExpression'];
        visitTemplateLiteral?: Visitor['visitTemplateLiteral'];
        visitParameters?: Visitor['visitParameters'];
        visitParameter?: Visitor['visitParameter'];
        visitTaggedTemplateExpression?: Visitor['visitTaggedTemplateExpression'];
        visitSequenceExpression?: Visitor['visitSequenceExpression'];
        visitRegExpLiteral?: Visitor['visitRegExpLiteral'];
        visitParenthesisExpression?: Visitor['visitParenthesisExpression'];
        visitObjectExpression?: Visitor['visitObjectExpression'];
        visitObjectProperties?: Visitor['visitObjectProperties'];
        visitObjectProperty?: Visitor['visitObjectProperty'];
        visitProperty?: Visitor['visitProperty'];
        visitSetterProperty?: Visitor['visitSetterProperty'];
        visitMethodProperty?: Visitor['visitMethodProperty'];
        visitKeyValueProperty?: Visitor['visitKeyValueProperty'];
        visitGetterProperty?: Visitor['visitGetterProperty'];
        visitAssignmentProperty?: Visitor['visitAssignmentProperty'];
        visitNullLiteral?: Visitor['visitNullLiteral'];
        visitNewExpression?: Visitor['visitNewExpression'];
        visitTsTypeArguments?: Visitor['visitTsTypeArguments'];
        visitArguments?: Visitor['visitArguments'];
        visitArgument?: Visitor['visitArgument'];
        visitMetaProperty?: Visitor['visitMetaProperty'];
        visitMemberExpression?: Visitor['visitMemberExpression'];
        visitSuperPropExpression?: Visitor['visitSuperPropExpression'];
        visitCallee?: Visitor['visitCallee'];
        visitJSXText?: Visitor['visitJSXText'];
        visitJSXNamespacedName?: Visitor['visitJSXNamespacedName'];
        visitJSXMemberExpression?: Visitor['visitJSXMemberExpression'];
        visitJSXObject?: Visitor['visitJSXObject'];
        visitJSXFragment?: Visitor['visitJSXFragment'];
        visitJSXClosingFragment?: Visitor['visitJSXClosingFragment'];
        visitJSXElementChildren?: Visitor['visitJSXElementChildren'];
        visitJSXElementChild?: Visitor['visitJSXElementChild'];
        visitJSXExpressionContainer?: Visitor['visitJSXExpressionContainer'];
        visitJSXSpreadChild?: Visitor['visitJSXSpreadChild'];
        visitJSXOpeningFragment?: Visitor['visitJSXOpeningFragment'];
        visitJSXEmptyExpression?: Visitor['visitJSXEmptyExpression'];
        visitJSXElement?: Visitor['visitJSXElement'];
        visitJSXClosingElement?: Visitor['visitJSXClosingElement'];
        visitJSXElementName?: Visitor['visitJSXElementName'];
        visitJSXOpeningElement?: Visitor['visitJSXOpeningElement'];
        visitJSXAttributes?: Visitor['visitJSXAttributes'];
        visitJSXAttributeOrSpread?: Visitor['visitJSXAttributeOrSpread'];
        visitJSXAttributeOrSpreads?: Visitor['visitJSXAttributeOrSpreads'];
        visitJSXAttribute?: Visitor['visitJSXAttribute'];
        visitJSXAttributeValue?: Visitor['visitJSXAttributeValue'];
        visitJSXAttributeName?: Visitor['visitJSXAttributeName'];
        visitConditionalExpression?: Visitor['visitConditionalExpression'];
        visitCallExpression?: Visitor['visitCallExpression'];
        visitBooleanLiteral?: Visitor['visitBooleanLiteral'];
        visitBinaryExpression?: Visitor['visitBinaryExpression'];
        visitAwaitExpression?: Visitor['visitAwaitExpression'];
        visitTsTypeParameterDeclaration?: Visitor['visitTsTypeParameterDeclaration'];
        visitTsTypeParameters?: Visitor['visitTsTypeParameters'];
        visitTsTypeParameter?: Visitor['visitTsTypeParameter'];
        visitTsTypeAnnotation?: Visitor['visitTsTypeAnnotation'];
        visitTsType?: Visitor['visitTsType'];
        visitPatterns?: Visitor['visitPatterns'];
        visitImportDeclaration?: Visitor['visitImportDeclaration'];
        visitImportSpecifiers?: Visitor['visitImportSpecifiers'];
        visitImportSpecifier?: Visitor['visitImportSpecifier'];
        visitNamedImportSpecifier?: Visitor['visitNamedImportSpecifier'];
        visitImportNamespaceSpecifier?: Visitor['visitImportNamespaceSpecifier'];
        visitImportDefaultSpecifier?: Visitor['visitImportDefaultSpecifier'];
        visitBindingIdentifier?: Visitor['visitBindingIdentifier'];
        visitIdentifierReference?: Visitor['visitIdentifierReference'];
        visitLabelIdentifier?: Visitor['visitLabelIdentifier'];
        visitIdentifier?: Visitor['visitIdentifier'];
        visitStringLiteral?: Visitor['visitStringLiteral'];
        visitNumericLiteral?: Visitor['visitNumericLiteral'];
        visitBigIntLiteral?: Visitor['visitBigIntLiteral'];
        visitPattern?: Visitor['visitPattern'];
        visitRestElement?: Visitor['visitRestElement'];
        visitAssignmentPattern?: Visitor['visitAssignmentPattern'];
        visitObjectPattern?: Visitor['visitObjectPattern'];
        visitObjectPatternProperties?: Visitor['visitObjectPatternProperties'];
        visitObjectPatternProperty?: Visitor['visitObjectPatternProperty'];
        visitKeyValuePatternProperty?: Visitor['visitKeyValuePatternProperty'];
        visitAssignmentPatternProperty?: Visitor['visitAssignmentPatternProperty'];
        visitArrayPattern?: Visitor['visitArrayPattern'];
        visitArrayPatternElements?: Visitor['visitArrayPatternElements'];
        visitArrayPatternElement?: Visitor['visitArrayPatternElement'];
    });
    visitProgram(m: Program): Program;
    visitModule(m: Module): Module;
    visitScript(m: Script): Script;
    visitModuleItems(items: ModuleItem[]): ModuleItem[];
    visitModuleItem(n: ModuleItem): ModuleItem;
    visitModuleDeclaration(n: ModuleDeclaration): ModuleDeclaration;
    visitTsNamespaceExportDeclaration(n: TsNamespaceExportDeclaration): ModuleDeclaration;
    visitTsExportAssignment(n: TsExportAssignment): TsExportAssignment;
    visitTsImportEqualsDeclaration(n: TsImportEqualsDeclaration): ModuleDeclaration;
    visitTsModuleReference(n: TsModuleReference): TsModuleReference;
    visitTsExternalModuleReference(n: TsExternalModuleReference): TsExternalModuleReference;
    visitExportAllDeclaration(n: ExportAllDeclaration): ModuleDeclaration;
    visitExportDefaultExpression(n: ExportDefaultExpression): ModuleDeclaration;
    visitExportNamedDeclaration(n: ExportNamedDeclaration): ModuleDeclaration;
    visitExportSpecifiers(nodes: ExportSpecifier[]): ExportSpecifier[];
    visitExportSpecifier(n: ExportSpecifier): ExportSpecifier;
    visitNamedExportSpecifier(n: NamedExportSpecifier): ExportSpecifier;
    visitModuleExportName(n: ModuleExportName): ModuleExportName;
    visitExportNamespaceSpecifier(n: ExportNamespaceSpecifier): ExportSpecifier;
    visitExportDefaultSpecifier(n: ExportDefaultSpecifier): ExportSpecifier;
    visitOptionalStringLiteral(n: StringLiteral | undefined): StringLiteral | undefined;
    visitExportDefaultDeclaration(n: ExportDefaultDeclaration): ModuleDeclaration;
    visitDefaultDeclaration(n: DefaultDecl): DefaultDecl;
    visitFunctionExpression(n: FunctionExpression): FunctionExpression;
    visitClassExpression(n: ClassExpression): ClassExpression;
    visitExportDeclaration(n: ExportDeclaration): ModuleDeclaration;
    visitArrayExpression(e: ArrayExpression): Expression;
    visitArrayElement(e: ExprOrSpread | undefined): ExprOrSpread | undefined;
    visitExprOrSpread(e: ExprOrSpread): ExprOrSpread;
    visitExprOrSpreads(nodes: ExprOrSpread[]): ExprOrSpread[];
    visitSpreadElement(e: SpreadElement): SpreadElement;
    visitOptionalExpression(e: Expression | undefined): Expression | undefined;
    visitArrowFunctionExpression(e: ArrowFunctionExpression): Expression;
    visitArrowBody(body: BlockStatement | Expression): BlockStatement | Expression;
    visitBlockStatement(block: BlockStatement): BlockStatement;
    visitStatements(stmts: Statement[]): Statement[];
    visitStatement(stmt: Statement): Statement;
    visitSwitchStatement(stmt: SwitchStatement): Statement;
    visitSwitchCases(cases: SwitchCase[]): SwitchCase[];
    visitSwitchCase(c: SwitchCase): SwitchCase;
    visitIfStatement(stmt: IfStatement): Statement;
    visitOptionalStatement(stmt: Statement | undefined): Statement | undefined;
    visitBreakStatement(stmt: BreakStatement): Statement;
    visitWhileStatement(stmt: WhileStatement): Statement;
    visitTryStatement(stmt: TryStatement): Statement;
    visitCatchClause(handler: CatchClause | undefined): CatchClause | undefined;
    visitThrowStatement(stmt: ThrowStatement): Statement;
    visitReturnStatement(stmt: ReturnStatement): Statement;
    visitLabeledStatement(stmt: LabeledStatement): Statement;
    visitForStatement(stmt: ForStatement): Statement;
    visitForOfStatement(stmt: ForOfStatement): Statement;
    visitForInStatement(stmt: ForInStatement): Statement;
    visitEmptyStatement(stmt: EmptyStatement): EmptyStatement;
    visitDoWhileStatement(stmt: DoWhileStatement): Statement;
    visitDebuggerStatement(stmt: DebuggerStatement): Statement;
    visitWithStatement(stmt: WithStatement): Statement;
    visitDeclaration(decl: Declaration): Declaration;
    visitVariableDeclaration(n: VariableDeclaration): VariableDeclaration;
    visitVariableDeclarators(nodes: VariableDeclarator[]): VariableDeclarator[];
    visitVariableDeclarator(n: VariableDeclarator): VariableDeclarator;
    visitTsTypeAliasDeclaration(n: TsTypeAliasDeclaration): Declaration;
    visitTsModuleDeclaration(n: TsModuleDeclaration): Declaration;
    visitTsModuleName(n: TsModuleName): TsModuleName;
    visitTsNamespaceBody(n: TsNamespaceBody): TsNamespaceBody | undefined;
    visitTsNamespaceDeclaration(n: TsNamespaceDeclaration): TsModuleBlock | TsNamespaceDeclaration;
    visitTsModuleBlock(n: TsModuleBlock): TsModuleBlock | TsNamespaceDeclaration;
    visitTsInterfaceDeclaration(n: TsInterfaceDeclaration): TsInterfaceDeclaration;
    visitTsInterfaceBody(n: TsInterfaceBody): TsInterfaceBody;
    visitTsTypeElements(nodes: TsTypeElement[]): TsTypeElement[];
    visitTsTypeElement(n: TsTypeElement): TsTypeElement;
    visitTsCallSignatureDeclaration(n: TsCallSignatureDeclaration): TsCallSignatureDeclaration;
    visitTsConstructSignatureDeclaration(n: TsConstructSignatureDeclaration): TsConstructSignatureDeclaration;
    visitTsPropertySignature(n: TsPropertySignature): TsPropertySignature;
    visitTsGetterSignature(n: TsGetterSignature): TsGetterSignature;
    visitTsSetterSignature(n: TsSetterSignature): TsSetterSignature;
    visitTsMethodSignature(n: TsMethodSignature): TsMethodSignature;
    visitTsEnumDeclaration(n: TsEnumDeclaration): Declaration;
    visitTsEnumMembers(nodes: TsEnumMember[]): TsEnumMember[];
    visitTsEnumMember(n: TsEnumMember): TsEnumMember;
    visitTsEnumMemberId(n: TsEnumMemberId): TsEnumMemberId;
    visitFunctionDeclaration(decl: FunctionDeclaration): Declaration;
    visitClassDeclaration(decl: ClassDeclaration): Declaration;
    visitClassBody(members: ClassMember[]): ClassMember[];
    visitClassMember(member: ClassMember): ClassMember;
    visitTsIndexSignature(n: TsIndexSignature): TsIndexSignature;
    visitTsFnParameters(params: TsFnParameter[]): TsFnParameter[];
    visitTsFnParameter(n: TsFnParameter): TsFnParameter;
    visitPrivateProperty(n: PrivateProperty): ClassMember;
    visitPrivateMethod(n: PrivateMethod): ClassMember;
    visitPrivateName(n: PrivateName): PrivateName;
    visitConstructor(n: Constructor): ClassMember;
    visitConstructorParameters(nodes: (Param | TsParameterProperty)[]): (Param | TsParameterProperty)[];
    visitConstructorParameter(n: Param | TsParameterProperty): Param | TsParameterProperty;
    visitStaticBlock(n: StaticBlock): StaticBlock;
    visitTsParameterProperty(n: TsParameterProperty): TsParameterProperty | Param;
    visitTsParameterPropertyParameter(n: TsParameterPropertyParameter): TsParameterPropertyParameter;
    visitPropertyName(key: PropertyName): PropertyName;
    visitAccessibility(n: Accessibility | undefined): Accessibility | undefined;
    visitClassProperty(n: ClassProperty): ClassMember;
    visitClassMethod(n: ClassMethod): ClassMember;
    visitComputedPropertyKey(n: ComputedPropName): ComputedPropName;
    visitClass<T extends Class>(n: T): T;
    visitFunction<T extends Fn>(n: T): T;
    visitTsExpressionsWithTypeArguments(nodes: TsExpressionWithTypeArguments[]): TsExpressionWithTypeArguments[];
    visitTsExpressionWithTypeArguments(n: TsExpressionWithTypeArguments): TsExpressionWithTypeArguments;
    visitTsTypeParameterInstantiation(n: TsTypeParameterInstantiation | undefined): TsTypeParameterInstantiation | undefined;
    visitTsTypes(nodes: TsType[]): TsType[];
    visitTsEntityName(n: TsEntityName): TsEntityName;
    visitTsQualifiedName(n: TsQualifiedName): TsQualifiedName;
    visitDecorators(nodes: Decorator[] | undefined): Decorator[] | undefined;
    visitDecorator(n: Decorator): Decorator;
    visitExpressionStatement(stmt: ExpressionStatement): Statement;
    visitContinueStatement(stmt: ContinueStatement): Statement;
    visitExpression(n: Expression): Expression;
    visitOptionalChainingExpression(n: OptionalChainingExpression): Expression;
    visitMemberExpressionOrOptionalChainingCall(n: MemberExpression | OptionalChainingCall): MemberExpression | OptionalChainingCall;
    visitOptionalChainingCall(n: OptionalChainingCall): OptionalChainingCall;
    visitAssignmentExpression(n: AssignmentExpression): Expression;
    visitPatternOrExpression(n: Pattern | Expression): Pattern | Expression;
    visitYieldExpression(n: YieldExpression): Expression;
    visitUpdateExpression(n: UpdateExpression): Expression;
    visitUnaryExpression(n: UnaryExpression): Expression;
    visitTsTypeAssertion(n: TsTypeAssertion): Expression;
    visitTsConstAssertion(n: TsConstAssertion): Expression;
    visitTsInstantiation(n: TsInstantiation): TsInstantiation;
    visitTsNonNullExpression(n: TsNonNullExpression): Expression;
    visitTsAsExpression(n: TsAsExpression): Expression;
    visitThisExpression(n: ThisExpression): Expression;
    visitTemplateLiteral(n: TemplateLiteral): Expression;
    visitParameters(n: Param[]): Param[];
    visitParameter(n: Param): Param;
    visitTaggedTemplateExpression(n: TaggedTemplateExpression): Expression;
    visitSequenceExpression(n: SequenceExpression): Expression;
    visitRegExpLiteral(n: RegExpLiteral): Expression;
    visitParenthesisExpression(n: ParenthesisExpression): Expression;
    visitObjectExpression(n: ObjectExpression): Expression;
    visitObjectProperties(nodes: (Property | SpreadElement)[]): (Property | SpreadElement)[];
    visitObjectProperty(n: Property | SpreadElement): Property | SpreadElement;
    visitProperty(n: Property): Property | SpreadElement;
    visitSetterProperty(n: SetterProperty): Property | SpreadElement;
    visitMethodProperty(n: MethodProperty): Property | SpreadElement;
    visitKeyValueProperty(n: KeyValueProperty): Property | SpreadElement;
    visitGetterProperty(n: GetterProperty): Property | SpreadElement;
    visitAssignmentProperty(n: AssignmentProperty): Property | SpreadElement;
    visitNullLiteral(n: NullLiteral): NullLiteral;
    visitNewExpression(n: NewExpression): Expression;
    visitTsTypeArguments(n: TsTypeParameterInstantiation | undefined): TsTypeParameterInstantiation | undefined;
    visitArguments(nodes: Argument[]): Argument[];
    visitArgument(n: Argument): Argument;
    visitMetaProperty(n: MetaProperty): Expression;
    visitMemberExpression(n: MemberExpression): MemberExpression;
    visitSuperPropExpression(n: SuperPropExpression): Expression;
    visitCallee(n: Expression | Super | Import): Expression | Super | Import;
    visitJSXText(n: JSXText): JSXText;
    visitJSXNamespacedName(n: JSXNamespacedName): JSXNamespacedName;
    visitJSXMemberExpression(n: JSXMemberExpression): JSXMemberExpression;
    visitJSXObject(n: JSXObject): JSXObject;
    visitJSXFragment(n: JSXFragment): JSXFragment;
    visitJSXClosingFragment(n: JSXClosingFragment): JSXClosingFragment;
    visitJSXElementChildren(nodes: JSXElementChild[]): JSXElementChild[];
    visitJSXElementChild(n: JSXElementChild): JSXElementChild;
    visitJSXExpressionContainer(n: JSXExpressionContainer): JSXExpressionContainer;
    visitJSXSpreadChild(n: JSXSpreadChild): JSXElementChild;
    visitJSXOpeningFragment(n: JSXOpeningFragment): JSXOpeningFragment;
    visitJSXEmptyExpression(n: JSXEmptyExpression): Expression;
    visitJSXElement(n: JSXElement): JSXElement;
    visitJSXClosingElement(n: JSXClosingElement | undefined): JSXClosingElement | undefined;
    visitJSXElementName(n: JSXElementName): JSXElementName;
    visitJSXOpeningElement(n: JSXOpeningElement): JSXOpeningElement;
    visitJSXAttributes(attrs: JSXAttributeOrSpread[] | undefined): JSXAttributeOrSpread[] | undefined;
    visitJSXAttributeOrSpread(n: JSXAttributeOrSpread): JSXAttributeOrSpread;
    visitJSXAttributeOrSpreads(nodes: JSXAttributeOrSpread[]): JSXAttributeOrSpread[];
    visitJSXAttribute(n: JSXAttribute): JSXAttributeOrSpread;
    visitJSXAttributeValue(n: JSXAttrValue | undefined): JSXAttrValue | undefined;
    visitJSXAttributeName(n: JSXAttributeName): JSXAttributeName;
    visitConditionalExpression(n: ConditionalExpression): Expression;
    visitCallExpression(n: CallExpression): Expression;
    visitBooleanLiteral(n: BooleanLiteral): BooleanLiteral;
    visitBinaryExpression(n: BinaryExpression): Expression;
    visitAwaitExpression(n: AwaitExpression): Expression;
    visitTsTypeParameterDeclaration(n: TsTypeParameterDeclaration | undefined): TsTypeParameterDeclaration | undefined;
    visitTsTypeParameters(nodes: TsTypeParameter[]): TsTypeParameter[];
    visitTsTypeParameter(n: TsTypeParameter): TsTypeParameter;
    visitTsTypeAnnotation(a: TsTypeAnnotation | undefined): TsTypeAnnotation | undefined;
    visitTsType(n: TsType): TsType;
    visitPatterns(nodes: Pattern[]): Pattern[];
    visitImportDeclaration(n: ImportDeclaration): ImportDeclaration;
    visitImportSpecifiers(nodes: ImportSpecifier[]): ImportSpecifier[];
    visitImportSpecifier(node: ImportSpecifier): ImportSpecifier;
    visitNamedImportSpecifier(node: NamedImportSpecifier): NamedImportSpecifier;
    visitImportNamespaceSpecifier(node: ImportNamespaceSpecifier): ImportNamespaceSpecifier;
    visitImportDefaultSpecifier(node: ImportDefaultSpecifier): ImportSpecifier;
    visitBindingIdentifier(i: BindingIdentifier): BindingIdentifier;
    visitIdentifierReference(i: Identifier): Identifier;
    visitLabelIdentifier(label: Identifier): Identifier;
    visitIdentifier(n: Identifier): Identifier;
    visitStringLiteral(n: StringLiteral): StringLiteral;
    visitNumericLiteral(n: NumericLiteral): NumericLiteral;
    visitBigIntLiteral(n: BigIntLiteral): BigIntLiteral;
    visitPattern(n: Pattern): Pattern;
    visitRestElement(n: RestElement): RestElement;
    visitAssignmentPattern(n: AssignmentPattern): Pattern;
    visitObjectPattern(n: ObjectPattern): Pattern;
    visitObjectPatternProperties(nodes: ObjectPatternProperty[]): ObjectPatternProperty[];
    visitObjectPatternProperty(n: ObjectPatternProperty): ObjectPatternProperty;
    visitKeyValuePatternProperty(n: KeyValuePatternProperty): ObjectPatternProperty;
    visitAssignmentPatternProperty(n: AssignmentPatternProperty): ObjectPatternProperty;
    visitArrayPattern(n: ArrayPattern): Pattern;
    visitArrayPatternElements(nodes: (Pattern | undefined)[]): (Pattern | undefined)[];
    visitArrayPatternElement(m: Pattern | undefined): Pattern | undefined;
}
export declare function isAccessibility(n: unknown): n is Accessibility;
export declare function isArgument(n: unknown): n is Argument;
export declare function isArrayExpression(n: unknown): n is ArrayExpression;
export declare function isArrayPattern(n: unknown): n is ArrayPattern;
export declare function isArrowFunctionExpression(n: unknown): n is ArrowFunctionExpression;
export declare function isAssignmentExpression(n: unknown): n is AssignmentExpression;
export declare function isAssignmentPattern(n: unknown): n is AssignmentPattern;
export declare function isAssignmentPatternProperty(n: unknown): n is AssignmentPatternProperty;
export declare function isAssignmentProperty(n: unknown): n is AssignmentProperty;
export declare function isAwaitExpression(n: unknown): n is AwaitExpression;
export declare function isBigIntLiteral(n: unknown): n is BigIntLiteral;
export declare function isBinaryExpression(n: unknown): n is BinaryExpression;
export declare function isBindingIdentifier(n: unknown): n is BindingIdentifier;
export declare function isBlockStatement(n: unknown): n is BlockStatement;
export declare function isBooleanLiteral(n: unknown): n is BooleanLiteral;
export declare function isBreakStatement(n: unknown): n is BreakStatement;
export declare function isCallExpression(n: unknown): n is CallExpression;
export declare function isCatchClause(n: unknown): n is CatchClause;
export declare function isClass(n: unknown): n is Class;
export declare function isClassDeclaration(n: unknown): n is ClassDeclaration;
export declare function isClassExpression(n: unknown): n is ClassExpression;
export declare function isClassMember(n: unknown): n is ClassMember;
export declare function isClassMethod(n: unknown): n is ClassMethod;
export declare function isClassProperty(n: unknown): n is ClassProperty;
export declare function isComputedPropName(n: unknown): n is ComputedPropName;
export declare function isConditionalExpression(n: unknown): n is ConditionalExpression;
export declare function isConstructor(n: unknown): n is Constructor;
export declare function isContinueStatement(n: unknown): n is ContinueStatement;
export declare function isDebuggerStatement(n: unknown): n is DebuggerStatement;
export declare function isDeclaration(n: unknown): n is Declaration;
export declare function isDecorator(n: unknown): n is Decorator;
export declare function isDefaultDecl(n: unknown): n is DefaultDecl;
export declare function isDoWhileStatement(n: unknown): n is DoWhileStatement;
export declare function isEmptyStatement(n: unknown): n is EmptyStatement;
export declare function isExportAllDeclaration(n: unknown): n is ExportAllDeclaration;
export declare function isExportDeclaration(n: unknown): n is ExportDeclaration;
export declare function isExportDefaultDeclaration(n: unknown): n is ExportDefaultDeclaration;
export declare function isExportDefaultExpression(n: unknown): n is ExportDefaultExpression;
export declare function isExportDefaultSpecifier(n: unknown): n is ExportDefaultSpecifier;
export declare function isExportNamedDeclaration(n: unknown): n is ExportNamedDeclaration;
export declare function isExportNamespaceSpecifier(n: unknown): n is ExportNamespaceSpecifier;
export declare function isExportSpecifier(n: unknown): n is ExportSpecifier;
export declare function isExprOrSpread(n: unknown): n is ExprOrSpread;
export declare function isExpression(n: unknown): n is Expression;
export declare function isExpressionStatement(n: unknown): n is ExpressionStatement;
export declare function isForInStatement(n: unknown): n is ForInStatement;
export declare function isForOfStatement(n: unknown): n is ForOfStatement;
export declare function isForStatement(n: unknown): n is ForStatement;
export declare function isFunctionDeclaration(n: unknown): n is FunctionDeclaration;
export declare function isFunctionExpression(n: unknown): n is FunctionExpression;
export declare function isGetterProperty(n: unknown): n is GetterProperty;
export declare function isIdentifier(n: unknown): n is Identifier;
export declare function isIfStatement(n: unknown): n is IfStatement;
export declare function isImport(n: unknown): n is Import;
export declare function isImportDeclaration(n: unknown): n is ImportDeclaration;
export declare function isImportDefaultSpecifier(n: unknown): n is ImportDefaultSpecifier;
export declare function isImportNamespaceSpecifier(n: unknown): n is ImportNamespaceSpecifier;
export declare function isImportSpecifier(n: unknown): n is ImportSpecifier;
export declare function isLiteral(n: unknown): n is Literal;
export declare function isJSXAttrValue(n: unknown): n is JSXAttrValue;
export declare function isJSXAttribute(n: unknown): n is JSXAttribute;
export declare function isJSXAttributeName(n: unknown): n is JSXAttributeName;
export declare function isJSXAttributeOrSpread(n: unknown): n is JSXAttributeOrSpread;
export declare function isJSXClosingElement(n: unknown): n is JSXClosingElement;
export declare function isJSXClosingFragment(n: unknown): n is JSXClosingFragment;
export declare function isJSXElement(n: unknown): n is JSXElement;
export declare function isJSXElementChild(n: unknown): n is JSXElementChild;
export declare function isJSXElementName(n: unknown): n is JSXElementName;
export declare function isJSXEmptyExpression(n: unknown): n is JSXEmptyExpression;
export declare function isJSXExpressionContainer(n: unknown): n is JSXExpressionContainer;
export declare function isJSXFragment(n: unknown): n is JSXFragment;
export declare function isJSXMemberExpression(n: unknown): n is JSXMemberExpression;
export declare function isJSXNamespacedName(n: unknown): n is JSXNamespacedName;
export declare function isJSXObject(n: unknown): n is JSXObject;
export declare function isJSXOpeningElement(n: unknown): n is JSXOpeningElement;
export declare function isJSXOpeningFragment(n: unknown): n is JSXOpeningFragment;
export declare function isJSXSpreadChild(n: unknown): n is JSXSpreadChild;
export declare function isJSXText(n: unknown): n is JSXText;
export declare function isKeyValuePatternProperty(n: unknown): n is KeyValuePatternProperty;
export declare function isKeyValueProperty(n: unknown): n is KeyValueProperty;
export declare function isLabeledStatement(n: unknown): n is LabeledStatement;
export declare function isMemberExpression(n: unknown): n is MemberExpression;
export declare function isMetaProperty(n: unknown): n is MetaProperty;
export declare function isMethodProperty(n: unknown): n is MethodProperty;
export declare function isModule(n: unknown): n is Module;
export declare function isModuleDeclaration(n: unknown): n is ModuleDeclaration;
export declare function isModuleExportName(n: unknown): n is ModuleExportName;
export declare function isModuleItem(n: unknown): n is ModuleItem;
export declare function isNamedExportSpecifier(n: unknown): n is NamedExportSpecifier;
export declare function isNamedImportSpecifier(n: unknown): n is NamedImportSpecifier;
export declare function isNewExpression(n: unknown): n is NewExpression;
export declare function isNullLiteral(n: unknown): n is NullLiteral;
export declare function isNumericLiteral(n: unknown): n is NumericLiteral;
export declare function isObjectExpression(n: unknown): n is ObjectExpression;
export declare function isObjectPattern(n: unknown): n is ObjectPattern;
export declare function isObjectPatternProperty(n: unknown): n is ObjectPatternProperty;
export declare function isOptionalChainingCall(n: unknown): n is OptionalChainingCall;
export declare function isOptionalChainingExpression(n: unknown): n is OptionalChainingExpression;
export declare function isParam(n: unknown): n is Param;
export declare function isParenthesisExpression(n: unknown): n is ParenthesisExpression;
export declare function isInvalid(n: unknown): n is Invalid;
export declare function isPattern(n: unknown): n is Pattern;
export declare function isPrivateMethod(n: unknown): n is PrivateMethod;
export declare function isPrivateName(n: unknown): n is PrivateName;
export declare function isPrivateProperty(n: unknown): n is PrivateProperty;
export declare function isProgram(n: unknown): n is Program;
export declare function isProperty(n: unknown): n is Property;
export declare function isPropertyName(n: unknown): n is PropertyName;
export declare function isRegExpLiteral(n: unknown): n is RegExpLiteral;
export declare function isRestElement(n: unknown): n is RestElement;
export declare function isReturnStatement(n: unknown): n is ReturnStatement;
export declare function isScript(n: unknown): n is Script;
export declare function isSequenceExpression(n: unknown): n is SequenceExpression;
export declare function isSetterProperty(n: unknown): n is SetterProperty;
export declare function isSpreadElement(n: unknown): n is SpreadElement;
export declare function isStatement(n: unknown): n is Statement;
export declare function isStaticBlock(n: unknown): n is StaticBlock;
export declare function isStringLiteral(n: unknown): n is StringLiteral;
export declare function isSuper(n: unknown): n is Super;
export declare function isSuperPropExpression(n: unknown): n is SuperPropExpression;
export declare function isSwitchCase(n: unknown): n is SwitchCase;
export declare function isSwitchStatement(n: unknown): n is SwitchStatement;
export declare function isTaggedTemplateExpression(n: unknown): n is TaggedTemplateExpression;
export declare function isTemplateLiteral(n: unknown): n is TemplateLiteral;
export declare function isThisExpression(n: unknown): n is ThisExpression;
export declare function isThrowStatement(n: unknown): n is ThrowStatement;
export declare function isTryStatement(n: unknown): n is TryStatement;
export declare function isTsAsExpression(n: unknown): n is TsAsExpression;
export declare function isTsCallSignatureDeclaration(n: unknown): n is TsCallSignatureDeclaration;
export declare function isTsConstAssertion(n: unknown): n is TsConstAssertion;
export declare function isTsConstructSignatureDeclaration(n: unknown): n is TsConstructSignatureDeclaration;
export declare function isTsEnumDeclaration(n: unknown): n is TsEnumDeclaration;
export declare function isTsEnumMember(n: unknown): n is TsEnumMember;
export declare function isTsEnumMemberId(n: unknown): n is TsEnumMemberId;
export declare function isTsExportAssignment(n: unknown): n is TsExportAssignment;
export declare function isTsExpressionWithTypeArguments(n: unknown): n is TsExpressionWithTypeArguments;
export declare function isTsExternalModuleReference(n: unknown): n is TsExternalModuleReference;
export declare function isObjectPatter(n: unknown): n is ObjectPattern;
export declare function isTsFnParameter(n: unknown): n is TsFnParameter;
export declare function isTsGetterSignature(n: unknown): n is TsGetterSignature;
export declare function isTsImportEqualsDeclaration(n: unknown): n is TsImportEqualsDeclaration;
export declare function isTsIndexSignature(n: unknown): n is TsIndexSignature;
export declare function isTsInstantiation(n: unknown): n is TsInstantiation;
export declare function isTsInterfaceBody(n: unknown): n is TsInterfaceBody;
export declare function isTsInterfaceDeclaration(n: unknown): n is TsInterfaceDeclaration;
export declare function isTsMethodSignature(n: unknown): n is TsMethodSignature;
export declare function isTsModuleBlock(n: unknown): n is TsModuleBlock;
export declare function isTsModuleDeclaration(n: unknown): n is TsModuleDeclaration;
export declare function isTsModuleName(n: unknown): n is TsModuleName;
export declare function isTsEntityName(n: unknown): n is TsEntityName;
export declare function isTsModuleReference(n: unknown): n is TsModuleReference;
export declare function isTsNamespaceBody(n: unknown): n is TsNamespaceBody;
export declare function isTsNamespaceDeclaration(n: unknown): n is TsNamespaceDeclaration;
export declare function isTsNamespaceExportDeclaration(n: unknown): n is TsNamespaceExportDeclaration;
export declare function isTsNonNullExpression(n: unknown): n is TsNonNullExpression;
export declare function isTsParameterProperty(n: unknown): n is TsParameterProperty;
export declare function isTsParameterPropertyParameter(n: unknown): n is TsParameterPropertyParameter;
export declare function isTsPropertySignature(n: unknown): n is TsPropertySignature;
export declare function isTsQualifiedName(n: unknown): n is TsQualifiedName;
export declare function isTsSetterSignature(n: unknown): n is TsSetterSignature;
export declare function isTsKeywordType(n: unknown): n is TsKeywordType;
export declare function isTsThisType(n: unknown): n is TsThisType;
export declare function isTsFunctionType(n: unknown): n is TsFunctionType;
export declare function isTsConstructorType(n: unknown): n is TsConstructorType;
export declare function isTsFnOrConstructorType(n: unknown): n is TsFnOrConstructorType;
export declare function isTsTypeReference(n: unknown): n is TsTypeReference;
export declare function isTsTypeQuery(n: unknown): n is TsTypeQuery;
export declare function isTsTypeLiteral(n: unknown): n is TsTypeLiteral;
export declare function isTsArrayType(n: unknown): n is TsArrayType;
export declare function isTsTupleType(n: unknown): n is TsTupleType;
export declare function isTsOptionalType(n: unknown): n is TsOptionalType;
export declare function isTsRestType(n: unknown): n is TsRestType;
export declare function isTsUnionType(n: unknown): n is TsUnionType;
export declare function isTsIntersectionType(n: unknown): n is TsIntersectionType;
export declare function isTsUnionOrIntersectionType(n: unknown): n is TsUnionOrIntersectionType;
export declare function isTsConditionalType(n: unknown): n is TsConditionalType;
export declare function isTsInferType(n: unknown): n is TsInferType;
export declare function isTsParenthesizedType(n: unknown): n is TsParenthesizedType;
export declare function isTsTypeOperator(n: unknown): n is TsTypeOperator;
export declare function isTsIndexedAccessType(n: unknown): n is TsIndexedAccessType;
export declare function isTsMappedType(n: unknown): n is TsMappedType;
export declare function isTsLiteralType(n: unknown): n is TsLiteralType;
export declare function isTsTypePredicate(n: unknown): n is TsTypePredicate;
export declare function isTsImportType(n: unknown): n is TsImportType;
export declare function isTsType(n: unknown): n is TsType;
export declare function isTsTypeAliasDeclaration(n: unknown): n is TsTypeAliasDeclaration;
export declare function isTsTypeAnnotation(n: unknown): n is TsTypeAnnotation;
export declare function isTsTypeAssertion(n: unknown): n is TsTypeAssertion;
export declare function isTsTypeElement(n: unknown): n is TsTypeElement;
export declare function isTsTypeParameter(n: unknown): n is TsTypeParameter;
export declare function isTsTypeParameterDeclaration(n: unknown): n is TsTypeParameterDeclaration;
export declare function isTsTypeParameterInstantiation(n: unknown): n is TsTypeParameterInstantiation;
export declare function isUnaryExpression(n: unknown): n is UnaryExpression;
export declare function isUpdateExpression(n: unknown): n is UpdateExpression;
export declare function isVariableDeclaration(n: unknown): n is VariableDeclaration;
export declare function isVariableDeclarator(n: unknown): n is VariableDeclarator;
export declare function isWhileStatement(n: unknown): n is WhileStatement;
export declare function isWithStatement(n: unknown): n is WithStatement;
export declare function isYieldExpression(n: unknown): n is YieldExpression;
//# sourceMappingURL=Visitor.d.ts.map