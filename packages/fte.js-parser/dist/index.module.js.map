{"version":3,"file":"index.module.js","sources":["../src/index.ts"],"sourcesContent":["import detectIndent from 'detect-indent'\n\nexport type StateDefinition = {\n  start?: Array<string>\n  end?: Array<string>\n  skip?: {\n    start?: Array<string>\n    end?: Array<string>\n  }\n  states?: Array<ResultTypes>\n  curly?: 0 | 1 | 2\n  type?: { [key: string]: ResultTypes }\n}\n/**\n <% 'Scriptlet' tag, for control-flow, no output\n <%_ ‘Whitespace Slurping’ Scriptlet tag, strips all whitespace before it\n <%= Outputs the value into the template (HTML escaped)\n <%- Outputs the unescaped value into the template\n <%# Comment tag, no execution, no output\n\n <%% Outputs a literal '<%'\n %> Plain ending tag\n removes/cleans whitespases after\n -%> Trim-mode ('newline slurp') tag, trims following newline\n _%> ‘Whitespace Slurping’ ending tag, removes all whitespace after it\n */\nexport type ResultTypes =\n  | 'unknown'\n  | 'expression'\n  | 'uexpression'\n  | 'expression2'\n  | 'uexpression2'\n  | 'code'\n  | 'directive'\n  | 'comments'\n  | 'slotStart'\n  | 'blockStart'\n  | 'blockEnd'\n  | 'text'\n  | 'skip'\n  | 'empty'\n\nexport type SystemBlocksType = 'directive' | 'comments' | 'slotStart' | 'blockStart' | 'blockEnd' | 'code' | null\n\nconst globalStates: { [key: string]: StateDefinition } = {\n  /*\n  has chunks\n  has slots\n  has blocks\n  has ?? все что угодно можно получить просто анализируя соответствующий контент, и выставлять значения в соответствующий блок\n  в некоторых директивах не будет нужны\n  можно автоматически определять, просто анализируя текст\n  */\n  text: {\n    // обратный порядок для ускорения цикла\n    states: [\n      'unknown',\n      'expression',\n      'uexpression',\n      'code',\n      'directive',\n      'slotStart',\n      'blockStart',\n      'blockEnd',\n      'comments',\n    ],\n  },\n  unknown: {\n    start: ['<%', '<%=', '<%-', '<%_', '<%#'],\n    end: ['%>', '-%>', '_%>'],\n    skip: {\n      start: ['<%%'],\n      end: ['%%>'],\n    },\n    type: {\n      '<%': 'code',\n      '<%=': 'uexpression',\n      '<%-': 'expression',\n      '<%#': 'comments',\n      '<%_': 'code',\n    },\n  },\n  expression: {\n    start: ['#{'],\n    end: ['}'],\n    curly: 1,\n  },\n  uexpression: {\n    start: ['!{'],\n    end: ['}'],\n    curly: 1,\n  },\n  code: {\n    start: ['<#', '<#-'],\n    end: ['#>', '-#>'],\n    skip: {\n      start: ['<#@', '<# block', '<# slot', '<# end #>', '<#{'],\n    },\n  },\n  directive: {\n    start: ['<#@'],\n    end: ['#>', '-#>'],\n  },\n  comments: {\n    start: ['<*'],\n    end: ['*>'],\n  },\n  blockStart: {\n    start: ['<# block', '<#- block'],\n    end: [': #>', ': -#>'],\n  },\n  slotStart: {\n    start: ['<# slot', '<#- slot'],\n    end: [': #>', ': -#>'],\n  },\n  blockEnd: {\n    start: ['<# end #>', '<#- end #>', '<# end -#>', '<#- end -#>'],\n  },\n}\nexport default globalStates\n\nexport interface ParserResult {\n  data: string\n  pos: number\n  line: number\n  column: number\n  type: ResultTypes\n  start: string\n  end: string\n  eol: boolean\n}\n\nexport interface Items {\n  content: string\n  indent?: string\n  pos: number\n  line: number\n  column: number\n  start: string\n  end: string\n  eol: boolean\n  type: ResultTypes\n}\n\nexport type RequireItem = {\n  name: string\n  alias: string\n}\n\nconst directives = [\n  'extend',\n  'context',\n  'alias',\n  'deindent',\n  'chunks',\n  'includeMainChunk',\n  'useHash',\n  'noContent',\n  'noSlots',\n  'noBlocks',\n  'noPartial',\n  'noOptions',\n  'promise',\n  'callback',\n  'requireAs',\n]\n\nfunction detectDirective(input: string) {\n  let name\n  let params\n  if (input) {\n    input = input.trim()\n    for (let i = 0; i < directives.length; i += 1) {\n      const directive = directives[i]\n      if (SUB(input.trim(), directive) == directive) {\n        name = directive\n        params = UNPARAM(input.slice(directive.length))\n        break\n      }\n    }\n  }\n  return {\n    name: name ? name : input,\n    params,\n  }\n}\n\nexport class CodeBlockDirectives {\n  extend!: string\n  deindent!: number | boolean\n  context: string = 'context'\n  alias!: Array<string>\n  chunks!: string\n  includeMainChunk!: boolean\n  useHash!: boolean\n  content: boolean = true\n  slots: boolean = true\n  blocks: boolean = true\n  partial: boolean = true\n  options: boolean = true\n  // return promise\n  promise!: boolean\n  // return callback\n  callback!: boolean\n  requireAs: Array<RequireItem> = []\n  push(init: ParserResult) {\n    const { name, params } = detectDirective(init.data.trim())\n    switch (name) {\n      case 'deindent':\n        this.deindent = params.length > 0 ? parseInt(params[0]) : true\n        break\n      case 'extend':\n        this.extend = params[0]\n        break\n      case 'context':\n        this.context = params[0]\n        break\n      case 'alias':\n        this.alias = params\n        break\n      case 'chunks':\n        this.chunks = params[0]\n        break\n      case 'includeMainChunk':\n        this.includeMainChunk = true\n        break\n      case 'useHash':\n        this.useHash = true\n        break\n      case 'noContent':\n        this.content = false\n        break\n      case 'noSlots':\n        this.slots = false\n        break\n      case 'noBlocks':\n        this.blocks = false\n        break\n      case 'noPartial':\n        this.partial = false\n        break\n      case 'noOptions':\n        this.options = false\n        break\n      case 'promise':\n        this.promise = true\n        break\n      case 'callback':\n        this.callback = true\n        break\n      case 'requireAs':\n        this.requireAs.push({ name: params[0], alias: params[1] })\n        break\n      default:\n      // console.log('unknown directive: ' + name)\n    }\n  }\n}\n\nexport class CodeBlock {\n  name!: string\n  main: Array<Items> = []\n  // сделать все необходимые проверки для более чистого кода\n  //\n  directives: CodeBlockDirectives = new CodeBlockDirectives()\n  documentation: Array<Items> = []\n  slots: { [slot: string]: CodeBlock } = {}\n  blocks: { [block: string]: CodeBlock } = {}\n  constructor(init?: ParserResult) {\n    if (init) {\n      this.name = UNQUOTE(init.data)\n    }\n  }\n  addBlock(block: CodeBlock) {\n    this.directives.blocks = true\n    this.blocks[block.name] = block\n  }\n  addSlot(slot: CodeBlock) {\n    this.directives.slots = true\n    this.blocks[slot.name] = slot\n  }\n}\n\nconst UNQUOTE = (str?: string) => {\n  if (str) {\n    let res = str.trim()\n    res = res.match(/['\"`]([^`'\"].*)[`'\"]/)?.[1] ?? res\n    return res\n  } else {\n    return ''\n  }\n}\n\nconst UNPARAM = (str?: string) => {\n  if (str) {\n    let res = str?.trim()\n    res = res.match(/\\(?([^\\)].*\\))/)?.[1] ?? res\n    return res.split(',').map(UNQUOTE)\n  } else {\n    return []\n  }\n}\n\nexport class Parser {\n  private buffer: string\n  private size: number\n  public INDENT!: number\n  private static INITIAL_STATE: ResultTypes = 'text'\n  private static DEFAULT_TAB_SIZE = 2\n  private globalState: ResultTypes\n  private actualState?: ResultTypes | null\n  private globalToken!: ParserResult\n  private pos: number = 0\n  private line: number = 1\n  private column: number = 1\n  private curlyAware: 0 | 1 | 2 | undefined = 0\n  private curlyBalance: Array<number> = []\n  private result: Array<ParserResult> = []\n  public static parse(text: string | Buffer, options: { indent?: string | number } = {}) {\n    const parser = new Parser(typeof text == 'string' ? text : text.toString(), options)\n    parser.parse()\n    return parser.process()\n  }\n  private constructor(value: string, options: { indent?: string | number }) {\n    if (options.indent) {\n      this.INDENT = typeof options.indent === 'string' ? options.indent.length : options.indent\n    }\n    this.globalState = Parser.INITIAL_STATE\n    this.buffer = value.toString()\n    this.size = this.buffer.length\n  }\n\n  collect() {\n    const { term, eol } = this.SYMBOL()\n    if (eol) {\n      this.globalToken.eol = true\n      this.term()\n    } else {\n      this.globalToken.data += term\n    }\n  }\n\n  private run(currentState: ResultTypes) {\n    const init_pos = this.pos\n    const state = globalStates[currentState]\n    this.curlyAware = state.curly\n    if (state.start) {\n      if (state.skip?.start) {\n        for (let i = 0; i < state.skip.start.length; i += 1) {\n          if (this.SUB(state.skip.start[i]) == state.skip.start[i]) {\n            // process as string\n            return false\n          }\n        }\n      }\n      //has start\n      let foundStart = false\n      let foundEnd = false\n      for (let i = state.start.length - 1; i >= 0; i -= 1) {\n        const p = state.start[i]\n        const subs = this.SUB(p).toLowerCase()\n        if (subs == p) {\n          foundStart = true\n          this.globalState = currentState\n          this.actualState = state.type?.[p] ?? currentState\n          this.term({ start: p })\n          this.SKIP(p)\n          break\n        }\n      }\n      if (foundStart)\n        do {\n          if (state.end) {\n            let i\n            for (i = state.end.length - 1; i >= 0; i -= 1) {\n              const p = state.end[i]\n              if (state.curly == 1 && p.indexOf('}') > -1) {\n                if (this.curlyBalance.length > 0) {\n                  break\n                }\n              }\n              if (state.curly == 2 && p.indexOf('}}') > -1) {\n                if (this.curlyBalance.length > 0) {\n                  break\n                }\n              }\n              const subs = this.SUB(p).toLowerCase()\n              if (subs == p) {\n                this.SKIP(p)\n                foundEnd = true\n                break\n              }\n            }\n            if (!foundEnd) {\n              this.collect()\n            } else {\n              this.globalToken.end = state.end[i]\n              this.actualState = null\n            }\n          } else {\n            foundEnd = true\n          }\n        } while (!foundEnd && this.pos < this.size)\n    }\n\n    // has only states\n    else if (state.states) {\n      let found = false\n      for (let i = state.states.length - 1; i >= 0; i -= 1) {\n        const name = state.states[i]\n        found = this.run(name)\n        if (found) {\n          this.globalState = currentState\n          this.actualState = null\n          this.term()\n          break\n        }\n      }\n      if (!found) {\n        this.collect()\n      }\n    }\n    return init_pos != this.pos\n  }\n\n  private parse() {\n    if (this.size > 0) {\n      this.term()\n      do {\n        this.run(this.globalState)\n      } while (this.pos < this.size)\n      this.term()\n    }\n  }\n\n  private process() {\n    const content = new CodeBlock()\n\n    const resultSize = this.result.length\n    let curr = content\n    for (let i = 0; i < resultSize; i += 1) {\n      let r = this.result[i]\n      let { type, pos, line, column, start, end, data, eol } = r\n\n      const trimStartLines = (lines?: number) => {\n        let newLine = false\n        do {\n          if (curr.main.length > 0) {\n            let prev = curr.main[curr.main.length - 1]\n            if (prev?.type == 'text' || (prev?.type == 'empty' && type === 'code')) {\n              prev.content = prev.content.trimEnd()\n              if (!prev.content) {\n                if (prev.eol) newLine = true\n                curr.main.pop()\n                if (lines) {\n                  lines -= 1\n                  if (!lines) {\n                    break\n                  }\n                }\n              } else {\n                prev.eol = false\n                break\n              }\n            } else {\n              if (newLine && prev.type === 'code') prev.eol = true\n              break\n            }\n          } else {\n            break\n          }\n        } while (true)\n      }\n      const trimEndLines = (lines?: number) => {\n        let nextline = 0\n        do {\n          nextline += 1\n          if (i + nextline < resultSize) {\n            let next = this.result[i + nextline]\n            if (next.type == 'text') {\n              next.data = next.data.trimStart()\n              if (!next.data) {\n                next.type = 'skip'\n                if (lines) {\n                  lines -= 1\n                  if (!lines) {\n                    break\n                  }\n                }\n              } else {\n                next.eol = false\n                break\n              }\n            } else {\n              break\n            }\n          } else {\n            break\n          }\n        } while (true)\n      }\n      const trimStartSpases = () => {\n        if (curr.main.length > 0) {\n          let prev = curr.main[curr.main.length - 1]\n          if (prev.type == 'text') {\n            prev.content = prev.content.replaceAll(' ', '')\n            if (!prev.content) {\n              curr.main.pop()\n            }\n          }\n        }\n      }\n\n      const trimEndSpaces = () => {\n        if (i + 1 < resultSize) {\n          let next = this.result[i + 1]\n          if (next.type == 'text') {\n            next.data = next.data.replaceAll(' ', '')\n            if (!next.data) {\n              next.type = 'skip'\n            }\n          }\n        }\n      }\n\n      if (curr.main.length > 0) {\n        let prev = curr.main[curr.main.length - 1]\n        if (prev.line != line) {\n          curr.main[curr.main.length - 1].eol = true\n        } else {\n          curr.main[curr.main.length - 1].eol = false\n        }\n      }\n      switch (type) {\n        case 'directive':\n          trimStartLines()\n          trimEndLines()\n          curr.directives.push(r)\n          break\n        case 'blockStart':\n          trimStartLines()\n          trimEndLines()\n          curr = new CodeBlock(r)\n          content.addBlock(curr)\n          break\n        case 'slotStart':\n          trimStartLines()\n          trimEndLines()\n          curr = new CodeBlock(r)\n          content.addSlot(curr)\n          break\n        case 'blockEnd':\n          trimStartLines()\n          curr = content\n          trimEndLines()\n          break\n        case 'unknown':\n          /**\n            <% 'Scriptlet' tag, for control-flow, no output\n            <%_ ‘Whitespace Slurping’ Scriptlet tag, strips all whitespace before it\n            <%= Outputs the value into the template (HTML escaped)\n            <%- Outputs the unescaped value into the template\n             */\n          let actual_type: ResultTypes = 'unknown'\n          switch (r.start) {\n            case '<%':\n              actual_type = 'code'\n              break\n            case '<%_':\n              actual_type = 'code'\n              trimStartSpases()\n              break\n            case '<%-':\n              actual_type = 'expression'\n              break\n            case '<%=':\n              actual_type = 'uexpression'\n              break\n            case '<%#':\n              actual_type = 'comments'\n              break\n          }\n          switch (r.end) {\n            case '-%>':\n              trimEndLines(1)\n              break\n            case '_%>':\n              trimEndSpaces()\n              break\n          }\n          // if (data) {\n          if (actual_type !== 'comments') {\n            curr.main.push({\n              content: data,\n              pos,\n              line,\n              column,\n              start,\n              end,\n              type: actual_type,\n              eol,\n            })\n          } else {\n            curr.documentation.push({\n              content: data,\n              pos,\n              line,\n              column,\n              start,\n              end,\n              type: actual_type,\n              eol,\n            })\n          }\n          // }\n          break\n        case 'code':\n          if (start == '<#-') {\n            trimStartLines()\n          }\n          if (end == '-#>') {\n            trimEndLines()\n          }\n          // if (data) {\n          curr.main.push({\n            content: data,\n            pos,\n            line,\n            column,\n            start,\n            end,\n            type,\n            eol,\n          })\n          // }\n          break\n        case 'expression':\n        case 'expression2':\n          // if (data)\n          {\n            const current: Items = {\n              content: data,\n              pos,\n              line,\n              column,\n              start,\n              end,\n              type: 'expression',\n              eol,\n            }\n\n            const prev = curr.main.pop() as Items\n            if (\n              prev?.type !== 'text' ||\n              (prev?.type === 'text' && prev?.content.trim().length > 0) ||\n              (prev?.type === 'text' && prev?.eol)\n            ) {\n              curr.main.push(prev)\n            } else {\n              current.indent = prev.content\n            }\n\n            curr.main.push(current)\n          }\n          break\n        case 'uexpression':\n        case 'uexpression2':\n          // if (data) {\n          const current: Items = {\n            content: data,\n            pos,\n            line,\n            column,\n            start,\n            end,\n            type: 'uexpression',\n            eol,\n          }\n\n          const prev = curr.main.pop() as Items\n          if (prev?.type !== 'text' || (prev?.type === 'text' && prev?.eol)) {\n            curr.main.push(prev)\n          } else {\n            current.indent = prev.content\n          }\n\n          curr.main.push(current)\n          // }\n          break\n        case 'text': {\n          let actualType: ResultTypes = data || eol ? type : 'empty'\n          curr.main.push({\n            content: data,\n            pos,\n            line,\n            column,\n            start,\n            end,\n            type: actualType,\n            eol,\n          })\n          break\n        }\n        case 'comments':\n          trimStartLines()\n          trimEndLines()\n          // if (data) {\n          curr.documentation.push({\n            content: data,\n            pos,\n            line,\n            column,\n            start,\n            end,\n            type,\n            eol,\n          })\n          // }\n          break\n      }\n    }\n    return content\n  }\n\n  private SYMBOL() {\n    const res = this.buffer[this.pos]\n    if (this.curlyAware == 1) {\n      if (~res.indexOf('{')) {\n        this.curlyBalance.push(this.pos)\n      } else if (~res.indexOf('}')) {\n        this.curlyBalance.pop()\n      }\n    }\n    if (this.curlyAware == 2) {\n      if (~res.indexOf('{{')) {\n        this.curlyBalance.push(this.pos)\n      } else if (~res.indexOf('}}')) {\n        this.curlyBalance.pop()\n      }\n    }\n    // can return more than one char as autoocorrection of endof lines\n    return this.SKIP(res)\n  }\n  private DETECT_INDENT() {\n    const { buffer } = this\n    const indent = detectIndent(buffer).indent\n    if (~indent.indexOf('\\t')) {\n      this.INDENT = Parser.DEFAULT_TAB_SIZE\n    } else {\n      this.INDENT = indent.length\n    }\n  }\n  private SKIP(term: string) {\n    const { INDENT } = this\n    let eol = false\n    if (term.length == 1) {\n      if (term == '\\n' || term == '\\r' || term == '\\u2028' || term == '\\u2029') {\n        if (term == '\\r' && this.SUB('\\r\\n') == '\\r\\n') {\n          term = '\\r\\n'\n        }\n        this.column = 1\n        this.line += 1\n        eol = true\n      } else if (term == '\\t') {\n        if (!INDENT) this.DETECT_INDENT()\n        this.column += this.INDENT\n      } else {\n        this.column += 1\n      }\n      this.pos += term.length\n    } else {\n      // каждое вхождение нужно разобрать\n      // имитируем посимвольную передачу\n      const startPos = this.pos\n      let nTerm = ''\n      do {\n        // может переходить больше чем на 1 символ\n        nTerm += this.SKIP(this.buffer[this.pos])\n      } while (this.pos < startPos + term.length)\n      term = nTerm\n    }\n\n    return { term, eol }\n  }\n  private block(extra: Partial<ParserResult> = {}): ParserResult {\n    const { pos, line, column, globalState, actualState } = this\n    return {\n      data: '',\n      pos,\n      line,\n      column,\n      type: actualState || globalState,\n      start: '',\n      end: '',\n      eol: false,\n      ...extra,\n    }\n  }\n  private SUB(str) {\n    const { pos, size, buffer } = this\n    return SUB(buffer, str, pos, size)\n  }\n  private term(extra = {}) {\n    this.globalToken = this.block(extra)\n    this.result.push(this.globalToken)\n  }\n}\n\nfunction SUB(buffer: string, str: string, pos: number = 0, size: number = 0) {\n  if (!size) {\n    size = buffer.length\n  }\n  const len = str.length\n  const from = pos\n  const to = pos + len\n  if (to <= size) {\n    let res = ''\n    for (let i = from; i < to; i += 1) {\n      res += buffer[i]\n    }\n    return res\n  } else {\n    return ''\n  }\n}\n"],"names":[],"mappings":"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"}